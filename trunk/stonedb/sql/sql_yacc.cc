/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_FORMAT_SYM = 327,
     COLUMN_NAME_SYM = 328,
     COMMENT_SYM = 329,
     COMMITTED_SYM = 330,
     COMMIT_SYM = 331,
     COMPACT_SYM = 332,
     COMPLETION_SYM = 333,
     COMPRESSED_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONVERT_SYM = 346,
     COUNT_SYM = 347,
     CPU_SYM = 348,
     CREATE = 349,
     CROSS = 350,
     CUBE_SYM = 351,
     CURDATE = 352,
     CURRENT_SYM = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DEALLOCATE_SYM = 371,
     DECIMAL_NUM = 372,
     DECIMAL_SYM = 373,
     DECLARE_SYM = 374,
     DEFAULT = 375,
     DEFAULT_AUTH_SYM = 376,
     DEFINER_SYM = 377,
     DELAYED_SYM = 378,
     DELAY_KEY_WRITE_SYM = 379,
     DELETE_SYM = 380,
     DESC = 381,
     DESCRIBE = 382,
     DES_KEY_FILE = 383,
     DETERMINISTIC_SYM = 384,
     DIAGNOSTICS_SYM = 385,
     DIRECTORY_SYM = 386,
     DISABLE_SYM = 387,
     DISCARD = 388,
     DISK_SYM = 389,
     DISTINCT = 390,
     DIV_SYM = 391,
     DOUBLE_SYM = 392,
     DO_SYM = 393,
     DROP = 394,
     DUAL_SYM = 395,
     DUMPFILE = 396,
     DUPLICATE_SYM = 397,
     DYNAMIC_SYM = 398,
     EACH_SYM = 399,
     ELSE = 400,
     ELSEIF_SYM = 401,
     ENABLE_SYM = 402,
     ENCLOSED = 403,
     END = 404,
     ENDS_SYM = 405,
     END_OF_INPUT = 406,
     ENGINES_SYM = 407,
     ENGINE_SYM = 408,
     ENUM = 409,
     EQ = 410,
     EQUAL_SYM = 411,
     ERROR_SYM = 412,
     ERRORS = 413,
     ESCAPED = 414,
     ESCAPE_SYM = 415,
     EVENTS_SYM = 416,
     EVENT_SYM = 417,
     EVERY_SYM = 418,
     EXCHANGE_SYM = 419,
     EXECUTE_SYM = 420,
     EXISTS = 421,
     EXIT_SYM = 422,
     EXPANSION_SYM = 423,
     EXPIRE_SYM = 424,
     EXPORT_SYM = 425,
     EXTENDED_SYM = 426,
     EXTENT_SIZE_SYM = 427,
     EXTRACT_SYM = 428,
     FALSE_SYM = 429,
     FAST_SYM = 430,
     FAULTS_SYM = 431,
     FETCH_SYM = 432,
     FILE_SYM = 433,
     FIRST_SYM = 434,
     FIXED_SYM = 435,
     FLOAT_NUM = 436,
     FLOAT_SYM = 437,
     FLUSH_SYM = 438,
     FORCE_SYM = 439,
     FOREIGN = 440,
     FOR_SYM = 441,
     FORMAT_SYM = 442,
     FOUND_SYM = 443,
     FROM = 444,
     FULL = 445,
     FULLTEXT_SYM = 446,
     FUNCTION_SYM = 447,
     GE = 448,
     GENERAL = 449,
     GEOMETRYCOLLECTION = 450,
     GEOMETRY_SYM = 451,
     GET_FORMAT = 452,
     GET_SYM = 453,
     GLOBAL_SYM = 454,
     GRANT = 455,
     GRANTS = 456,
     GROUP_SYM = 457,
     GROUP_CONCAT_SYM = 458,
     GT_SYM = 459,
     HANDLER_SYM = 460,
     HASH_SYM = 461,
     HAVING = 462,
     HELP_SYM = 463,
     HEX_NUM = 464,
     HIGH_PRIORITY = 465,
     HOST_SYM = 466,
     HOSTS_SYM = 467,
     HOUR_MICROSECOND_SYM = 468,
     HOUR_MINUTE_SYM = 469,
     HOUR_SECOND_SYM = 470,
     HOUR_SYM = 471,
     IDENT = 472,
     IDENTIFIED_SYM = 473,
     IDENT_QUOTED = 474,
     IF = 475,
     IGNORE_SYM = 476,
     IGNORE_SERVER_IDS_SYM = 477,
     IMPORT = 478,
     INDEXES = 479,
     INDEX_SYM = 480,
     INFILE = 481,
     INITIAL_SIZE_SYM = 482,
     INNER_SYM = 483,
     INOUT_SYM = 484,
     INSENSITIVE_SYM = 485,
     INSERT = 486,
     INSERT_METHOD = 487,
     INSTALL_SYM = 488,
     INTERVAL_SYM = 489,
     INTO = 490,
     INT_SYM = 491,
     INVOKER_SYM = 492,
     IN_SYM = 493,
     IO_AFTER_GTIDS = 494,
     IO_BEFORE_GTIDS = 495,
     IO_SYM = 496,
     IPC_SYM = 497,
     IS = 498,
     ISOLATION = 499,
     ISSUER_SYM = 500,
     ITERATE_SYM = 501,
     JOIN_SYM = 502,
     KEYS = 503,
     KEY_BLOCK_SIZE = 504,
     KEY_SYM = 505,
     KILL_SYM = 506,
     LANGUAGE_SYM = 507,
     LAST_SYM = 508,
     LE = 509,
     LEADING = 510,
     LEAVES = 511,
     LEAVE_SYM = 512,
     LEFT = 513,
     LESS_SYM = 514,
     LEVEL_SYM = 515,
     LEX_HOSTNAME = 516,
     LIKE = 517,
     LIMIT = 518,
     LINEAR_SYM = 519,
     LINES = 520,
     LINESTRING = 521,
     LIST_SYM = 522,
     LOAD = 523,
     LOCAL_SYM = 524,
     LOCATOR_SYM = 525,
     LOCKS_SYM = 526,
     LOCK_SYM = 527,
     LOGFILE_SYM = 528,
     LOGS_SYM = 529,
     LONGBLOB = 530,
     LONGTEXT = 531,
     LONG_NUM = 532,
     LONG_SYM = 533,
     LOOP_SYM = 534,
     LOW_PRIORITY = 535,
     LT = 536,
     MASTER_AUTO_POSITION_SYM = 537,
     MASTER_BIND_SYM = 538,
     MASTER_CONNECT_RETRY_SYM = 539,
     MASTER_DELAY_SYM = 540,
     MASTER_HOST_SYM = 541,
     MASTER_LOG_FILE_SYM = 542,
     MASTER_LOG_POS_SYM = 543,
     MASTER_PASSWORD_SYM = 544,
     MASTER_PORT_SYM = 545,
     MASTER_RETRY_COUNT_SYM = 546,
     MASTER_SERVER_ID_SYM = 547,
     MASTER_SSL_CAPATH_SYM = 548,
     MASTER_SSL_CA_SYM = 549,
     MASTER_SSL_CERT_SYM = 550,
     MASTER_SSL_CIPHER_SYM = 551,
     MASTER_SSL_CRL_SYM = 552,
     MASTER_SSL_CRLPATH_SYM = 553,
     MASTER_SSL_KEY_SYM = 554,
     MASTER_SSL_SYM = 555,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 556,
     MASTER_SYM = 557,
     MASTER_USER_SYM = 558,
     MASTER_HEARTBEAT_PERIOD_SYM = 559,
     MATCH = 560,
     MAX_CONNECTIONS_PER_HOUR = 561,
     MAX_QUERIES_PER_HOUR = 562,
     MAX_ROWS = 563,
     MAX_SIZE_SYM = 564,
     MAX_SYM = 565,
     MAX_UPDATES_PER_HOUR = 566,
     MAX_USER_CONNECTIONS_SYM = 567,
     MAX_VALUE_SYM = 568,
     MEDIUMBLOB = 569,
     MEDIUMINT = 570,
     MEDIUMTEXT = 571,
     MEDIUM_SYM = 572,
     MEMORY_SYM = 573,
     MERGE_SYM = 574,
     MESSAGE_TEXT_SYM = 575,
     MICROSECOND_SYM = 576,
     MIGRATE_SYM = 577,
     MINUTE_MICROSECOND_SYM = 578,
     MINUTE_SECOND_SYM = 579,
     MINUTE_SYM = 580,
     MIN_ROWS = 581,
     MIN_SYM = 582,
     MODE_SYM = 583,
     MODIFIES_SYM = 584,
     MODIFY_SYM = 585,
     MOD_SYM = 586,
     MONTH_SYM = 587,
     MULTILINESTRING = 588,
     MULTIPOINT = 589,
     MULTIPOLYGON = 590,
     MUTEX_SYM = 591,
     MYSQL_ERRNO_SYM = 592,
     NAMES_SYM = 593,
     NAME_SYM = 594,
     NATIONAL_SYM = 595,
     NATURAL = 596,
     NCHAR_STRING = 597,
     NCHAR_SYM = 598,
     NDBCLUSTER_SYM = 599,
     NE = 600,
     NEG = 601,
     NEW_SYM = 602,
     NEXT_SYM = 603,
     NODEGROUP_SYM = 604,
     NONE_SYM = 605,
     NOT2_SYM = 606,
     NOT_SYM = 607,
     NOW_SYM = 608,
     NO_SYM = 609,
     NO_WAIT_SYM = 610,
     NO_WRITE_TO_BINLOG = 611,
     NULL_SYM = 612,
     NUM = 613,
     NUMBER_SYM = 614,
     NUMERIC_SYM = 615,
     NVARCHAR_SYM = 616,
     OFFSET_SYM = 617,
     OLD_PASSWORD = 618,
     ON = 619,
     ONE_SYM = 620,
     ONLY_SYM = 621,
     OPEN_SYM = 622,
     OPTIMIZE = 623,
     OPTIONS_SYM = 624,
     OPTION = 625,
     OPTIONALLY = 626,
     OR2_SYM = 627,
     ORDER_SYM = 628,
     OR_OR_SYM = 629,
     OR_SYM = 630,
     OUTER = 631,
     OUTFILE = 632,
     OUT_SYM = 633,
     OWNER_SYM = 634,
     PACK_KEYS_SYM = 635,
     PAGE_SYM = 636,
     PARAM_MARKER = 637,
     PARSER_SYM = 638,
     PARTIAL = 639,
     PARTITION_SYM = 640,
     PARTITIONS_SYM = 641,
     PARTITIONING_SYM = 642,
     PASSWORD = 643,
     PHASE_SYM = 644,
     PLUGIN_DIR_SYM = 645,
     PLUGIN_SYM = 646,
     PLUGINS_SYM = 647,
     POINT_SYM = 648,
     POLYGON = 649,
     PORT_SYM = 650,
     POSITION_SYM = 651,
     PRECISION = 652,
     PREPARE_SYM = 653,
     PRESERVE_SYM = 654,
     PREV_SYM = 655,
     PRIMARY_SYM = 656,
     PRIVILEGES = 657,
     PROCEDURE_SYM = 658,
     PROCESS = 659,
     PROCESSLIST_SYM = 660,
     PROFILE_SYM = 661,
     PROFILES_SYM = 662,
     PROXY_SYM = 663,
     PURGE = 664,
     QUARTER_SYM = 665,
     QUERY_SYM = 666,
     QUICK = 667,
     RANGE_SYM = 668,
     READS_SYM = 669,
     READ_ONLY_SYM = 670,
     READ_SYM = 671,
     READ_WRITE_SYM = 672,
     REAL = 673,
     REBUILD_SYM = 674,
     RECOVER_SYM = 675,
     REDOFILE_SYM = 676,
     REDO_BUFFER_SIZE_SYM = 677,
     REDUNDANT_SYM = 678,
     REFERENCES = 679,
     REGEXP = 680,
     RELAY = 681,
     RELAYLOG_SYM = 682,
     RELAY_LOG_FILE_SYM = 683,
     RELAY_LOG_POS_SYM = 684,
     RELAY_THREAD = 685,
     RELEASE_SYM = 686,
     RELOAD = 687,
     REMOVE_SYM = 688,
     RENAME = 689,
     REORGANIZE_SYM = 690,
     REPAIR = 691,
     REPEATABLE_SYM = 692,
     REPEAT_SYM = 693,
     REPLACE = 694,
     REPLICATION = 695,
     REQUIRE_SYM = 696,
     RESET_SYM = 697,
     RESIGNAL_SYM = 698,
     RESOURCES = 699,
     RESTORE_SYM = 700,
     RESTRICT = 701,
     RESUME_SYM = 702,
     RETURNED_SQLSTATE_SYM = 703,
     RETURNS_SYM = 704,
     RETURN_SYM = 705,
     REVERSE_SYM = 706,
     REVOKE = 707,
     RIGHT = 708,
     ROLLBACK_SYM = 709,
     ROLLUP_SYM = 710,
     ROUGHLY = 711,
     ROUTINE_SYM = 712,
     ROWS_SYM = 713,
     ROW_FORMAT_SYM = 714,
     ROW_SYM = 715,
     ROW_COUNT_SYM = 716,
     RTREE_SYM = 717,
     SAVEPOINT_SYM = 718,
     SCHEDULE_SYM = 719,
     SCHEMA_NAME_SYM = 720,
     SECOND_MICROSECOND_SYM = 721,
     SECOND_SYM = 722,
     SECURITY_SYM = 723,
     SELECT_SYM = 724,
     SENSITIVE_SYM = 725,
     SEPARATOR_SYM = 726,
     SERIALIZABLE_SYM = 727,
     SERIAL_SYM = 728,
     SESSION_SYM = 729,
     SERVER_SYM = 730,
     SERVER_OPTIONS = 731,
     SET = 732,
     SET_VAR = 733,
     SHARE_SYM = 734,
     SHIFT_LEFT = 735,
     SHIFT_RIGHT = 736,
     SHOW = 737,
     SHUTDOWN = 738,
     SIGNAL_SYM = 739,
     SIGNED_SYM = 740,
     SIMPLE_SYM = 741,
     SLAVE = 742,
     SLOW = 743,
     SMALLINT = 744,
     SNAPSHOT_SYM = 745,
     SOCKET_SYM = 746,
     SONAME_SYM = 747,
     SOUNDS_SYM = 748,
     SOURCE_SYM = 749,
     SPATIAL_SYM = 750,
     SPECIFIC_SYM = 751,
     SQLEXCEPTION_SYM = 752,
     SQLSTATE_SYM = 753,
     SQLWARNING_SYM = 754,
     SQL_AFTER_GTIDS = 755,
     SQL_AFTER_MTS_GAPS = 756,
     SQL_BEFORE_GTIDS = 757,
     SQL_BIG_RESULT = 758,
     SQL_BUFFER_RESULT = 759,
     SQL_CACHE_SYM = 760,
     SQL_CALC_FOUND_ROWS = 761,
     SQL_NO_CACHE_SYM = 762,
     SQL_SMALL_RESULT = 763,
     SQL_SYM = 764,
     SQL_THREAD = 765,
     SSL_SYM = 766,
     STARTING = 767,
     STARTS_SYM = 768,
     START_SYM = 769,
     STATS_AUTO_RECALC_SYM = 770,
     STATS_PERSISTENT_SYM = 771,
     STATS_SAMPLE_PAGES_SYM = 772,
     STATUS_SYM = 773,
     STDDEV_SAMP_SYM = 774,
     STD_SYM = 775,
     STOP_SYM = 776,
     STORAGE_SYM = 777,
     STRAIGHT_JOIN = 778,
     STRING_SYM = 779,
     SUBCLASS_ORIGIN_SYM = 780,
     SUBDATE_SYM = 781,
     SUBJECT_SYM = 782,
     SUBPARTITIONS_SYM = 783,
     SUBPARTITION_SYM = 784,
     SUBSTRING = 785,
     SUM_SYM = 786,
     SUPER_SYM = 787,
     SUSPEND_SYM = 788,
     SWAPS_SYM = 789,
     SWITCHES_SYM = 790,
     SYSDATE = 791,
     TABLES = 792,
     TABLESPACE = 793,
     TABLE_REF_PRIORITY = 794,
     TABLE_SYM = 795,
     TABLE_CHECKSUM_SYM = 796,
     TABLE_NAME_SYM = 797,
     TEMPORARY = 798,
     TEMPTABLE_SYM = 799,
     TERMINATED = 800,
     TEXT_STRING = 801,
     TEXT_SYM = 802,
     THAN_SYM = 803,
     THEN_SYM = 804,
     TIMESTAMP = 805,
     TIMESTAMP_ADD = 806,
     TIMESTAMP_DIFF = 807,
     TIME_SYM = 808,
     TINYBLOB = 809,
     TINYINT = 810,
     TINYTEXT = 811,
     TO_SYM = 812,
     TRAILING = 813,
     TRANSACTION_SYM = 814,
     TRIGGERS_SYM = 815,
     TRIGGER_SYM = 816,
     TRIM = 817,
     TRUE_SYM = 818,
     TRUNCATE_SYM = 819,
     TYPES_SYM = 820,
     TYPE_SYM = 821,
     UDF_RETURNS_SYM = 822,
     ULONGLONG_NUM = 823,
     UNCOMMITTED_SYM = 824,
     UNDEFINED_SYM = 825,
     UNDERSCORE_CHARSET = 826,
     UNDOFILE_SYM = 827,
     UNDO_BUFFER_SIZE_SYM = 828,
     UNDO_SYM = 829,
     UNICODE_SYM = 830,
     UNINSTALL_SYM = 831,
     UNION_SYM = 832,
     UNIQUE_SYM = 833,
     UNKNOWN_SYM = 834,
     UNLOCK_SYM = 835,
     UNSIGNED = 836,
     UNTIL_SYM = 837,
     UPDATE_SYM = 838,
     UPGRADE_SYM = 839,
     USAGE = 840,
     USER = 841,
     USE_FRM = 842,
     USE_SYM = 843,
     USING = 844,
     UTC_DATE_SYM = 845,
     UTC_TIMESTAMP_SYM = 846,
     UTC_TIME_SYM = 847,
     VALUES = 848,
     VALUE_SYM = 849,
     VARBINARY = 850,
     VARCHAR = 851,
     VARIABLES = 852,
     VARIANCE_SYM = 853,
     VARYING = 854,
     VAR_SAMP_SYM = 855,
     VIEW_SYM = 856,
     WAIT_SYM = 857,
     WARNINGS = 858,
     WEEK_SYM = 859,
     WEIGHT_STRING_SYM = 860,
     WHEN_SYM = 861,
     WHERE = 862,
     WHILE_SYM = 863,
     WITH = 864,
     WITH_CUBE_SYM = 865,
     WITH_ROLLUP_SYM = 866,
     WORK_SYM = 867,
     WRAPPER_SYM = 868,
     WRITE_SYM = 869,
     X509_SYM = 870,
     XA_SYM = 871,
     XML_SYM = 872,
     XOR = 873,
     YEAR_MONTH_SYM = 874,
     YEAR_SYM = 875,
     ZEROFILL = 876
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_FORMAT_SYM 327
#define COLUMN_NAME_SYM 328
#define COMMENT_SYM 329
#define COMMITTED_SYM 330
#define COMMIT_SYM 331
#define COMPACT_SYM 332
#define COMPLETION_SYM 333
#define COMPRESSED_SYM 334
#define CONCURRENT 335
#define CONDITION_SYM 336
#define CONNECTION_SYM 337
#define CONSISTENT_SYM 338
#define CONSTRAINT 339
#define CONSTRAINT_CATALOG_SYM 340
#define CONSTRAINT_NAME_SYM 341
#define CONSTRAINT_SCHEMA_SYM 342
#define CONTAINS_SYM 343
#define CONTEXT_SYM 344
#define CONTINUE_SYM 345
#define CONVERT_SYM 346
#define COUNT_SYM 347
#define CPU_SYM 348
#define CREATE 349
#define CROSS 350
#define CUBE_SYM 351
#define CURDATE 352
#define CURRENT_SYM 353
#define CURRENT_USER 354
#define CURSOR_SYM 355
#define CURSOR_NAME_SYM 356
#define CURTIME 357
#define DATABASE 358
#define DATABASES 359
#define DATAFILE_SYM 360
#define DATA_SYM 361
#define DATETIME 362
#define DATE_ADD_INTERVAL 363
#define DATE_SUB_INTERVAL 364
#define DATE_SYM 365
#define DAY_HOUR_SYM 366
#define DAY_MICROSECOND_SYM 367
#define DAY_MINUTE_SYM 368
#define DAY_SECOND_SYM 369
#define DAY_SYM 370
#define DEALLOCATE_SYM 371
#define DECIMAL_NUM 372
#define DECIMAL_SYM 373
#define DECLARE_SYM 374
#define DEFAULT 375
#define DEFAULT_AUTH_SYM 376
#define DEFINER_SYM 377
#define DELAYED_SYM 378
#define DELAY_KEY_WRITE_SYM 379
#define DELETE_SYM 380
#define DESC 381
#define DESCRIBE 382
#define DES_KEY_FILE 383
#define DETERMINISTIC_SYM 384
#define DIAGNOSTICS_SYM 385
#define DIRECTORY_SYM 386
#define DISABLE_SYM 387
#define DISCARD 388
#define DISK_SYM 389
#define DISTINCT 390
#define DIV_SYM 391
#define DOUBLE_SYM 392
#define DO_SYM 393
#define DROP 394
#define DUAL_SYM 395
#define DUMPFILE 396
#define DUPLICATE_SYM 397
#define DYNAMIC_SYM 398
#define EACH_SYM 399
#define ELSE 400
#define ELSEIF_SYM 401
#define ENABLE_SYM 402
#define ENCLOSED 403
#define END 404
#define ENDS_SYM 405
#define END_OF_INPUT 406
#define ENGINES_SYM 407
#define ENGINE_SYM 408
#define ENUM 409
#define EQ 410
#define EQUAL_SYM 411
#define ERROR_SYM 412
#define ERRORS 413
#define ESCAPED 414
#define ESCAPE_SYM 415
#define EVENTS_SYM 416
#define EVENT_SYM 417
#define EVERY_SYM 418
#define EXCHANGE_SYM 419
#define EXECUTE_SYM 420
#define EXISTS 421
#define EXIT_SYM 422
#define EXPANSION_SYM 423
#define EXPIRE_SYM 424
#define EXPORT_SYM 425
#define EXTENDED_SYM 426
#define EXTENT_SIZE_SYM 427
#define EXTRACT_SYM 428
#define FALSE_SYM 429
#define FAST_SYM 430
#define FAULTS_SYM 431
#define FETCH_SYM 432
#define FILE_SYM 433
#define FIRST_SYM 434
#define FIXED_SYM 435
#define FLOAT_NUM 436
#define FLOAT_SYM 437
#define FLUSH_SYM 438
#define FORCE_SYM 439
#define FOREIGN 440
#define FOR_SYM 441
#define FORMAT_SYM 442
#define FOUND_SYM 443
#define FROM 444
#define FULL 445
#define FULLTEXT_SYM 446
#define FUNCTION_SYM 447
#define GE 448
#define GENERAL 449
#define GEOMETRYCOLLECTION 450
#define GEOMETRY_SYM 451
#define GET_FORMAT 452
#define GET_SYM 453
#define GLOBAL_SYM 454
#define GRANT 455
#define GRANTS 456
#define GROUP_SYM 457
#define GROUP_CONCAT_SYM 458
#define GT_SYM 459
#define HANDLER_SYM 460
#define HASH_SYM 461
#define HAVING 462
#define HELP_SYM 463
#define HEX_NUM 464
#define HIGH_PRIORITY 465
#define HOST_SYM 466
#define HOSTS_SYM 467
#define HOUR_MICROSECOND_SYM 468
#define HOUR_MINUTE_SYM 469
#define HOUR_SECOND_SYM 470
#define HOUR_SYM 471
#define IDENT 472
#define IDENTIFIED_SYM 473
#define IDENT_QUOTED 474
#define IF 475
#define IGNORE_SYM 476
#define IGNORE_SERVER_IDS_SYM 477
#define IMPORT 478
#define INDEXES 479
#define INDEX_SYM 480
#define INFILE 481
#define INITIAL_SIZE_SYM 482
#define INNER_SYM 483
#define INOUT_SYM 484
#define INSENSITIVE_SYM 485
#define INSERT 486
#define INSERT_METHOD 487
#define INSTALL_SYM 488
#define INTERVAL_SYM 489
#define INTO 490
#define INT_SYM 491
#define INVOKER_SYM 492
#define IN_SYM 493
#define IO_AFTER_GTIDS 494
#define IO_BEFORE_GTIDS 495
#define IO_SYM 496
#define IPC_SYM 497
#define IS 498
#define ISOLATION 499
#define ISSUER_SYM 500
#define ITERATE_SYM 501
#define JOIN_SYM 502
#define KEYS 503
#define KEY_BLOCK_SIZE 504
#define KEY_SYM 505
#define KILL_SYM 506
#define LANGUAGE_SYM 507
#define LAST_SYM 508
#define LE 509
#define LEADING 510
#define LEAVES 511
#define LEAVE_SYM 512
#define LEFT 513
#define LESS_SYM 514
#define LEVEL_SYM 515
#define LEX_HOSTNAME 516
#define LIKE 517
#define LIMIT 518
#define LINEAR_SYM 519
#define LINES 520
#define LINESTRING 521
#define LIST_SYM 522
#define LOAD 523
#define LOCAL_SYM 524
#define LOCATOR_SYM 525
#define LOCKS_SYM 526
#define LOCK_SYM 527
#define LOGFILE_SYM 528
#define LOGS_SYM 529
#define LONGBLOB 530
#define LONGTEXT 531
#define LONG_NUM 532
#define LONG_SYM 533
#define LOOP_SYM 534
#define LOW_PRIORITY 535
#define LT 536
#define MASTER_AUTO_POSITION_SYM 537
#define MASTER_BIND_SYM 538
#define MASTER_CONNECT_RETRY_SYM 539
#define MASTER_DELAY_SYM 540
#define MASTER_HOST_SYM 541
#define MASTER_LOG_FILE_SYM 542
#define MASTER_LOG_POS_SYM 543
#define MASTER_PASSWORD_SYM 544
#define MASTER_PORT_SYM 545
#define MASTER_RETRY_COUNT_SYM 546
#define MASTER_SERVER_ID_SYM 547
#define MASTER_SSL_CAPATH_SYM 548
#define MASTER_SSL_CA_SYM 549
#define MASTER_SSL_CERT_SYM 550
#define MASTER_SSL_CIPHER_SYM 551
#define MASTER_SSL_CRL_SYM 552
#define MASTER_SSL_CRLPATH_SYM 553
#define MASTER_SSL_KEY_SYM 554
#define MASTER_SSL_SYM 555
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 556
#define MASTER_SYM 557
#define MASTER_USER_SYM 558
#define MASTER_HEARTBEAT_PERIOD_SYM 559
#define MATCH 560
#define MAX_CONNECTIONS_PER_HOUR 561
#define MAX_QUERIES_PER_HOUR 562
#define MAX_ROWS 563
#define MAX_SIZE_SYM 564
#define MAX_SYM 565
#define MAX_UPDATES_PER_HOUR 566
#define MAX_USER_CONNECTIONS_SYM 567
#define MAX_VALUE_SYM 568
#define MEDIUMBLOB 569
#define MEDIUMINT 570
#define MEDIUMTEXT 571
#define MEDIUM_SYM 572
#define MEMORY_SYM 573
#define MERGE_SYM 574
#define MESSAGE_TEXT_SYM 575
#define MICROSECOND_SYM 576
#define MIGRATE_SYM 577
#define MINUTE_MICROSECOND_SYM 578
#define MINUTE_SECOND_SYM 579
#define MINUTE_SYM 580
#define MIN_ROWS 581
#define MIN_SYM 582
#define MODE_SYM 583
#define MODIFIES_SYM 584
#define MODIFY_SYM 585
#define MOD_SYM 586
#define MONTH_SYM 587
#define MULTILINESTRING 588
#define MULTIPOINT 589
#define MULTIPOLYGON 590
#define MUTEX_SYM 591
#define MYSQL_ERRNO_SYM 592
#define NAMES_SYM 593
#define NAME_SYM 594
#define NATIONAL_SYM 595
#define NATURAL 596
#define NCHAR_STRING 597
#define NCHAR_SYM 598
#define NDBCLUSTER_SYM 599
#define NE 600
#define NEG 601
#define NEW_SYM 602
#define NEXT_SYM 603
#define NODEGROUP_SYM 604
#define NONE_SYM 605
#define NOT2_SYM 606
#define NOT_SYM 607
#define NOW_SYM 608
#define NO_SYM 609
#define NO_WAIT_SYM 610
#define NO_WRITE_TO_BINLOG 611
#define NULL_SYM 612
#define NUM 613
#define NUMBER_SYM 614
#define NUMERIC_SYM 615
#define NVARCHAR_SYM 616
#define OFFSET_SYM 617
#define OLD_PASSWORD 618
#define ON 619
#define ONE_SYM 620
#define ONLY_SYM 621
#define OPEN_SYM 622
#define OPTIMIZE 623
#define OPTIONS_SYM 624
#define OPTION 625
#define OPTIONALLY 626
#define OR2_SYM 627
#define ORDER_SYM 628
#define OR_OR_SYM 629
#define OR_SYM 630
#define OUTER 631
#define OUTFILE 632
#define OUT_SYM 633
#define OWNER_SYM 634
#define PACK_KEYS_SYM 635
#define PAGE_SYM 636
#define PARAM_MARKER 637
#define PARSER_SYM 638
#define PARTIAL 639
#define PARTITION_SYM 640
#define PARTITIONS_SYM 641
#define PARTITIONING_SYM 642
#define PASSWORD 643
#define PHASE_SYM 644
#define PLUGIN_DIR_SYM 645
#define PLUGIN_SYM 646
#define PLUGINS_SYM 647
#define POINT_SYM 648
#define POLYGON 649
#define PORT_SYM 650
#define POSITION_SYM 651
#define PRECISION 652
#define PREPARE_SYM 653
#define PRESERVE_SYM 654
#define PREV_SYM 655
#define PRIMARY_SYM 656
#define PRIVILEGES 657
#define PROCEDURE_SYM 658
#define PROCESS 659
#define PROCESSLIST_SYM 660
#define PROFILE_SYM 661
#define PROFILES_SYM 662
#define PROXY_SYM 663
#define PURGE 664
#define QUARTER_SYM 665
#define QUERY_SYM 666
#define QUICK 667
#define RANGE_SYM 668
#define READS_SYM 669
#define READ_ONLY_SYM 670
#define READ_SYM 671
#define READ_WRITE_SYM 672
#define REAL 673
#define REBUILD_SYM 674
#define RECOVER_SYM 675
#define REDOFILE_SYM 676
#define REDO_BUFFER_SIZE_SYM 677
#define REDUNDANT_SYM 678
#define REFERENCES 679
#define REGEXP 680
#define RELAY 681
#define RELAYLOG_SYM 682
#define RELAY_LOG_FILE_SYM 683
#define RELAY_LOG_POS_SYM 684
#define RELAY_THREAD 685
#define RELEASE_SYM 686
#define RELOAD 687
#define REMOVE_SYM 688
#define RENAME 689
#define REORGANIZE_SYM 690
#define REPAIR 691
#define REPEATABLE_SYM 692
#define REPEAT_SYM 693
#define REPLACE 694
#define REPLICATION 695
#define REQUIRE_SYM 696
#define RESET_SYM 697
#define RESIGNAL_SYM 698
#define RESOURCES 699
#define RESTORE_SYM 700
#define RESTRICT 701
#define RESUME_SYM 702
#define RETURNED_SQLSTATE_SYM 703
#define RETURNS_SYM 704
#define RETURN_SYM 705
#define REVERSE_SYM 706
#define REVOKE 707
#define RIGHT 708
#define ROLLBACK_SYM 709
#define ROLLUP_SYM 710
#define ROUGHLY 711
#define ROUTINE_SYM 712
#define ROWS_SYM 713
#define ROW_FORMAT_SYM 714
#define ROW_SYM 715
#define ROW_COUNT_SYM 716
#define RTREE_SYM 717
#define SAVEPOINT_SYM 718
#define SCHEDULE_SYM 719
#define SCHEMA_NAME_SYM 720
#define SECOND_MICROSECOND_SYM 721
#define SECOND_SYM 722
#define SECURITY_SYM 723
#define SELECT_SYM 724
#define SENSITIVE_SYM 725
#define SEPARATOR_SYM 726
#define SERIALIZABLE_SYM 727
#define SERIAL_SYM 728
#define SESSION_SYM 729
#define SERVER_SYM 730
#define SERVER_OPTIONS 731
#define SET 732
#define SET_VAR 733
#define SHARE_SYM 734
#define SHIFT_LEFT 735
#define SHIFT_RIGHT 736
#define SHOW 737
#define SHUTDOWN 738
#define SIGNAL_SYM 739
#define SIGNED_SYM 740
#define SIMPLE_SYM 741
#define SLAVE 742
#define SLOW 743
#define SMALLINT 744
#define SNAPSHOT_SYM 745
#define SOCKET_SYM 746
#define SONAME_SYM 747
#define SOUNDS_SYM 748
#define SOURCE_SYM 749
#define SPATIAL_SYM 750
#define SPECIFIC_SYM 751
#define SQLEXCEPTION_SYM 752
#define SQLSTATE_SYM 753
#define SQLWARNING_SYM 754
#define SQL_AFTER_GTIDS 755
#define SQL_AFTER_MTS_GAPS 756
#define SQL_BEFORE_GTIDS 757
#define SQL_BIG_RESULT 758
#define SQL_BUFFER_RESULT 759
#define SQL_CACHE_SYM 760
#define SQL_CALC_FOUND_ROWS 761
#define SQL_NO_CACHE_SYM 762
#define SQL_SMALL_RESULT 763
#define SQL_SYM 764
#define SQL_THREAD 765
#define SSL_SYM 766
#define STARTING 767
#define STARTS_SYM 768
#define START_SYM 769
#define STATS_AUTO_RECALC_SYM 770
#define STATS_PERSISTENT_SYM 771
#define STATS_SAMPLE_PAGES_SYM 772
#define STATUS_SYM 773
#define STDDEV_SAMP_SYM 774
#define STD_SYM 775
#define STOP_SYM 776
#define STORAGE_SYM 777
#define STRAIGHT_JOIN 778
#define STRING_SYM 779
#define SUBCLASS_ORIGIN_SYM 780
#define SUBDATE_SYM 781
#define SUBJECT_SYM 782
#define SUBPARTITIONS_SYM 783
#define SUBPARTITION_SYM 784
#define SUBSTRING 785
#define SUM_SYM 786
#define SUPER_SYM 787
#define SUSPEND_SYM 788
#define SWAPS_SYM 789
#define SWITCHES_SYM 790
#define SYSDATE 791
#define TABLES 792
#define TABLESPACE 793
#define TABLE_REF_PRIORITY 794
#define TABLE_SYM 795
#define TABLE_CHECKSUM_SYM 796
#define TABLE_NAME_SYM 797
#define TEMPORARY 798
#define TEMPTABLE_SYM 799
#define TERMINATED 800
#define TEXT_STRING 801
#define TEXT_SYM 802
#define THAN_SYM 803
#define THEN_SYM 804
#define TIMESTAMP 805
#define TIMESTAMP_ADD 806
#define TIMESTAMP_DIFF 807
#define TIME_SYM 808
#define TINYBLOB 809
#define TINYINT 810
#define TINYTEXT 811
#define TO_SYM 812
#define TRAILING 813
#define TRANSACTION_SYM 814
#define TRIGGERS_SYM 815
#define TRIGGER_SYM 816
#define TRIM 817
#define TRUE_SYM 818
#define TRUNCATE_SYM 819
#define TYPES_SYM 820
#define TYPE_SYM 821
#define UDF_RETURNS_SYM 822
#define ULONGLONG_NUM 823
#define UNCOMMITTED_SYM 824
#define UNDEFINED_SYM 825
#define UNDERSCORE_CHARSET 826
#define UNDOFILE_SYM 827
#define UNDO_BUFFER_SIZE_SYM 828
#define UNDO_SYM 829
#define UNICODE_SYM 830
#define UNINSTALL_SYM 831
#define UNION_SYM 832
#define UNIQUE_SYM 833
#define UNKNOWN_SYM 834
#define UNLOCK_SYM 835
#define UNSIGNED 836
#define UNTIL_SYM 837
#define UPDATE_SYM 838
#define UPGRADE_SYM 839
#define USAGE 840
#define USER 841
#define USE_FRM 842
#define USE_SYM 843
#define USING 844
#define UTC_DATE_SYM 845
#define UTC_TIMESTAMP_SYM 846
#define UTC_TIME_SYM 847
#define VALUES 848
#define VALUE_SYM 849
#define VARBINARY 850
#define VARCHAR 851
#define VARIABLES 852
#define VARIANCE_SYM 853
#define VARYING 854
#define VAR_SAMP_SYM 855
#define VIEW_SYM 856
#define WAIT_SYM 857
#define WARNINGS 858
#define WEEK_SYM 859
#define WEIGHT_STRING_SYM 860
#define WHEN_SYM 861
#define WHERE 862
#define WHILE_SYM 863
#define WITH 864
#define WITH_CUBE_SYM 865
#define WITH_ROLLUP_SYM 866
#define WORK_SYM 867
#define WRAPPER_SYM 868
#define WRITE_SYM 869
#define X509_SYM 870
#define XA_SYM 871
#define XML_SYM 872
#define XOR 873
#define YEAR_MONTH_SYM 874
#define YEAR_SYM 875
#define ZEROFILL 876




/* Copy the first part of user declarations.  */
#line 24 ""

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 968 ""
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;
}
/* Line 193 of yacc.c.  */
#line 2349 
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 1026 ""

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 2365

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  597
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55843

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  641
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  952
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2671
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4531

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   876

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   634,     2,     2,     2,   628,   623,     2,
     631,   632,   626,   625,   633,   624,   639,   627,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   640,   637,
       2,     2,     2,     2,   638,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   629,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   635,   622,   636,   630,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   315,   316,   317,   332,   333,
     334,   349,   350,   357,   358,   362,   367,   372,   376,   379,
     390,   392,   396,   399,   402,   405,   408,   411,   414,   417,
     418,   432,   433,   440,   443,   444,   446,   450,   452,   453,
     456,   457,   460,   461,   463,   467,   472,   473,   476,   477,
     480,   482,   484,   486,   488,   490,   492,   494,   496,   498,
     500,   502,   504,   506,   507,   511,   513,   514,   517,   518,
     521,   524,   527,   530,   533,   537,   541,   543,   545,   547,
     550,   554,   558,   559,   564,   565,   569,   570,   572,   576,
     578,   579,   581,   585,   587,   588,   592,   593,   595,   599,
     601,   606,   607,   609,   611,   613,   614,   618,   621,   625,
     626,   630,   631,   637,   643,   644,   652,   653,   660,   662,
     664,   666,   670,   672,   674,   676,   680,   681,   683,   685,
     687,   689,   692,   694,   698,   700,   702,   703,   705,   706,
     709,   713,   719,   721,   723,   725,   727,   729,   731,   733,
     735,   737,   739,   741,   743,   745,   747,   749,   753,   758,
     759,   761,   763,   767,   769,   773,   777,   779,   782,   784,
     786,   788,   790,   794,   798,   800,   802,   804,   806,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   830,
     831,   832,   836,   838,   840,   842,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   863,   869,   870,   873,
     874,   878,   879,   882,   885,   888,   891,   892,   899,   902,
     903,   906,   908,   910,   914,   915,   916,   917,   925,   926,
     929,   932,   934,   936,   937,   938,   947,   948,   955,   957,
     960,   962,   965,   966,   967,   974,   975,   976,   983,   984,
     987,   988,   994,   995,   997,   998,  1004,  1005,  1008,  1009,
    1015,  1020,  1021,  1022,  1031,  1032,  1033,  1042,  1044,  1046,
    1048,  1050,  1052,  1055,  1060,  1066,  1067,  1072,  1077,  1082,
    1086,  1090,  1093,  1096,  1097,  1100,  1102,  1105,  1109,  1111,
    1113,  1115,  1116,  1118,  1120,  1123,  1127,  1129,  1131,  1133,
    1135,  1137,  1139,  1141,  1143,  1144,  1146,  1148,  1151,  1155,
    1157,  1159,  1161,  1163,  1165,  1166,  1168,  1170,  1173,  1177,
    1179,  1181,  1183,  1185,  1187,  1189,  1191,  1192,  1194,  1196,
    1199,  1203,  1205,  1207,  1209,  1212,  1215,  1218,  1220,  1222,
    1224,  1226,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,
    1261,  1266,  1268,  1270,  1272,  1274,  1277,  1281,  1284,  1289,
    1295,  1296,  1302,  1303,  1304,  1310,  1311,  1319,  1321,  1322,
    1324,  1325,  1330,  1331,  1332,  1336,  1342,  1349,  1350,  1355,
    1358,  1361,  1364,  1367,  1368,  1370,  1371,  1375,  1376,  1378,
    1380,  1384,  1386,  1391,  1397,  1403,  1404,  1407,  1408,  1409,
    1417,  1418,  1429,  1431,  1435,  1437,  1439,  1440,  1443,  1444,
    1448,  1450,  1454,  1455,  1462,  1464,  1465,  1466,  1472,  1473,
    1478,  1480,  1482,  1484,  1488,  1490,  1494,  1495,  1496,  1502,
    1504,  1508,  1510,  1512,  1513,  1517,  1519,  1523,  1524,  1529,
    1531,  1532,  1534,  1537,  1539,  1543,  1548,  1552,  1556,  1560,
    1565,  1570,  1574,  1575,  1576,  1583,  1584,  1586,  1587,  1589,
    1591,  1594,  1596,  1598,  1599,  1601,  1603,  1606,  1608,  1609,
    1613,  1614,  1616,  1618,  1621,  1623,  1626,  1630,  1634,  1638,
    1642,  1646,  1650,  1654,  1658,  1662,  1666,  1670,  1674,  1678,
    1682,  1686,  1690,  1694,  1698,  1702,  1706,  1707,  1714,  1716,
    1718,  1722,  1727,  1732,  1735,  1738,  1741,  1745,  1749,  1754,
    1759,  1761,  1763,  1765,  1767,  1769,  1771,  1773,  1775,  1777,
    1779,  1781,  1783,  1786,  1788,  1790,  1792,  1794,  1796,  1798,
    1802,  1804,  1806,  1809,  1812,  1820,  1829,  1838,  1847,  1856,
    1859,  1860,  1862,  1867,  1868,  1870,  1873,  1874,  1879,  1883,
    1887,  1891,  1893,  1896,  1898,  1900,  1904,  1907,  1911,  1914,
    1917,  1919,  1923,  1927,  1930,  1934,  1936,  1939,  1942,  1945,
    1947,  1950,  1952,  1954,  1956,  1959,  1963,  1966,  1970,  1973,
    1976,  1980,  1984,  1988,  1989,  1996,  1997,  2004,  2007,  2009,
    2011,  2013,  2015,  2017,  2019,  2021,  2023,  2025,  2027,  2029,
    2032,  2035,  2037,  2040,  2042,  2045,  2049,  2052,  2054,  2056,
    2058,  2060,  2062,  2064,  2066,  2069,  2070,  2072,  2074,  2080,
    2081,  2085,  2086,  2089,  2093,  2094,  2096,  2099,  2101,  2103,
    2105,  2107,  2111,  2115,  2119,  2123,  2124,  2126,  2127,  2129,
    2130,  2132,  2135,  2137,  2139,  2142,  2145,  2149,  2151,  2155,
    2158,  2160,  2163,  2166,  2169,  2172,  2175,  2178,  2181,  2184,
    2187,  2190,  2193,  2195,  2197,  2200,  2202,  2204,  2206,  2208,
    2210,  2211,  2214,  2216,  2218,  2220,  2222,  2224,  2225,  2228,
    2230,  2232,  2233,  2235,  2237,  2240,  2243,  2245,  2248,  2251,
    2252,  2254,  2256,  2258,  2262,  2264,  2268,  2269,  2271,  2272,
    2277,  2279,  2281,  2283,  2284,  2286,  2289,  2291,  2293,  2296,
    2298,  2302,  2306,  2308,  2310,  2311,  2314,  2315,  2317,  2323,
    2324,  2328,  2332,  2334,  2335,  2338,  2341,  2344,  2345,  2349,
    2353,  2360,  2367,  2369,  2371,  2374,  2377,  2380,  2382,  2385,
    2388,  2390,  2392,  2393,  2395,  2397,  2399,  2401,  2402,  2404,
    2406,  2408,  2409,  2411,  2414,  2415,  2417,  2418,  2420,  2421,
    2423,  2425,  2428,  2430,  2433,  2435,  2438,  2441,  2444,  2448,
    2451,  2453,  2455,  2457,  2459,  2463,  2465,  2467,  2469,  2474,
    2477,  2479,  2484,  2485,  2487,  2488,  2491,  2493,  2497,  2498,
    2505,  2506,  2512,  2520,  2521,  2527,  2528,  2534,  2535,  2541,
    2542,  2547,  2548,  2559,  2563,  2568,  2572,  2576,  2584,  2589,
    2593,  2599,  2600,  2604,  2606,  2611,  2612,  2616,  2617,  2620,
    2621,  2623,  2624,  2627,  2630,  2633,  2636,  2638,  2640,  2642,
    2646,  2651,  2652,  2659,  2664,  2665,  2671,  2672,  2679,  2684,
    2688,  2690,  2698,  2702,  2704,  2706,  2707,  2713,  2714,  2718,
    2721,  2722,  2728,  2729,  2730,  2737,  2739,  2743,  2745,  2747,
    2751,  2754,  2758,  2761,  2766,  2767,  2774,  2775,  2776,  2785,
    2790,  2795,  2799,  2803,  2806,  2809,  2816,  2822,  2826,  2832,
    2834,  2836,  2838,  2840,  2842,  2843,  2845,  2847,  2850,  2853,
    2857,  2861,  2865,  2869,  2870,  2872,  2873,  2875,  2876,  2878,
    2880,  2881,  2884,  2886,  2887,  2889,  2891,  2893,  2894,  2901,
    2905,  2909,  2910,  2912,  2914,  2918,  2922,  2925,  2928,  2933,
    2934,  2938,  2939,  2943,  2944,  2948,  2949,  2953,  2954,  2956,
    2958,  2962,  2964,  2966,  2967,  2970,  2972,  2976,  2980,  2984,
    2986,  2987,  2993,  2994,  2996,  2998,  2999,  3006,  3007,  3009,
    3011,  3014,  3016,  3018,  3020,  3021,  3027,  3030,  3031,  3037,
    3038,  3040,  3042,  3045,  3047,  3049,  3051,  3053,  3055,  3058,
    3059,  3065,  3066,  3068,  3070,  3071,  3076,  3081,  3085,  3091,
    3093,  3097,  3101,  3102,  3109,  3111,  3113,  3115,  3119,  3122,
    3126,  3128,  3130,  3131,  3138,  3140,  3142,  3144,  3148,  3152,
    3157,  3158,  3165,  3166,  3169,  3170,  3175,  3176,  3179,  3181,
    3184,  3189,  3192,  3196,  3199,  3203,  3204,  3208,  3209,  3210,
    3217,  3220,  3222,  3224,  3227,  3230,  3239,  3244,  3245,  3247,
    3250,  3252,  3254,  3256,  3258,  3259,  3262,  3267,  3271,  3273,
    3275,  3279,  3284,  3285,  3286,  3287,  3290,  3293,  3295,  3297,
    3298,  3301,  3305,  3309,  3313,  3316,  3320,  3325,  3329,  3334,
    3338,  3343,  3345,  3349,  3354,  3358,  3362,  3369,  3371,  3377,
    3384,  3390,  3398,  3405,  3414,  3420,  3427,  3432,  3437,  3443,
    3447,  3452,  3454,  3458,  3462,  3466,  3470,  3474,  3478,  3484,
    3490,  3494,  3498,  3502,  3506,  3510,  3514,  3516,  3518,  3520,
    3522,  3524,  3526,  3528,  3530,  3532,  3534,  3536,  3538,  3540,
    3542,  3544,  3546,  3548,  3550,  3552,  3554,  3556,  3558,  3562,
    3564,  3566,  3568,  3570,  3574,  3577,  3580,  3583,  3586,  3590,
    3594,  3600,  3607,  3612,  3617,  3625,  3628,  3635,  3641,  3648,
    3655,  3660,  3665,  3671,  3676,  3683,  3686,  3691,  3696,  3701,
    3712,  3719,  3728,  3735,  3740,  3745,  3752,  3757,  3762,  3767,
    3774,  3779,  3787,  3795,  3803,  3810,  3817,  3824,  3831,  3835,
    3840,  3847,  3856,  3859,  3862,  3871,  3880,  3887,  3894,  3896,
    3903,  3910,  3919,  3928,  3935,  3944,  3951,  3954,  3963,  3972,
    3975,  3978,  3981,  3986,  3991,  3996,  4001,  4005,  4014,  4021,
    4030,  4035,  4042,  4047,  4052,  4057,  4064,  4073,  4078,  4082,
    4089,  4094,  4101,  4107,  4116,  4124,  4135,  4137,  4144,  4149,
    4154,  4159,  4164,  4169,  4176,  4181,  4182,  4188,  4195,  4198,
    4202,  4203,  4208,  4209,  4213,  4214,  4216,  4218,  4222,  4227,
    4232,  4238,  4243,  4248,  4253,  4259,  4264,  4265,  4266,  4274,
    4279,  4285,  4290,  4296,  4301,  4306,  4311,  4316,  4321,  4327,
    4328,  4337,  4338,  4342,  4346,  4348,  4353,  4354,  4356,  4357,
    4360,  4361,  4362,  4367,  4372,  4375,  4376,  4380,  4383,  4387,
    4390,  4392,  4395,  4397,  4400,  4402,  4405,  4408,  4411,  4412,
    4414,  4416,  4420,  4422,  4426,  4428,  4432,  4433,  4435,  4436,
    4439,  4444,  4450,  4452,  4454,  4456,  4458,  4463,  4465,  4469,
    4473,  4477,  4478,  4485,  4486,  4493,  4494,  4503,  4508,  4509,
    4518,  4519,  4530,  4537,  4538,  4547,  4548,  4559,  4566,  4568,
    4571,  4574,  4575,  4577,  4583,  4584,  4590,  4594,  4600,  4603,
    4604,  4605,  4613,  4615,  4616,  4617,  4624,  4625,  4629,  4630,
    4631,  4637,  4638,  4640,  4641,  4643,  4644,  4647,  4651,  4655,
    4657,  4659,  4660,  4668,  4669,  4677,  4679,  4682,  4683,  4684,
    4687,  4688,  4691,  4692,  4694,  4696,  4698,  4700,  4704,  4706,
    4710,  4712,  4714,  4716,  4718,  4720,  4722,  4724,  4726,  4728,
    4730,  4732,  4734,  4736,  4738,  4740,  4742,  4744,  4746,  4748,
    4750,  4752,  4754,  4756,  4758,  4760,  4761,  4763,  4765,  4766,
    4769,  4770,  4772,  4773,  4774,  4778,  4779,  4780,  4784,  4787,
    4788,  4789,  4794,  4799,  4802,  4803,  4805,  4807,  4811,  4815,
    4817,  4820,  4821,  4823,  4824,  4829,  4834,  4837,  4838,  4840,
    4842,  4843,  4845,  4846,  4848,  4851,  4853,  4857,  4861,  4863,
    4865,  4867,  4869,  4871,  4872,  4875,  4877,  4879,  4881,  4883,
    4885,  4887,  4889,  4891,  4893,  4895,  4897,  4899,  4901,  4903,
    4905,  4907,  4909,  4911,  4913,  4915,  4917,  4919,  4921,  4922,
    4923,  4930,  4931,  4933,  4937,  4939,  4940,  4943,  4947,  4949,
    4952,  4954,  4955,  4959,  4960,  4961,  4969,  4972,  4974,  4975,
    4979,  4980,  4988,  4989,  4990,  4999,  5004,  5011,  5016,  5021,
    5026,  5027,  5034,  5039,  5044,  5049,  5055,  5060,  5062,  5066,
    5068,  5071,  5073,  5077,  5079,  5080,  5083,  5084,  5086,  5087,
    5089,  5091,  5094,  5098,  5100,  5102,  5103,  5104,  5113,  5114,
    5115,  5122,  5123,  5125,  5127,  5129,  5131,  5133,  5136,  5138,
    5140,  5142,  5146,  5151,  5152,  5156,  5160,  5162,  5165,  5168,
    5169,  5173,  5174,  5180,  5184,  5186,  5190,  5192,  5196,  5198,
    5200,  5201,  5203,  5204,  5209,  5210,  5212,  5216,  5218,  5220,
    5222,  5223,  5224,  5231,  5232,  5233,  5245,  5249,  5251,  5255,
    5259,  5261,  5265,  5266,  5268,  5269,  5274,  5275,  5283,  5284,
    5290,  5291,  5298,  5300,  5304,  5307,  5312,  5313,  5316,  5317,
    5320,  5322,  5324,  5326,  5327,  5332,  5333,  5335,  5336,  5338,
    5340,  5344,  5346,  5348,  5351,  5354,  5357,  5359,  5361,  5363,
    5365,  5366,  5370,  5371,  5375,  5378,  5383,  5388,  5392,  5397,
    5402,  5404,  5408,  5412,  5419,  5422,  5425,  5426,  5433,  5434,
    5441,  5447,  5450,  5452,  5458,  5464,  5467,  5470,  5472,  5477,
    5481,  5484,  5488,  5491,  5494,  5496,  5500,  5505,  5509,  5513,
    5516,  5519,  5523,  5527,  5531,  5535,  5539,  5543,  5547,  5551,
    5553,  5555,  5557,  5559,  5561,  5562,  5564,  5565,  5568,  5569,
    5571,  5573,  5575,  5576,  5579,  5580,  5583,  5584,  5587,  5590,
    5591,  5596,  5597,  5602,  5604,  5606,  5608,  5610,  5612,  5614,
    5616,  5617,  5619,  5621,  5625,  5626,  5628,  5630,  5631,  5636,
    5637,  5638,  5644,  5646,  5647,  5651,  5652,  5656,  5660,  5662,
    5665,  5668,  5671,  5674,  5677,  5680,  5683,  5685,  5687,  5689,
    5691,  5693,  5695,  5696,  5698,  5699,  5703,  5707,  5709,  5710,
    5714,  5716,  5719,  5720,  5722,  5723,  5727,  5731,  5734,  5737,
    5741,  5742,  5744,  5746,  5749,  5750,  5751,  5752,  5753,  5776,
    5778,  5780,  5781,  5783,  5784,  5786,  5788,  5789,  5791,  5793,
    5794,  5797,  5800,  5802,  5806,  5811,  5815,  5819,  5820,  5823,
    5826,  5828,  5832,  5836,  5837,  5842,  5843,  5847,  5849,  5851,
    5852,  5856,  5859,  5863,  5865,  5867,  5870,  5871,  5874,  5878,
    5880,  5886,  5888,  5890,  5893,  5896,  5898,  5900,  5902,  5904,
    5906,  5909,  5912,  5914,  5916,  5918,  5920,  5922,  5924,  5926,
    5928,  5931,  5934,  5936,  5938,  5940,  5942,  5944,  5947,  5950,
    5953,  5955,  5957,  5961,  5967,  5969,  5971,  5973,  5975,  5977,
    5981,  5986,  5992,  5994,  6000,  6004,  6007,  6009,  6013,  6016,
    6019,  6024,  6026,  6028,  6030,  6032,  6034,  6036,  6038,  6040,
    6042,  6044,  6046,  6048,  6050,  6052,  6054,  6058,  6061,  6063,
    6065,  6067,  6069,  6071,  6073,  6075,  6077,  6079,  6081,  6083,
    6085,  6087,  6089,  6091,  6093,  6095,  6097,  6099,  6101,  6103,
    6105,  6107,  6109,  6111,  6113,  6115,  6117,  6119,  6121,  6123,
    6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,  6141,  6143,
    6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,  6161,  6163,
    6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,  6181,  6183,
    6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,  6201,  6203,
    6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,  6221,  6223,
    6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,  6241,  6243,
    6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,  6261,  6263,
    6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,  6281,  6283,
    6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,
    6305,  6307,  6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,
    6325,  6327,  6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,
    6345,  6347,  6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,
    6365,  6367,  6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,
    6385,  6387,  6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,
    6405,  6407,  6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,
    6425,  6427,  6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,
    6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,
    6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,
    6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,
    6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,
    6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,
    6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,  6561,  6563,
    6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,  6581,  6583,
    6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,  6601,  6603,
    6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,  6621,  6623,
    6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,  6641,  6643,
    6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,
    6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,  6681,  6683,
    6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,  6701,  6703,
    6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,  6721,  6723,
    6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,  6741,  6743,
    6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,  6761,  6763,
    6764,  6768,  6769,  6773,  6774,  6778,  6779,  6783,  6784,  6788,
    6791,  6792,  6795,  6796,  6799,  6800,  6805,  6806,  6810,  6812,
    6814,  6816,  6818,  6819,  6821,  6823,  6825,  6826,  6829,  6832,
    6835,  6839,  6840,  6845,  6850,  6857,  6860,  6864,  6868,  6872,
    6878,  6880,  6884,  6888,  6890,  6892,  6896,  6900,  6902,  6906,
    6909,  6912,  6915,  6918,  6921,  6923,  6925,  6930,  6935,  6937,
    6939,  6941,  6943,  6945,  6946,  6951,  6953,  6955,  6957,  6961,
    6965,  6967,  6969,  6972,  6975,  6976,  6980,  6985,  6989,  6990,
    6998,  7000,  7003,  7005,  7007,  7009,  7011,  7013,  7015,  7016,
    7022,  7024,  7026,  7028,  7030,  7032,  7033,  7038,  7045,  7052,
    7059,  7067,  7073,  7074,  7079,  7088,  7097,  7106,  7113,  7114,
    7116,  7118,  7121,  7122,  7124,  7126,  7130,  7131,  7135,  7136,
    7140,  7141,  7145,  7146,  7150,  7152,  7154,  7156,  7158,  7160,
    7162,  7164,  7166,  7168,  7170,  7172,  7175,  7178,  7180,  7184,
    7187,  7190,  7193,  7196,  7199,  7202,  7205,  7208,  7210,  7212,
    7215,  7216,  7218,  7222,  7224,  7227,  7230,  7233,  7235,  7239,
    7243,  7245,  7247,  7251,  7253,  7257,  7262,  7268,  7273,  7280,
    7282,  7283,  7287,  7291,  7293,  7295,  7296,  7299,  7302,  7305,
    7308,  7309,  7312,  7313,  7317,  7320,  7322,  7325,  7328,  7331,
    7334,  7337,  7338,  7342,  7343,  7345,  7346,  7350,  7353,  7354,
    7356,  7359,  7360,  7362,  7367,  7372,  7378,  7381,  7385,  7386,
    7388,  7389,  7394,  7395,  7397,  7399,  7400,  7402,  7403,  7406,
    7409,  7411,  7412,  7414,  7416,  7419,  7423,  7426,  7427,  7434,
    7438,  7439,  7440,  7441,  7443,  7446,  7448,  7450,  7452,  7454,
    7456,  7458,  7460,  7462,  7464,  7466,  7469,  7472,  7476,  7478,
    7480,  7482,  7484,  7486,  7488,  7490,  7492,  7494,  7496,  7498,
    7500,  7502,  7503,  7507,  7509,  7512,  7514,  7517,  7521,  7525,
    7529,  7530,  7534,  7538,  7539,  7547,  7548,  7552,  7554,  7558,
    7559,  7563,  7564,  7568,  7573,  7575,  7579,  7580,  7584,  7585,
    7589,  7594,  7599,  7600,  7601,  7602,  7619,  7628,  7636,  7637,
    7638,  7639,  7640,  7641,  7657,  7658,  7659,  7660,  7661,  7674,
    7679,  7684,  7688,  7693,  7697,  7700,  7702,  7706,  7712,  7714,
    7716,  7717,  7719,  7721,  7722,  7725,  7726,  7727,  7731,  7732,
    7735,  7741
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     642,     0,    -1,   151,    -1,    -1,   645,   643,   637,   644,
      -1,   645,   151,    -1,    -1,   151,    -1,   646,    -1,  1517,
      -1,  1017,    -1,  1083,    -1,  1085,    -1,   698,    -1,   658,
      -1,  1086,    -1,  1075,    -1,  1523,    -1,   665,    -1,   647,
      -1,  1330,    -1,  1362,    -1,  1277,    -1,  1279,    -1,   651,
      -1,  1369,    -1,   733,    -1,  1490,    -1,  1480,    -1,   656,
      -1,  1294,    -1,  1591,    -1,  1389,    -1,  1392,    -1,  1472,
      -1,  1091,    -1,  1099,    -1,   852,    -1,  1106,    -1,   649,
      -1,  1385,    -1,  1526,    -1,  1094,    -1,  1078,    -1,  1297,
      -1,  1379,    -1,   732,    -1,  1487,    -1,  1524,    -1,  1525,
      -1,  1118,    -1,  1444,    -1,   725,    -1,  1348,    -1,  1059,
      -1,  1061,    -1,  1341,    -1,  1592,    -1,  1478,    -1,  1322,
      -1,  1391,    -1,  1583,    -1,   648,   398,  1438,    -1,   116,
      -1,   139,    -1,   398,  1438,   189,   650,    -1,  1435,    -1,
     638,  1440,    -1,    -1,   165,  1438,   652,   653,    -1,    -1,
     589,   654,    -1,   654,   633,   655,    -1,   655,    -1,   638,
    1440,    -1,    -1,   208,   657,  1440,    -1,    -1,    56,   302,
     557,   659,   660,    -1,   661,    -1,   660,   633,   661,    -1,
     286,   155,  1434,    -1,   283,   155,  1434,    -1,   303,   155,
    1434,    -1,   289,   155,  1434,    -1,   290,   155,  1258,    -1,
     284,   155,  1258,    -1,   291,   155,  1258,    -1,   285,   155,
    1258,    -1,   300,   155,  1258,    -1,   294,   155,  1434,    -1,
     293,   155,  1434,    -1,   295,   155,  1434,    -1,   296,   155,
    1434,    -1,   299,   155,  1434,    -1,   301,   155,  1258,    -1,
     297,   155,  1434,    -1,   298,   155,  1434,    -1,   304,   155,
    1421,    -1,   222,   155,   631,   662,   632,    -1,   282,   155,
    1258,    -1,   664,    -1,    -1,   663,    -1,   662,   633,   663,
      -1,  1258,    -1,   287,   155,  1434,    -1,   288,   155,  1260,
      -1,   428,   155,  1434,    -1,   429,   155,  1258,    -1,    -1,
      94,   904,   540,   907,  1430,   666,   841,    -1,    -1,    -1,
      94,   995,   225,  1438,   999,   364,  1430,   667,   631,  1012,
     632,  1000,   668,  1051,    -1,    -1,    -1,    94,   996,   225,
    1438,   998,   364,  1430,   669,   631,  1012,   632,  1001,   670,
    1051,    -1,    -1,    -1,    94,   997,   225,  1438,   998,   364,
    1430,   671,   631,  1012,   632,  1002,   672,  1051,    -1,    -1,
      94,   103,   907,  1438,   673,   901,    -1,    -1,    94,   674,
    1545,    -1,    94,   586,   691,  1507,    -1,    94,   273,   202,
     805,    -1,    94,   538,   802,    -1,    94,   675,    -1,   475,
    1440,   185,   106,   613,  1440,   369,   631,   676,   632,    -1,
     677,    -1,   676,   633,   677,    -1,   586,  1435,    -1,   211,
    1435,    -1,   103,  1435,    -1,   379,  1435,    -1,   388,  1435,
      -1,   491,  1435,    -1,   395,  1258,    -1,    -1,  1135,   162,
     907,   692,   679,   364,   464,   680,   685,   682,   687,   138,
     688,    -1,    -1,   163,  1139,  1230,   681,   683,   684,    -1,
      23,  1139,    -1,    -1,   147,    -1,   132,   364,   487,    -1,
     132,    -1,    -1,   513,  1139,    -1,    -1,   150,  1139,    -1,
      -1,   686,    -1,   364,    78,   399,    -1,   364,    78,   352,
     399,    -1,    -1,    74,  1435,    -1,    -1,   689,   690,    -1,
     750,    -1,   752,    -1,   748,    -1,   769,    -1,   787,    -1,
     789,    -1,   784,    -1,   754,    -1,   756,    -1,   757,    -1,
     758,    -1,   759,    -1,   761,    -1,    -1,  1438,   639,  1438,
      -1,  1438,    -1,    -1,   693,   695,    -1,    -1,   694,   696,
      -1,    74,  1435,    -1,   252,   509,    -1,   354,   509,    -1,
      88,   509,    -1,   414,   509,   106,    -1,   329,   509,   106,
      -1,   697,    -1,   695,    -1,   129,    -1,  1145,   129,    -1,
     509,   468,   122,    -1,   509,   468,   237,    -1,    -1,    49,
     692,   699,   700,    -1,    -1,   631,   701,   632,    -1,    -1,
     702,    -1,   702,   633,  1139,    -1,  1139,    -1,    -1,   704,
      -1,   704,   633,   706,    -1,   706,    -1,    -1,  1438,   705,
     955,    -1,    -1,   708,    -1,   708,   633,   709,    -1,   709,
      -1,   710,   705,  1438,   955,    -1,    -1,   238,    -1,   378,
      -1,   229,    -1,    -1,   711,   747,   637,    -1,   747,   637,
      -1,   712,   747,   637,    -1,    -1,   713,   714,   637,    -1,
      -1,   119,   744,   715,   955,   745,    -1,   119,  1438,    81,
     186,   721,    -1,    -1,   119,   718,   205,   186,   716,   719,
     747,    -1,    -1,   119,  1438,   100,   186,   717,  1118,    -1,
     167,    -1,    90,    -1,   720,    -1,   719,   633,   720,    -1,
     724,    -1,  1258,    -1,   722,    -1,   498,   723,  1436,    -1,
      -1,   594,    -1,   721,    -1,  1438,    -1,   499,    -1,  1145,
     188,    -1,   497,    -1,   484,   726,   728,    -1,  1438,    -1,
     722,    -1,    -1,   726,    -1,    -1,   477,   729,    -1,   731,
     155,   730,    -1,   729,   633,   731,   155,   730,    -1,  1420,
      -1,  1166,    -1,  1426,    -1,    63,    -1,   525,    -1,    85,
      -1,    87,    -1,    86,    -1,    54,    -1,   465,    -1,   542,
      -1,    73,    -1,   101,    -1,   320,    -1,   337,    -1,   443,
     727,   728,    -1,   198,   734,   130,   735,    -1,    -1,    98,
      -1,   736,    -1,    81,   740,   741,    -1,   737,    -1,   736,
     633,   737,    -1,   738,   155,   739,    -1,  1438,    -1,   638,
    1440,    -1,   359,    -1,   461,    -1,   730,    -1,   742,    -1,
     741,   633,   742,    -1,   738,   155,   743,    -1,    63,    -1,
     525,    -1,    85,    -1,    87,    -1,    86,    -1,    54,    -1,
     465,    -1,   542,    -1,    73,    -1,   101,    -1,   320,    -1,
     337,    -1,   448,    -1,  1438,    -1,   744,   633,  1438,    -1,
      -1,    -1,   120,   746,  1139,    -1,   750,    -1,   752,    -1,
     748,    -1,   769,    -1,   787,    -1,   789,    -1,   784,    -1,
     754,    -1,   756,    -1,   757,    -1,   758,    -1,   759,    -1,
     761,    -1,    -1,   220,   749,   764,   149,   220,    -1,    -1,
     751,   646,    -1,    -1,   450,   753,  1139,    -1,    -1,   755,
     793,    -1,   257,  1439,    -1,   246,  1439,    -1,   367,  1438,
      -1,    -1,   177,   762,  1438,   235,   760,   763,    -1,    65,
    1438,    -1,    -1,   348,   189,    -1,   189,    -1,  1438,    -1,
     763,   633,  1438,    -1,    -1,    -1,    -1,   765,  1139,   766,
     549,   712,   767,   768,    -1,    -1,   146,   764,    -1,   145,
     712,    -1,   770,    -1,   773,    -1,    -1,    -1,    52,   771,
    1139,   772,   775,   783,   149,    52,    -1,    -1,    52,   774,
     776,   783,   149,    52,    -1,   777,    -1,   775,   777,    -1,
     780,    -1,   776,   780,    -1,    -1,    -1,   606,   778,  1139,
     779,   549,   712,    -1,    -1,    -1,   606,   781,  1139,   782,
     549,   712,    -1,    -1,   145,   712,    -1,    -1,  1439,   640,
     785,   793,   786,    -1,    -1,  1439,    -1,    -1,  1439,   640,
     788,   791,   786,    -1,    -1,   790,   791,    -1,    -1,    30,
     792,   713,   711,   149,    -1,   279,   712,   149,   279,    -1,
      -1,    -1,   608,   794,  1139,   795,   138,   712,   149,   608,
      -1,    -1,    -1,   438,   712,   582,   796,  1139,   797,   149,
     438,    -1,    29,    -1,     8,    -1,   231,    -1,   583,    -1,
     125,    -1,   827,   829,    -1,   827,    56,   824,   808,    -1,
     827,     6,   824,   803,   812,    -1,    -1,   588,   273,   202,
    1438,    -1,   827,     6,   824,   815,    -1,   827,   139,   824,
     815,    -1,   828,   807,   818,    -1,   828,   807,   821,    -1,
       6,   825,    -1,     6,   826,    -1,    -1,   809,   810,    -1,
     811,    -1,   810,   811,    -1,   810,   633,   811,    -1,   830,
      -1,   831,    -1,   832,    -1,    -1,   813,    -1,   814,    -1,
     813,   814,    -1,   813,   633,   814,    -1,   830,    -1,   831,
      -1,   832,    -1,   833,    -1,   836,    -1,   838,    -1,   839,
      -1,   837,    -1,    -1,   816,    -1,   817,    -1,   816,   817,
      -1,   816,   633,   817,    -1,   830,    -1,   831,    -1,   832,
      -1,   838,    -1,   839,    -1,    -1,   819,    -1,   820,    -1,
     819,   820,    -1,   819,   633,   820,    -1,   830,    -1,   834,
      -1,   835,    -1,   836,    -1,   838,    -1,   839,    -1,   837,
      -1,    -1,   822,    -1,   823,    -1,   822,   823,    -1,   822,
     633,   823,    -1,   830,    -1,   838,    -1,   839,    -1,   105,
    1435,    -1,   572,  1435,    -1,   421,  1435,    -1,  1438,    -1,
    1438,    -1,   415,    -1,   417,    -1,   352,     4,    -1,   227,
    1314,   840,    -1,    24,  1314,   840,    -1,   309,  1314,   840,
      -1,   172,  1314,   840,    -1,   573,  1314,   840,    -1,   422,
    1314,   840,    -1,   349,  1314,  1259,    -1,    74,  1314,  1435,
      -1,  1355,   153,  1314,   915,    -1,   602,    -1,   355,    -1,
    1261,    -1,  1433,    -1,   631,   842,    -1,   908,   847,   844,
      -1,   262,  1430,    -1,   631,   262,  1430,   632,    -1,   921,
     632,   908,   847,   844,    -1,    -1,   847,   897,   632,   843,
    1530,    -1,    -1,    -1,  1400,   900,   897,   845,  1527,    -1,
      -1,  1400,   900,   631,   897,   632,   846,  1530,    -1,   848,
      -1,    -1,   849,    -1,    -1,   385,   851,   850,   854,    -1,
      -1,    -1,   385,   853,   854,    -1,    46,   855,   865,   866,
     873,    -1,   857,   250,   858,   631,   859,   632,    -1,    -1,
     857,   206,   856,   863,    -1,   413,   863,    -1,   413,   862,
      -1,   267,   863,    -1,   267,   862,    -1,    -1,   264,    -1,
      -1,    11,   155,  1259,    -1,    -1,   860,    -1,   861,    -1,
     860,   633,   861,    -1,  1438,    -1,    70,   631,   859,   632,
      -1,   631,  1135,   871,  1136,   632,    -1,   631,  1135,   871,
    1136,   632,    -1,    -1,   386,  1259,    -1,    -1,    -1,   529,
      46,   857,   206,   864,   867,   872,    -1,    -1,   529,    46,
     857,   250,   858,   631,   869,   632,   868,   872,    -1,   870,
      -1,   869,   633,   870,    -1,  1438,    -1,  1142,    -1,    -1,
     528,  1259,    -1,    -1,   631,   874,   632,    -1,   875,    -1,
     874,   633,   875,    -1,    -1,   385,   876,   877,   878,   894,
     889,    -1,  1438,    -1,    -1,    -1,   593,   259,   548,   879,
     881,    -1,    -1,   593,   238,   880,   882,    -1,   313,    -1,
     884,    -1,   884,    -1,   631,   883,   632,    -1,   884,    -1,
     883,   633,   884,    -1,    -1,    -1,   631,   885,   887,   886,
     632,    -1,   888,    -1,   887,   633,   888,    -1,   313,    -1,
    1142,    -1,    -1,   631,   890,   632,    -1,   891,    -1,   890,
     633,   891,    -1,    -1,   529,   892,   893,   894,    -1,  1440,
      -1,    -1,   895,    -1,   895,   896,    -1,   896,    -1,   538,
    1314,  1440,    -1,  1355,   153,  1314,   915,    -1,   349,  1314,
    1259,    -1,   308,  1314,  1261,    -1,   326,  1314,  1261,    -1,
     106,   131,  1314,  1435,    -1,   225,   131,  1314,  1435,    -1,
      74,  1314,  1435,    -1,    -1,    -1,   469,   898,  1129,  1133,
     899,   919,    -1,    -1,    19,    -1,    -1,   902,    -1,   903,
      -1,   902,   903,    -1,   914,    -1,   913,    -1,    -1,   905,
      -1,   906,    -1,   906,   905,    -1,   543,    -1,    -1,   220,
    1145,   166,    -1,    -1,   910,    -1,   911,    -1,   911,   909,
      -1,   911,    -1,   911,   910,    -1,   911,   633,   910,    -1,
     153,  1314,   915,    -1,   308,  1314,  1260,    -1,   326,  1314,
    1260,    -1,    26,  1314,  1258,    -1,   388,  1314,  1435,    -1,
      74,  1314,  1435,    -1,    25,  1314,  1260,    -1,   380,  1314,
    1258,    -1,   380,  1314,   120,    -1,   515,  1314,  1258,    -1,
     515,  1314,   120,    -1,   516,  1314,  1258,    -1,   516,  1314,
     120,    -1,   517,  1314,  1258,    -1,   517,  1314,   120,    -1,
      60,  1314,  1258,    -1,   541,  1314,  1258,    -1,   124,  1314,
    1258,    -1,   459,  1314,   917,    -1,    -1,   577,  1314,   912,
     631,  1378,   632,    -1,   913,    -1,   914,    -1,   232,  1314,
     918,    -1,   106,   131,  1314,  1435,    -1,   225,   131,  1314,
    1435,    -1,   538,  1438,    -1,   522,   134,    -1,   522,   318,
      -1,    82,  1314,  1435,    -1,   249,  1314,  1258,    -1,   967,
     958,  1314,   960,    -1,   967,    68,  1314,   966,    -1,  1440,
      -1,  1440,    -1,   120,    -1,   180,    -1,   143,    -1,    79,
      -1,   423,    -1,    77,    -1,   354,    -1,   179,    -1,   253,
      -1,  1253,    -1,  1128,  1132,    -1,   524,    -1,   418,    -1,
     118,    -1,   236,    -1,   922,    -1,   923,    -1,   922,   633,
     923,    -1,   924,    -1,   925,    -1,   930,   926,    -1,   930,
     984,    -1,   990,  1014,   999,   631,  1012,   632,  1000,    -1,
     996,   993,  1014,   998,   631,  1012,   632,  1001,    -1,   997,
     993,  1014,   998,   631,  1012,   632,  1002,    -1,   928,   991,
    1014,   999,   631,  1012,   632,  1000,    -1,   928,   185,   250,
    1014,   631,  1012,   632,   984,    -1,   928,   927,    -1,    -1,
     927,    -1,    61,   631,  1139,   632,    -1,    -1,   929,    -1,
      84,  1014,    -1,    -1,  1429,   931,   932,   952,    -1,   940,
     950,   946,    -1,   941,   951,   946,    -1,   182,   942,   946,
      -1,    38,    -1,    38,   949,    -1,    43,    -1,    42,    -1,
     936,   949,   970,    -1,   936,   970,    -1,   937,   949,   971,
      -1,   937,   971,    -1,    33,   949,    -1,    33,    -1,   938,
     949,   970,    -1,   939,   949,   971,    -1,   595,   949,    -1,
     620,   950,   946,    -1,   110,    -1,   553,   944,    -1,   550,
     944,    -1,   107,   944,    -1,   554,    -1,    40,   950,    -1,
     935,    -1,   314,    -1,   275,    -1,   278,   595,    -1,   278,
     938,   970,    -1,   556,   970,    -1,   547,   950,   970,    -1,
     316,   970,    -1,   276,   970,    -1,   118,   942,   946,    -1,
     360,   942,   946,    -1,   180,   942,   946,    -1,    -1,   154,
     933,   631,  1016,   632,   970,    -1,    -1,   477,   934,   631,
    1016,   632,   970,    -1,   278,   970,    -1,   473,    -1,   196,
      -1,   195,    -1,   393,    -1,   334,    -1,   266,    -1,   333,
      -1,   394,    -1,   335,    -1,    59,    -1,   343,    -1,   340,
      59,    -1,   936,   599,    -1,   596,    -1,   340,   596,    -1,
     361,    -1,   343,   596,    -1,   340,    59,   599,    -1,   343,
     599,    -1,   236,    -1,   555,    -1,   489,    -1,   315,    -1,
      32,    -1,   418,    -1,   137,    -1,   137,   397,    -1,    -1,
     949,    -1,   943,    -1,   631,   358,   633,   358,   632,    -1,
      -1,   631,   358,   632,    -1,    -1,   631,   632,    -1,   631,
     358,   632,    -1,    -1,   947,    -1,   947,   948,    -1,   948,
      -1,   485,    -1,   581,    -1,   621,    -1,   631,   277,   632,
      -1,   631,   568,   632,    -1,   631,   117,   632,    -1,   631,
     358,   632,    -1,    -1,   949,    -1,    -1,   943,    -1,    -1,
     953,    -1,   953,   954,    -1,   954,    -1,   357,    -1,  1145,
     357,    -1,   120,   957,    -1,   364,   583,   956,    -1,    25,
      -1,   473,   120,   594,    -1,   983,   250,    -1,   578,    -1,
     578,   250,    -1,    74,  1435,    -1,    68,   964,    -1,    72,
     120,    -1,    72,   180,    -1,    72,   143,    -1,   522,   120,
      -1,   522,   134,    -1,   522,   318,    -1,   932,   965,    -1,
     353,   945,    -1,   956,    -1,  1419,    -1,    59,   477,    -1,
      58,    -1,  1440,    -1,    33,    -1,   959,    -1,   120,    -1,
      -1,   958,   960,    -1,  1440,    -1,    33,    -1,   962,    -1,
     120,    -1,  1440,    -1,    -1,    68,   966,    -1,   964,    -1,
     120,    -1,    -1,   120,    -1,    21,    -1,    33,    21,    -1,
      21,    33,    -1,   575,    -1,   575,    33,    -1,    33,   575,
      -1,    -1,   968,    -1,   969,    -1,    47,    -1,   958,   959,
     971,    -1,    33,    -1,    33,   958,   959,    -1,    -1,    33,
      -1,    -1,   631,  1259,   973,   632,    -1,    20,    -1,   126,
      -1,   451,    -1,    -1,   974,    -1,   974,   975,    -1,   975,
      -1,  1259,    -1,   977,   976,    -1,   978,    -1,   979,   633,
     978,    -1,   977,   624,   977,    -1,   979,    -1,   980,    -1,
      -1,   260,   981,    -1,    -1,   401,    -1,   424,  1430,   985,
     987,   988,    -1,    -1,   631,   986,   632,    -1,   986,   633,
    1438,    -1,  1438,    -1,    -1,   305,   190,    -1,   305,   384,
      -1,   305,   486,    -1,    -1,   364,   583,   989,    -1,   364,
     125,   989,    -1,   364,   583,   989,   364,   125,   989,    -1,
     364,   125,   989,   364,   583,   989,    -1,   446,    -1,    50,
      -1,   477,   357,    -1,   354,     5,    -1,   477,   120,    -1,
     992,    -1,   401,   250,    -1,   578,   993,    -1,   250,    -1,
     225,    -1,    -1,   992,    -1,   248,    -1,   225,    -1,   224,
      -1,    -1,   578,    -1,   191,    -1,   495,    -1,    -1,   998,
      -1,   998,  1006,    -1,    -1,  1003,    -1,    -1,  1005,    -1,
      -1,  1004,    -1,  1008,    -1,  1003,  1008,    -1,  1009,    -1,
    1004,  1009,    -1,  1010,    -1,  1005,  1010,    -1,   589,  1011,
      -1,   566,  1011,    -1,   249,  1314,  1258,    -1,    74,  1435,
      -1,  1007,    -1,  1006,    -1,  1007,    -1,  1007,    -1,   609,
     383,  1433,    -1,    45,    -1,   462,    -1,   206,    -1,  1012,
     633,  1013,  1251,    -1,  1013,  1251,    -1,  1438,    -1,  1438,
     631,   358,   632,    -1,    -1,  1429,    -1,    -1,   639,  1438,
      -1,  1417,    -1,  1016,   633,  1417,    -1,    -1,    13,  1055,
     540,  1430,  1018,  1030,    -1,    -1,    13,   103,  1029,  1019,
     902,    -1,    13,   103,  1438,   584,   106,   131,   339,    -1,
      -1,    13,   403,   692,  1020,   693,    -1,    -1,    13,   192,
     692,  1021,   693,    -1,    -1,    13,  1553,  1548,  1022,  1555,
      -1,    -1,    13,  1548,  1023,  1555,    -1,    -1,    13,  1548,
     162,   692,  1024,  1026,  1027,   682,   687,  1028,    -1,    13,
     538,   804,    -1,    13,   273,   202,   806,    -1,    13,   538,
     801,    -1,    13,   538,   800,    -1,    13,   475,  1440,   369,
     631,   676,   632,    -1,    13,   586,   691,  1025,    -1,  1441,
     388,   169,    -1,  1025,   633,  1441,   388,   169,    -1,    -1,
     364,   464,   680,    -1,   686,    -1,   364,   464,   680,   686,
      -1,    -1,   434,   557,   692,    -1,    -1,   138,   688,    -1,
      -1,  1438,    -1,    -1,   133,   538,    -1,   223,   538,    -1,
    1045,   848,    -1,  1045,  1034,    -1,  1034,    -1,   849,    -1,
    1036,    -1,   139,   385,  1043,    -1,   419,   385,  1093,  1035,
      -1,    -1,   368,   385,  1093,  1035,  1031,  1093,    -1,    15,
     385,  1093,  1035,    -1,    -1,    61,   385,  1035,  1032,  1088,
      -1,    -1,   436,   385,  1093,  1035,  1033,  1080,    -1,    66,
     385,  1093,  1259,    -1,   564,   385,  1035,    -1,  1039,    -1,
     164,   385,  1044,   609,   540,  1430,   851,    -1,   433,   387,
     851,    -1,    12,    -1,  1043,    -1,    -1,     6,   385,  1093,
    1037,  1038,    -1,    -1,   631,   874,   632,    -1,   386,  1259,
      -1,    -1,   435,   385,  1093,  1040,  1041,    -1,    -1,    -1,
    1043,  1042,   235,   631,   874,   632,    -1,  1044,    -1,  1043,
     633,  1044,    -1,  1438,    -1,  1047,    -1,  1045,   633,  1047,
      -1,     6,  1054,    -1,  1046,   924,  1057,    -1,     6,   925,
      -1,  1046,   631,   921,   632,    -1,    -1,    56,  1054,  1429,
    1048,   930,  1057,    -1,    -1,    -1,   330,  1054,  1429,  1049,
     932,   952,  1050,  1057,    -1,   139,  1054,  1429,  1056,    -1,
     139,   185,   250,  1429,    -1,   139,   401,   250,    -1,   139,
     992,  1429,    -1,   132,   248,    -1,   147,   248,    -1,    13,
    1054,  1429,   477,   120,  1419,    -1,    13,  1054,  1429,   139,
     120,    -1,   434,  1058,  1430,    -1,    91,   557,   958,   960,
     965,    -1,   909,    -1,   184,    -1,  1244,    -1,  1052,    -1,
    1053,    -1,    -1,  1053,    -1,  1052,    -1,  1053,  1052,    -1,
    1052,  1053,    -1,    11,  1314,   120,    -1,    11,  1314,  1438,
      -1,   272,  1314,   120,    -1,   272,  1314,  1438,    -1,    -1,
      71,    -1,    -1,   221,    -1,    -1,   446,    -1,    50,    -1,
      -1,     8,  1438,    -1,   179,    -1,    -1,   557,    -1,   155,
      -1,    19,    -1,    -1,   514,   487,  1070,  1060,  1073,  1065,
      -1,   521,   487,  1070,    -1,   514,   559,  1062,    -1,    -1,
    1063,    -1,  1064,    -1,  1063,   633,  1064,    -1,   609,    83,
     490,    -1,   416,   366,    -1,   416,   614,    -1,  1066,  1067,
    1068,  1069,    -1,    -1,   586,   155,  1435,    -1,    -1,   388,
     155,  1435,    -1,    -1,   121,   155,  1435,    -1,    -1,   390,
     155,  1435,    -1,    -1,  1071,    -1,  1072,    -1,  1071,   633,
    1072,    -1,   510,    -1,   430,    -1,    -1,   582,  1074,    -1,
     664,    -1,  1074,   633,   664,    -1,   502,   155,  1435,    -1,
     500,   155,  1435,    -1,   501,    -1,    -1,    60,  1474,  1076,
    1284,  1077,    -1,    -1,   412,    -1,   171,    -1,    -1,   436,
    1093,  1474,  1079,  1284,  1080,    -1,    -1,  1081,    -1,  1082,
      -1,  1082,  1081,    -1,   412,    -1,   171,    -1,   587,    -1,
      -1,    15,  1093,  1474,  1084,  1284,    -1,    34,  1435,    -1,
      -1,    61,  1474,  1087,  1284,  1088,    -1,    -1,  1089,    -1,
    1090,    -1,  1090,  1089,    -1,   412,    -1,   175,    -1,   317,
      -1,   171,    -1,    57,    -1,   186,   584,    -1,    -1,   368,
    1093,  1474,  1092,  1284,    -1,    -1,   356,    -1,   269,    -1,
      -1,   434,  1474,  1095,  1097,    -1,   434,   586,   691,  1096,
      -1,  1441,   557,  1441,    -1,  1096,   633,  1441,   557,  1441,
      -1,  1098,    -1,  1097,   633,  1098,    -1,  1430,   557,  1430,
      -1,    -1,    48,   225,  1100,  1101,   238,  1105,    -1,  1102,
      -1,  1104,    -1,  1103,    -1,  1102,   633,  1103,    -1,  1430,
    1114,    -1,  1430,  1112,  1114,    -1,  1438,    -1,   120,    -1,
      -1,   268,   225,   235,    48,  1107,  1108,    -1,  1111,    -1,
    1109,    -1,  1110,    -1,  1109,   633,  1110,    -1,  1430,  1114,
    1117,    -1,  1430,  1112,  1114,  1117,    -1,    -1,   385,   851,
    1113,   631,  1035,   632,    -1,    -1,  1115,  1116,    -1,    -1,
     992,   631,  1226,   632,    -1,    -1,   221,   256,    -1,  1119,
      -1,   469,  1122,    -1,   631,  1120,   632,  1530,    -1,   469,
    1124,    -1,   631,  1120,   632,    -1,   469,  1205,    -1,   631,
    1121,   632,    -1,    -1,  1124,  1123,  1527,    -1,    -1,    -1,
    1125,  1129,  1133,  1126,  1127,  1132,    -1,  1247,  1253,    -1,
    1272,    -1,  1128,    -1,  1272,  1128,    -1,  1128,  1272,    -1,
     189,  1185,  1236,  1241,  1238,  1247,  1253,  1264,    -1,   189,
     140,  1236,  1253,    -1,    -1,  1130,    -1,  1130,  1131,    -1,
    1131,    -1,  1544,    -1,   507,    -1,   505,    -1,    -1,   186,
     583,    -1,   272,   238,   479,   328,    -1,  1133,   633,  1134,
      -1,  1134,    -1,   626,    -1,  1135,  1424,  1136,    -1,  1135,
    1139,  1136,  1137,    -1,    -1,    -1,    -1,    19,  1438,    -1,
      19,  1435,    -1,  1438,    -1,  1435,    -1,    -1,   631,   632,
      -1,  1139,  1143,  1139,    -1,  1139,   618,  1139,    -1,  1139,
    1144,  1139,    -1,   352,  1139,    -1,  1140,   243,   563,    -1,
    1140,   243,  1145,   563,    -1,  1140,   243,   174,    -1,  1140,
     243,  1145,   174,    -1,  1140,   243,   579,    -1,  1140,   243,
    1145,   579,    -1,  1140,    -1,  1140,   243,   357,    -1,  1140,
     243,  1145,   357,    -1,  1140,   156,  1141,    -1,  1140,  1147,
    1141,    -1,  1140,  1147,  1148,   631,  1539,   632,    -1,  1141,
      -1,  1142,   238,   631,  1539,   632,    -1,  1142,  1145,   238,
     631,  1539,   632,    -1,  1142,   238,   631,  1139,   632,    -1,
    1142,   238,   631,  1139,   633,  1178,   632,    -1,  1142,  1145,
     238,   631,  1139,   632,    -1,  1142,  1145,   238,   631,  1139,
     633,  1178,   632,    -1,  1142,    31,  1142,    17,  1141,    -1,
    1142,  1145,    31,  1142,    17,  1141,    -1,  1142,   493,   262,
    1142,    -1,  1142,   262,  1149,  1240,    -1,  1142,  1145,   262,
    1149,  1240,    -1,  1142,   425,  1142,    -1,  1142,  1145,   425,
    1142,    -1,  1142,    -1,  1142,   622,  1142,    -1,  1142,   623,
    1142,    -1,  1142,   480,  1142,    -1,  1142,   481,  1142,    -1,
    1142,   625,  1142,    -1,  1142,   624,  1142,    -1,  1142,   625,
     234,  1139,  1230,    -1,  1142,   624,   234,  1139,  1230,    -1,
    1142,   626,  1142,    -1,  1142,   627,  1142,    -1,  1142,   628,
    1142,    -1,  1142,   136,  1142,    -1,  1142,   331,  1142,    -1,
    1142,   629,  1142,    -1,  1149,    -1,   375,    -1,   372,    -1,
      17,    -1,    16,    -1,   352,    -1,   351,    -1,   634,    -1,
     351,    -1,   155,    -1,   193,    -1,   204,    -1,   254,    -1,
     281,    -1,   345,    -1,    12,    -1,    18,    -1,  1426,    -1,
    1150,    -1,  1151,    -1,  1154,    -1,  1152,    -1,  1149,    68,
    1440,    -1,  1420,    -1,  1418,    -1,  1166,    -1,  1162,    -1,
    1149,   374,  1149,    -1,   625,  1149,    -1,   624,  1149,    -1,
     630,  1149,    -1,  1146,  1149,    -1,   631,  1539,   632,    -1,
     631,  1139,   632,    -1,   631,  1139,   633,  1178,   632,    -1,
     460,   631,  1139,   633,  1178,   632,    -1,   166,   631,  1539,
     632,    -1,   635,  1438,  1139,   636,    -1,   305,  1179,     9,
     631,  1142,  1156,   632,    -1,    33,  1149,    -1,    53,   631,
    1139,    19,  1176,   632,    -1,    52,  1181,  1183,  1182,   149,
      -1,    91,   631,  1139,   633,  1176,   632,    -1,    91,   631,
    1139,   589,   959,   632,    -1,   120,   631,  1426,   632,    -1,
     593,   631,  1427,   632,    -1,   234,  1139,  1230,   625,  1139,
      -1,    59,   631,  1178,   632,    -1,    59,   631,  1178,   589,
     959,   632,    -1,    99,  1138,    -1,   110,   631,  1139,   632,
      -1,   115,   631,  1139,   632,    -1,   216,   631,  1139,   632,
      -1,   231,   631,  1139,   633,  1139,   633,  1139,   633,  1139,
     632,    -1,   234,   631,  1139,   633,  1139,   632,    -1,   234,
     631,  1139,   633,  1139,   633,  1178,   632,    -1,   258,   631,
    1139,   633,  1139,   632,    -1,   325,   631,  1139,   632,    -1,
     332,   631,  1139,   632,    -1,   453,   631,  1139,   633,  1139,
     632,    -1,   467,   631,  1139,   632,    -1,   553,   631,  1139,
     632,    -1,   550,   631,  1139,   632,    -1,   550,   631,  1139,
     633,  1139,   632,    -1,   562,   631,  1139,   632,    -1,   562,
     631,   255,  1139,   189,  1139,   632,    -1,   562,   631,   558,
    1139,   189,  1139,   632,    -1,   562,   631,    44,  1139,   189,
    1139,   632,    -1,   562,   631,   255,   189,  1139,   632,    -1,
     562,   631,   558,   189,  1139,   632,    -1,   562,   631,    44,
     189,  1139,   632,    -1,   562,   631,  1139,   189,  1139,   632,
      -1,   586,   631,   632,    -1,   620,   631,  1139,   632,    -1,
       7,   631,  1139,   633,  1139,   632,    -1,     7,   631,  1139,
     633,   234,  1139,  1230,   632,    -1,    97,  1138,    -1,   102,
     945,    -1,   108,   631,  1139,   633,   234,  1139,  1230,   632,
      -1,   109,   631,  1139,   633,   234,  1139,  1230,   632,    -1,
     173,   631,  1230,   189,  1139,   632,    -1,   197,   631,  1232,
     633,  1139,   632,    -1,   956,    -1,   396,   631,  1142,   238,
    1139,   632,    -1,   526,   631,  1139,   633,  1139,   632,    -1,
     526,   631,  1139,   633,   234,  1139,  1230,   632,    -1,   530,
     631,  1139,   633,  1139,   633,  1139,   632,    -1,   530,   631,
    1139,   633,  1139,   632,    -1,   530,   631,  1139,   189,  1139,
     186,  1139,   632,    -1,   530,   631,  1139,   189,  1139,   632,
      -1,   536,   945,    -1,   551,   631,  1231,   633,  1139,   633,
    1139,   632,    -1,   552,   631,  1231,   633,  1139,   633,  1139,
     632,    -1,   590,  1138,    -1,   592,   945,    -1,   591,   945,
      -1,    21,   631,  1139,   632,    -1,    58,   631,  1139,   632,
      -1,    66,   631,  1178,   632,    -1,    69,   631,  1139,   632,
      -1,   103,   631,   632,    -1,   220,   631,  1139,   633,  1139,
     633,  1139,   632,    -1,   187,   631,  1139,   633,  1139,   632,
      -1,   187,   631,  1139,   633,  1139,   633,  1139,   632,    -1,
     321,   631,  1139,   632,    -1,   331,   631,  1139,   633,  1139,
     632,    -1,   363,   631,  1139,   632,    -1,   388,   631,  1139,
     632,    -1,   410,   631,  1139,   632,    -1,   438,   631,  1139,
     633,  1139,   632,    -1,   439,   631,  1139,   633,  1139,   633,
    1139,   632,    -1,   451,   631,  1139,   632,    -1,   461,   631,
     632,    -1,   564,   631,  1139,   633,  1139,   632,    -1,   604,
     631,  1139,   632,    -1,   604,   631,  1139,   633,  1139,   632,
      -1,   605,   631,  1139,   982,   632,    -1,   605,   631,  1139,
      19,    59,   972,   982,   632,    -1,   605,   631,  1139,    19,
      33,   972,   632,    -1,   605,   631,  1139,   633,  1258,   633,
    1258,   633,  1258,   632,    -1,  1153,    -1,    88,   631,  1139,
     633,  1139,   632,    -1,   195,   631,  1178,   632,    -1,   266,
     631,  1178,   632,    -1,   333,   631,  1178,   632,    -1,   334,
     631,  1178,   632,    -1,   335,   631,  1178,   632,    -1,   393,
     631,  1139,   633,  1139,   632,    -1,   394,   631,  1178,   632,
      -1,    -1,  1433,   631,  1155,  1159,   632,    -1,  1438,   639,
    1438,   631,  1177,   632,    -1,  1157,  1158,    -1,   238,    42,
     328,    -1,    -1,   238,   341,   252,   328,    -1,    -1,   609,
     411,   168,    -1,    -1,  1160,    -1,  1161,    -1,  1160,   633,
    1161,    -1,  1135,  1139,  1136,  1137,    -1,    27,   631,  1174,
     632,    -1,    27,   631,   135,  1174,   632,    -1,    36,   631,
    1174,   632,    -1,    37,   631,  1174,   632,    -1,    39,   631,
    1174,   632,    -1,    92,   631,  1235,   626,   632,    -1,    92,
     631,  1174,   632,    -1,    -1,    -1,    92,   631,   135,  1163,
    1178,  1164,   632,    -1,   327,   631,  1174,   632,    -1,   327,
     631,   135,  1174,   632,    -1,   310,   631,  1174,   632,    -1,
     310,   631,   135,  1174,   632,    -1,   520,   631,  1174,   632,
      -1,   598,   631,  1174,   632,    -1,   519,   631,  1174,   632,
      -1,   600,   631,  1174,   632,    -1,   531,   631,  1174,   632,
      -1,   531,   631,   135,  1174,   632,    -1,    -1,   203,   631,
    1169,  1165,  1178,  1171,  1170,   632,    -1,    -1,   638,  1167,
    1168,    -1,  1440,   478,  1139,    -1,  1440,    -1,   638,  1460,
    1440,  1015,    -1,    -1,   135,    -1,    -1,   471,  1417,    -1,
      -1,    -1,   373,    46,  1172,  1173,    -1,  1173,   633,  1425,
    1251,    -1,  1425,  1251,    -1,    -1,  1235,  1175,  1139,    -1,
      33,   950,    -1,    59,   950,   970,    -1,   343,   950,    -1,
     485,    -1,   485,   236,    -1,   581,    -1,   581,   236,    -1,
     110,    -1,   553,   944,    -1,   107,   944,    -1,   118,   942,
      -1,    -1,  1178,    -1,  1139,    -1,  1178,   633,  1139,    -1,
    1180,    -1,   631,  1180,   632,    -1,  1426,    -1,  1180,   633,
    1426,    -1,    -1,  1139,    -1,    -1,   145,  1139,    -1,   606,
    1139,   549,  1139,    -1,  1183,   606,  1139,   549,  1139,    -1,
    1199,    -1,  1188,    -1,  1187,    -1,  1184,    -1,   635,  1438,
    1184,   636,    -1,  1186,    -1,  1187,   633,  1186,    -1,  1184,
    1196,  1184,    -1,  1184,   523,  1199,    -1,    -1,  1184,  1196,
    1184,   364,  1189,  1139,    -1,    -1,  1184,   523,  1199,   364,
    1190,  1139,    -1,    -1,  1184,  1196,  1184,   589,  1191,   631,
    1229,   632,    -1,  1184,   341,   247,  1199,    -1,    -1,  1184,
     258,  1215,   247,  1184,   364,  1192,  1139,    -1,    -1,  1184,
     258,  1215,   247,  1199,  1193,   589,   631,  1229,   632,    -1,
    1184,   341,   258,  1215,   247,  1199,    -1,    -1,  1184,   453,
    1215,   247,  1184,   364,  1194,  1139,    -1,    -1,  1184,   453,
    1215,   247,  1199,  1195,   589,   631,  1229,   632,    -1,  1184,
     341,   453,  1215,   247,  1199,    -1,   247,    -1,   228,   247,
      -1,    95,   247,    -1,    -1,  1198,    -1,   385,   631,  1229,
     632,   851,    -1,    -1,  1200,  1430,  1197,  1234,  1224,    -1,
    1214,  1213,  1210,    -1,   631,  1213,  1201,   632,  1234,    -1,
    1208,  1531,    -1,    -1,    -1,  1201,   577,  1535,  1202,  1536,
    1203,  1531,    -1,  1205,    -1,    -1,    -1,  1206,  1542,  1133,
    1207,   919,  1132,    -1,    -1,  1213,  1209,  1187,    -1,    -1,
      -1,  1211,  1129,  1133,  1212,   919,    -1,    -1,   469,    -1,
      -1,   376,    -1,    -1,   186,   247,    -1,   186,   373,    46,
      -1,   186,   202,    46,    -1,   184,    -1,   221,    -1,    -1,
    1217,   992,  1216,  1219,   631,  1228,   632,    -1,    -1,   588,
     992,  1216,  1220,   631,  1226,   632,    -1,  1218,    -1,  1221,
    1218,    -1,    -1,    -1,  1223,  1221,    -1,    -1,  1225,  1222,
      -1,    -1,  1228,    -1,  1438,    -1,   401,    -1,  1227,    -1,
    1228,   633,  1227,    -1,  1438,    -1,  1229,   633,  1438,    -1,
    1231,    -1,   111,    -1,   112,    -1,   113,    -1,   114,    -1,
     213,    -1,   214,    -1,   215,    -1,   323,    -1,   324,    -1,
     466,    -1,   619,    -1,   115,    -1,   604,    -1,   216,    -1,
     325,    -1,   332,    -1,   410,    -1,   467,    -1,   321,    -1,
     620,    -1,   110,    -1,   553,    -1,   550,    -1,   107,    -1,
      -1,    19,    -1,   155,    -1,    -1,  1233,  1438,    -1,    -1,
      12,    -1,    -1,    -1,   607,  1237,  1139,    -1,    -1,    -1,
     207,  1239,  1139,    -1,   160,  1149,    -1,    -1,    -1,   202,
      46,  1242,  1243,    -1,  1242,   633,  1425,  1251,    -1,  1425,
    1251,    -1,    -1,   610,    -1,   611,    -1,   373,    46,  1245,
      -1,  1245,   633,  1246,    -1,  1246,    -1,  1427,  1251,    -1,
      -1,  1248,    -1,    -1,   373,    46,  1249,  1250,    -1,  1250,
     633,  1425,  1251,    -1,  1425,  1251,    -1,    -1,    20,    -1,
     126,    -1,    -1,  1254,    -1,    -1,  1254,    -1,   263,  1255,
      -1,  1256,    -1,  1256,   633,  1256,    -1,  1256,   362,  1256,
      -1,  1438,    -1,  1418,    -1,   568,    -1,   277,    -1,   358,
      -1,    -1,   263,  1256,    -1,   358,    -1,   209,    -1,   277,
      -1,   568,    -1,   117,    -1,   181,    -1,   358,    -1,   209,
      -1,   277,    -1,   568,    -1,  1262,    -1,   358,    -1,   568,
      -1,   277,    -1,   117,    -1,   181,    -1,   358,    -1,   568,
      -1,   277,    -1,  1262,    -1,  1263,    -1,   117,    -1,   181,
      -1,    -1,    -1,   403,    14,  1265,   631,  1266,   632,    -1,
      -1,  1267,    -1,  1267,   633,  1267,    -1,   358,    -1,    -1,
    1269,  1270,    -1,  1270,   633,  1271,    -1,  1271,    -1,   638,
    1440,    -1,  1440,    -1,    -1,   235,  1273,  1274,    -1,    -1,
      -1,   377,  1437,  1275,   961,  1276,  1401,  1404,    -1,   141,
    1437,    -1,  1268,    -1,    -1,   138,  1278,  1178,    -1,    -1,
     139,  1290,  1474,  1289,  1280,  1284,  1056,    -1,    -1,    -1,
     139,   225,  1438,   364,  1430,  1281,  1282,  1051,    -1,   139,
     103,  1289,  1438,    -1,   139,   192,  1289,  1438,   639,  1438,
      -1,   139,   192,  1289,  1438,    -1,   139,   403,  1289,   692,
      -1,   139,   586,   691,  1506,    -1,    -1,   139,   601,  1289,
    1283,  1284,  1056,    -1,   139,   162,  1289,   692,    -1,   139,
     561,  1289,   692,    -1,   139,   538,   827,  1291,    -1,   139,
     273,   202,   828,  1291,    -1,   139,   475,  1289,  1440,    -1,
    1285,    -1,  1284,   633,  1285,    -1,  1430,    -1,  1430,  1197,
      -1,  1288,    -1,  1287,   633,  1288,    -1,  1431,    -1,    -1,
     220,   166,    -1,    -1,   543,    -1,    -1,  1292,    -1,  1293,
      -1,  1292,  1293,    -1,  1291,   633,  1293,    -1,   838,    -1,
     839,    -1,    -1,    -1,   231,  1295,  1300,  1055,  1302,  1296,
    1304,  1320,    -1,    -1,    -1,   439,  1298,  1301,  1302,  1299,
    1304,    -1,    -1,   280,    -1,   123,    -1,   210,    -1,  1329,
      -1,   123,    -1,   235,  1303,    -1,  1303,    -1,  1286,    -1,
    1307,    -1,   631,   632,  1307,    -1,   631,  1306,   632,  1307,
      -1,    -1,   477,  1305,  1311,    -1,  1306,   633,  1423,    -1,
    1423,    -1,   593,  1310,    -1,   594,  1310,    -1,    -1,   897,
    1308,  1527,    -1,    -1,   631,   897,   632,  1309,  1530,    -1,
    1310,   633,  1315,    -1,  1315,    -1,  1311,   633,  1312,    -1,
    1312,    -1,  1427,  1313,  1319,    -1,   155,    -1,   478,    -1,
      -1,  1313,    -1,    -1,   631,  1316,  1317,   632,    -1,    -1,
    1318,    -1,  1318,   633,  1319,    -1,  1319,    -1,  1139,    -1,
     120,    -1,    -1,    -1,   364,   142,  1321,   250,   583,  1327,
      -1,    -1,    -1,   583,  1323,  1329,  1055,  1185,   477,  1325,
    1324,  1236,  1247,  1257,    -1,  1325,   633,  1326,    -1,  1326,
      -1,  1427,  1313,  1319,    -1,  1327,   633,  1328,    -1,  1328,
      -1,  1427,  1313,  1319,    -1,    -1,   280,    -1,    -1,   125,
    1331,  1339,  1332,    -1,    -1,   189,  1430,  1197,  1333,  1236,
    1247,  1257,    -1,    -1,  1336,  1334,   189,  1185,  1236,    -1,
      -1,   189,  1287,  1335,   589,  1185,  1236,    -1,  1337,    -1,
    1336,   633,  1337,    -1,  1438,  1338,    -1,  1438,   639,  1438,
    1338,    -1,    -1,   639,   626,    -1,    -1,  1340,  1339,    -1,
     412,    -1,   280,    -1,   221,    -1,    -1,   564,  1343,  1342,
    1285,    -1,    -1,   540,    -1,    -1,  1345,    -1,  1346,    -1,
    1345,   633,  1346,    -1,    93,    -1,   318,    -1,    41,   241,
      -1,    89,   535,    -1,   381,   176,    -1,   242,    -1,   534,
      -1,   494,    -1,    12,    -1,    -1,   186,   411,   358,    -1,
      -1,   482,  1349,  1350,    -1,   104,  1361,    -1,  1357,   537,
    1356,  1361,    -1,  1357,   560,  1356,  1361,    -1,   161,  1356,
    1361,    -1,   540,   518,  1356,  1361,    -1,   367,   537,  1356,
    1361,    -1,   392,    -1,   153,   916,  1353,    -1,   153,    12,
    1353,    -1,  1357,    70,  1358,  1430,  1356,  1361,    -1,  1354,
     274,    -1,   487,   212,    -1,    -1,    34,   161,  1359,  1360,
    1351,  1252,    -1,    -1,   427,   161,  1359,  1360,  1352,  1252,
      -1,   994,  1358,  1430,  1356,  1236,    -1,  1355,   152,    -1,
     402,    -1,    92,   631,   626,   632,   603,    -1,    92,   631,
     626,   632,   158,    -1,   603,  1252,    -1,   158,  1252,    -1,
     407,    -1,   406,  1344,  1347,  1252,    -1,  1459,   518,  1361,
      -1,  1357,   405,    -1,  1459,   597,  1361,    -1,   958,  1361,
      -1,    69,  1361,    -1,   201,    -1,   201,   186,  1441,    -1,
      94,   103,   907,  1438,    -1,    94,   540,  1430,    -1,    94,
     601,  1430,    -1,   302,   518,    -1,   487,   518,    -1,    94,
     403,   692,    -1,    94,   192,   692,    -1,    94,   561,   692,
      -1,   403,   518,  1361,    -1,   192,   518,  1361,    -1,   403,
      67,   692,    -1,   192,    67,   692,    -1,    94,   162,   692,
      -1,   518,    -1,   336,    -1,   274,    -1,   302,    -1,    33,
      -1,    -1,   522,    -1,    -1,  1358,  1438,    -1,    -1,   190,
      -1,   189,    -1,   238,    -1,    -1,   238,  1435,    -1,    -1,
     189,  1260,    -1,    -1,   262,  1435,    -1,   607,  1139,    -1,
      -1,  1366,  1430,  1363,  1368,    -1,    -1,  1366,  1367,  1364,
    1365,    -1,  1118,    -1,  1294,    -1,  1297,    -1,  1322,    -1,
    1330,    -1,   126,    -1,   127,    -1,    -1,   171,    -1,   386,
      -1,   187,   155,  1440,    -1,    -1,  1417,    -1,  1438,    -1,
      -1,   183,  1093,  1370,  1371,    -1,    -1,    -1,  1474,  1372,
    1378,  1373,  1374,    -1,  1376,    -1,    -1,   609,   416,   272,
      -1,    -1,   186,  1375,   170,    -1,  1376,   633,  1377,    -1,
    1377,    -1,   157,   274,    -1,   153,   274,    -1,   194,   274,
      -1,   488,   274,    -1,    33,   274,    -1,   426,   274,    -1,
     411,    48,    -1,   212,    -1,   402,    -1,   274,    -1,   518,
      -1,   128,    -1,   444,    -1,    -1,  1284,    -1,    -1,   442,
    1380,  1381,    -1,  1381,   633,  1382,    -1,  1382,    -1,    -1,
     487,  1383,  1384,    -1,   302,    -1,   411,    48,    -1,    -1,
      12,    -1,    -1,   409,  1386,  1387,    -1,  1354,   274,  1388,
      -1,   557,  1435,    -1,    29,  1139,    -1,   251,  1390,  1139,
      -1,    -1,    82,    -1,   411,    -1,   588,  1438,    -1,    -1,
      -1,    -1,    -1,   268,  1397,  1393,  1399,  1398,   226,  1437,
    1394,  1400,   235,   540,  1430,  1197,  1395,   961,  1396,  1407,
    1401,  1404,  1408,  1410,  1413,    -1,   106,    -1,   617,    -1,
      -1,   269,    -1,    -1,    80,    -1,   280,    -1,    -1,   439,
      -1,   221,    -1,    -1,    70,  1402,    -1,  1402,  1403,    -1,
    1403,    -1,   545,    46,  1417,    -1,   371,   148,    46,  1417,
      -1,   148,    46,  1417,    -1,   159,    46,  1417,    -1,    -1,
     265,  1405,    -1,  1405,  1406,    -1,  1406,    -1,   545,    46,
    1417,    -1,   512,    46,  1417,    -1,    -1,   458,   218,    46,
    1417,    -1,    -1,   221,   358,  1409,    -1,   265,    -1,   458,
      -1,    -1,   631,  1411,   632,    -1,   631,   632,    -1,  1411,
     633,  1412,    -1,  1412,    -1,  1427,    -1,   638,  1440,    -1,
      -1,   477,  1414,    -1,  1414,   633,  1415,    -1,  1415,    -1,
    1427,  1313,  1135,  1319,  1136,    -1,   546,    -1,   342,    -1,
     571,   546,    -1,  1416,  1436,    -1,  1436,    -1,   209,    -1,
      35,    -1,   382,    -1,  1420,    -1,   625,  1421,    -1,   624,
    1421,    -1,  1416,    -1,  1421,    -1,  1422,    -1,   357,    -1,
     174,    -1,   563,    -1,   209,    -1,    35,    -1,   571,   209,
      -1,   571,    35,    -1,   358,    -1,   277,    -1,   568,    -1,
     117,    -1,   181,    -1,   110,   546,    -1,   553,   546,    -1,
     550,   546,    -1,  1427,    -1,  1424,    -1,  1438,   639,   626,
      -1,  1438,   639,  1438,   639,   626,    -1,  1139,    -1,  1438,
      -1,  1428,    -1,  1438,    -1,  1428,    -1,  1438,   639,  1438,
      -1,   639,  1438,   639,  1438,    -1,  1438,   639,  1438,   639,
    1438,    -1,  1438,    -1,  1438,   639,  1438,   639,  1438,    -1,
    1438,   639,  1438,    -1,   639,  1438,    -1,  1438,    -1,  1438,
     639,  1438,    -1,   639,  1438,    -1,  1438,  1338,    -1,  1438,
     639,  1438,  1338,    -1,  1438,    -1,   217,    -1,   219,    -1,
    1435,    -1,   546,    -1,   546,    -1,   546,    -1,  1433,    -1,
    1442,    -1,  1433,    -1,  1443,    -1,  1438,    -1,  1435,    -1,
     261,    -1,  1440,    -1,  1440,   638,  1440,    -1,    99,  1138,
      -1,  1443,    -1,    21,    -1,    28,    -1,    30,    -1,    47,
      -1,    48,    -1,    58,    -1,    60,    -1,    65,    -1,    74,
      -1,    76,    -1,    88,    -1,   116,    -1,   138,    -1,   149,
      -1,   165,    -1,   183,    -1,   187,    -1,   205,    -1,   208,
      -1,   211,    -1,   233,    -1,   252,    -1,   354,    -1,   367,
      -1,   369,    -1,   379,    -1,   383,    -1,   395,    -1,   398,
      -1,   433,    -1,   436,    -1,   442,    -1,   445,    -1,   454,
      -1,   463,    -1,   468,    -1,   475,    -1,   485,    -1,   491,
      -1,   487,    -1,   492,    -1,   514,    -1,   521,    -1,   564,
      -1,   575,    -1,   576,    -1,   613,    -1,   616,    -1,   584,
      -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    14,    -1,    18,    -1,    23,    -1,    25,
      -1,    24,    -1,    26,    -1,    27,    -1,    34,    -1,    38,
      -1,    41,    -1,    43,    -1,    42,    -1,    45,    -1,    51,
      -1,    54,    -1,    55,    -1,    57,    -1,    62,    -1,    64,
      -1,    63,    -1,    66,    -1,    67,    -1,    69,    -1,    73,
      -1,    72,    -1,    70,    -1,    75,    -1,    77,    -1,    78,
      -1,    79,    -1,    80,    -1,    82,    -1,    83,    -1,    85,
      -1,    87,    -1,    86,    -1,    89,    -1,    93,    -1,    96,
      -1,    98,    -1,   101,    -1,   106,    -1,   105,    -1,   107,
      -1,   110,    -1,   115,    -1,   121,    -1,   122,    -1,   124,
      -1,   128,    -1,   130,    -1,   131,    -1,   132,    -1,   133,
      -1,   134,    -1,   141,    -1,   142,    -1,   143,    -1,   150,
      -1,   154,    -1,   153,    -1,   152,    -1,   157,    -1,   158,
      -1,   160,    -1,   162,    -1,   161,    -1,   163,    -1,   164,
      -1,   168,    -1,   169,    -1,   170,    -1,   171,    -1,   172,
      -1,   176,    -1,   175,    -1,   188,    -1,   147,    -1,   190,
      -1,   178,    -1,   179,    -1,   180,    -1,   194,    -1,   196,
      -1,   195,    -1,   197,    -1,   201,    -1,   199,    -1,   206,
      -1,   212,    -1,   216,    -1,   218,    -1,   222,    -1,   237,
      -1,   223,    -1,   224,    -1,   227,    -1,   241,    -1,   242,
      -1,   244,    -1,   245,    -1,   232,    -1,   249,    -1,   253,
      -1,   256,    -1,   259,    -1,   260,    -1,   266,    -1,   267,
      -1,   269,    -1,   271,    -1,   273,    -1,   274,    -1,   308,
      -1,   302,    -1,   304,    -1,   286,    -1,   290,    -1,   287,
      -1,   288,    -1,   303,    -1,   289,    -1,   292,    -1,   284,
      -1,   291,    -1,   285,    -1,   300,    -1,   294,    -1,   293,
      -1,   295,    -1,   296,    -1,   297,    -1,   298,    -1,   299,
      -1,   282,    -1,   306,    -1,   307,    -1,   309,    -1,   311,
      -1,   312,    -1,   317,    -1,   318,    -1,   319,    -1,   320,
      -1,   321,    -1,   322,    -1,   325,    -1,   326,    -1,   330,
      -1,   328,    -1,   332,    -1,   333,    -1,   334,    -1,   335,
      -1,   336,    -1,   337,    -1,   339,    -1,   338,    -1,   340,
      -1,   343,    -1,   344,    -1,   348,    -1,   347,    -1,   355,
      -1,   349,    -1,   350,    -1,   359,    -1,   361,    -1,   362,
      -1,   363,    -1,   365,    -1,   366,    -1,   380,    -1,   381,
      -1,   384,    -1,   387,    -1,   386,    -1,   388,    -1,   389,
      -1,   390,    -1,   391,    -1,   392,    -1,   393,    -1,   394,
      -1,   399,    -1,   400,    -1,   402,    -1,   404,    -1,   405,
      -1,   406,    -1,   407,    -1,   408,    -1,   410,    -1,   411,
      -1,   412,    -1,   415,    -1,   419,    -1,   420,    -1,   422,
      -1,   421,    -1,   423,    -1,   426,    -1,   427,    -1,   428,
      -1,   429,    -1,   430,    -1,   432,    -1,   435,    -1,   437,
      -1,   440,    -1,   444,    -1,   447,    -1,   448,    -1,   449,
      -1,   451,    -1,   455,    -1,   457,    -1,   458,    -1,   461,
      -1,   459,    -1,   460,    -1,   462,    -1,   464,    -1,   465,
      -1,   467,    -1,   473,    -1,   472,    -1,   474,    -1,   486,
      -1,   479,    -1,   483,    -1,   488,    -1,   490,    -1,   493,
      -1,   494,    -1,   500,    -1,   501,    -1,   502,    -1,   505,
      -1,   504,    -1,   507,    -1,   510,    -1,   513,    -1,   515,
      -1,   516,    -1,   517,    -1,   518,    -1,   522,    -1,   524,
      -1,   525,    -1,   526,    -1,   527,    -1,   529,    -1,   528,
      -1,   532,    -1,   533,    -1,   534,    -1,   535,    -1,   542,
      -1,   537,    -1,   541,    -1,   538,    -1,   543,    -1,   544,
      -1,   547,    -1,   548,    -1,   559,    -1,   560,    -1,   550,
      -1,   551,    -1,   552,    -1,   553,    -1,   565,    -1,   566,
      -1,   567,    -1,   192,    -1,   569,    -1,   570,    -1,   573,
      -1,   572,    -1,   579,    -1,   582,    -1,   586,    -1,   587,
      -1,   597,    -1,   601,    -1,   594,    -1,   603,    -1,   602,
      -1,   604,    -1,   612,    -1,   605,    -1,   615,    -1,   617,
      -1,   620,    -1,    -1,   477,  1445,  1446,    -1,    -1,  1462,
    1447,  1452,    -1,    -1,   559,  1448,  1465,    -1,    -1,  1458,
    1449,  1450,    -1,    -1,  1461,  1451,  1452,    -1,   559,  1465,
      -1,    -1,   633,  1453,    -1,    -1,  1454,  1456,    -1,    -1,
    1453,   633,  1455,  1456,    -1,    -1,  1458,  1457,  1461,    -1,
    1462,    -1,   199,    -1,   269,    -1,   474,    -1,    -1,   199,
      -1,   269,    -1,   474,    -1,    -1,   199,   639,    -1,   269,
     639,    -1,   474,   639,    -1,  1464,  1313,  1471,    -1,    -1,
    1464,  1313,  1463,  1471,    -1,   638,  1440,  1313,  1139,    -1,
     638,   638,  1460,  1464,  1313,  1471,    -1,   958,   963,    -1,
     338,  1313,  1139,    -1,   338,   960,   965,    -1,   388,  1313,
    1470,    -1,   388,   186,  1441,  1313,  1470,    -1,  1438,    -1,
    1438,   639,  1438,    -1,   120,   639,  1438,    -1,  1466,    -1,
    1467,    -1,  1466,   633,  1467,    -1,  1467,   633,  1466,    -1,
    1468,    -1,   244,   260,  1469,    -1,   416,   366,    -1,   416,
     614,    -1,   416,   569,    -1,   416,    75,    -1,   437,   416,
      -1,   472,    -1,   546,    -1,   388,   631,   546,   632,    -1,
     363,   631,   546,   632,    -1,  1139,    -1,   120,    -1,   364,
      -1,    12,    -1,    33,    -1,    -1,   272,  1474,  1473,  1475,
      -1,   540,    -1,   537,    -1,  1476,    -1,  1475,   633,  1476,
      -1,  1430,  1234,  1477,    -1,   416,    -1,   614,    -1,   280,
     614,    -1,   416,   269,    -1,    -1,   580,  1479,  1474,    -1,
     205,  1430,   367,  1234,    -1,   205,  1432,    65,    -1,    -1,
     205,  1432,   416,  1481,  1482,  1236,  1253,    -1,  1483,    -1,
    1438,  1484,    -1,   179,    -1,   348,    -1,   179,    -1,   348,
      -1,   400,    -1,   253,    -1,    -1,  1486,  1485,   631,  1318,
     632,    -1,   155,    -1,   193,    -1,   254,    -1,   204,    -1,
     281,    -1,    -1,   452,   691,  1488,  1489,    -1,  1494,   364,
    1493,  1505,   189,  1507,    -1,  1494,   364,   192,  1505,   189,
    1507,    -1,  1494,   364,   403,  1505,   189,  1507,    -1,    12,
    1495,   633,   200,   370,   189,  1507,    -1,   408,   364,  1441,
     189,  1507,    -1,    -1,   200,   691,  1491,  1492,    -1,  1494,
     364,  1493,  1505,   557,  1507,  1512,  1513,    -1,  1494,   364,
     192,  1505,   557,  1507,  1512,  1513,    -1,  1494,   364,   403,
    1505,   557,  1507,  1512,  1513,    -1,   408,   364,  1441,   557,
    1507,  1514,    -1,    -1,   540,    -1,  1496,    -1,    12,  1495,
      -1,    -1,   402,    -1,  1497,    -1,  1496,   633,  1497,    -1,
      -1,   469,  1498,  1509,    -1,    -1,   231,  1499,  1509,    -1,
      -1,   583,  1500,  1509,    -1,    -1,   424,  1501,  1509,    -1,
     125,    -1,   585,    -1,   225,    -1,    13,    -1,    94,    -1,
     139,    -1,   165,    -1,   432,    -1,   483,    -1,   404,    -1,
     178,    -1,   200,   370,    -1,   482,   104,    -1,   532,    -1,
      94,   543,   537,    -1,   272,   537,    -1,   440,   487,    -1,
     440,    64,    -1,    94,   601,    -1,   482,   601,    -1,    94,
     457,    -1,    13,   457,    -1,    94,   586,    -1,   162,    -1,
     561,    -1,    94,   538,    -1,    -1,    17,    -1,  1504,  1502,
    1503,    -1,  1504,    -1,   527,   546,    -1,   245,   546,    -1,
      62,   546,    -1,   626,    -1,  1438,   639,   626,    -1,   626,
     639,   626,    -1,  1430,    -1,  1441,    -1,  1506,   633,  1441,
      -1,  1508,    -1,  1507,   633,  1508,    -1,  1441,   218,    46,
     546,    -1,  1441,   218,    46,   388,   546,    -1,  1441,   218,
     609,  1440,    -1,  1441,   218,   609,  1440,    19,  1435,    -1,
    1441,    -1,    -1,   631,  1510,   632,    -1,  1510,   633,  1511,
      -1,  1511,    -1,  1438,    -1,    -1,   441,  1503,    -1,   441,
     511,    -1,   441,   615,    -1,   441,   350,    -1,    -1,   609,
    1515,    -1,    -1,   609,   200,   370,    -1,  1515,  1516,    -1,
    1516,    -1,   200,   370,    -1,   307,  1258,    -1,   311,  1258,
      -1,   306,  1258,    -1,   312,  1258,    -1,    -1,    30,  1518,
    1519,    -1,    -1,   612,    -1,    -1,    17,   354,    55,    -1,
      17,    55,    -1,    -1,   431,    -1,   354,   431,    -1,    -1,
     463,    -1,    76,  1519,  1520,  1521,    -1,   454,  1519,  1520,
    1521,    -1,   454,  1519,   557,  1522,  1438,    -1,   463,  1438,
      -1,   431,   463,  1438,    -1,    -1,  1528,    -1,    -1,   577,
    1535,  1529,  1119,    -1,    -1,  1528,    -1,  1532,    -1,    -1,
    1532,    -1,    -1,  1533,  1534,    -1,  1248,  1252,    -1,  1254,
      -1,    -1,   135,    -1,    12,    -1,   469,  1204,    -1,   631,
    1121,   632,    -1,  1536,  1531,    -1,    -1,  1537,   577,  1535,
    1538,  1536,  1531,    -1,  1540,  1537,  1541,    -1,    -1,    -1,
      -1,  1543,    -1,  1543,  1544,    -1,  1544,    -1,   523,    -1,
     210,    -1,   135,    -1,   508,    -1,   503,    -1,   456,    -1,
     504,    -1,   506,    -1,    12,    -1,  1550,  1546,    -1,  1549,
    1547,    -1,  1551,  1548,  1555,    -1,  1555,    -1,  1567,    -1,
    1578,    -1,  1572,    -1,   678,    -1,  1555,    -1,  1567,    -1,
    1578,    -1,  1572,    -1,  1571,    -1,   678,    -1,  1549,    -1,
    1550,    -1,    -1,   122,   155,  1441,    -1,  1552,    -1,  1552,
    1553,    -1,  1553,    -1,   375,   439,    -1,    11,   155,   570,
      -1,    11,   155,   319,    -1,    11,   155,   544,    -1,    -1,
     509,   468,   122,    -1,   509,   468,   237,    -1,    -1,  1554,
     601,  1430,  1556,  1557,    19,  1559,    -1,    -1,   631,  1558,
     632,    -1,  1438,    -1,  1558,   633,  1438,    -1,    -1,  1560,
    1561,  1566,    -1,    -1,  1564,  1562,  1527,    -1,   631,  1563,
     632,  1530,    -1,  1564,    -1,   631,  1563,   632,    -1,    -1,
     469,  1565,  1124,    -1,    -1,   609,    61,   370,    -1,   609,
      51,    61,   370,    -1,   609,   269,    61,   370,    -1,    -1,
      -1,    -1,   561,  1135,   692,   798,   799,   364,  1135,  1568,
    1430,   186,  1135,  1569,   144,   460,  1570,   747,    -1,    10,
    1135,   192,  1438,   449,   920,   492,  1435,    -1,  1135,   192,
    1438,   449,   920,   492,  1435,    -1,    -1,    -1,    -1,    -1,
      -1,  1135,   192,   692,   631,  1573,   703,   632,  1574,   449,
    1575,   955,  1576,   694,  1577,   747,    -1,    -1,    -1,    -1,
      -1,   403,  1135,   692,  1579,   631,  1580,   707,   632,  1581,
     694,  1582,   747,    -1,   616,  1585,  1584,  1586,    -1,   616,
     149,  1584,  1588,    -1,   616,   398,  1584,    -1,   616,    76,
    1584,  1587,    -1,   616,   454,  1584,    -1,   616,   420,    -1,
    1417,    -1,  1417,   633,  1417,    -1,  1417,   633,  1417,   633,
    1258,    -1,    30,    -1,   514,    -1,    -1,   247,    -1,   447,
      -1,    -1,   365,   389,    -1,    -1,    -1,   533,  1589,  1590,
      -1,    -1,   186,   322,    -1,   233,   391,  1438,   492,  1435,
      -1,   576,   391,  1438,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1970,  1970,  1983,  1982,  2007,  2014,  2016,  2020,  2021,
    2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,
    2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,
    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
    2066,  2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,
    2076,  2077,  2081,  2091,  2092,  2096,  2116,  2123,  2134,  2133,
    2144,  2146,  2150,  2151,  2155,  2168,  2167,  2187,  2186,  2204,
    2205,  2209,  2213,  2217,  2221,  2226,  2230,  2234,  2239,  2252,
    2257,  2261,  2265,  2269,  2273,  2277,  2282,  2286,  2291,  2322,
    2327,  2334,  2337,  2339,  2340,  2344,  2358,  2362,  2378,  2382,
    2395,  2394,  2440,  2445,  2439,  2452,  2457,  2450,  2464,  2469,
    2462,  2475,  2474,  2487,  2486,  2494,  2498,  2502,  2506,  2513,
    2526,  2527,  2531,  2535,  2539,  2543,  2547,  2552,  2556,  2564,
    2563,  2595,  2594,  2601,  2608,  2609,  2615,  2621,  2631,  2637,
    2643,  2645,  2652,  2653,  2657,  2663,  2672,  2673,  2681,  2681,
    2736,  2737,  2738,  2739,  2740,  2741,  2742,  2743,  2744,  2745,
    2746,  2747,  2748,  2753,  2767,  2781,  2800,  2801,  2805,  2806,
    2811,  2813,  2815,  2817,  2819,  2821,  2823,  2829,  2830,  2831,
    2835,  2839,  2847,  2846,  2859,  2861,  2864,  2866,  2870,  2874,
    2881,  2883,  2887,  2888,  2893,  2912,  2942,  2944,  2948,  2949,
    2953,  2982,  2983,  2984,  2985,  2989,  2990,  2994,  2995,  3000,
    3003,  3030,  3029,  3113,  3130,  3129,  3204,  3203,  3276,  3277,
    3282,  3284,  3289,  3312,  3323,  3327,  3349,  3350,  3354,  3358,
    3371,  3377,  3383,  3392,  3407,  3433,  3439,  3440,  3446,  3449,
    3453,  3461,  3481,  3483,  3501,  3507,  3509,  3511,  3513,  3515,
    3517,  3519,  3521,  3523,  3525,  3527,  3529,  3534,  3550,  3566,
    3567,  3572,  3578,  3587,  3593,  3602,  3610,  3639,  3648,  3650,
    3659,  3664,  3670,  3679,  3687,  3689,  3691,  3693,  3695,  3697,
    3699,  3701,  3703,  3705,  3707,  3709,  3711,  3716,  3736,  3760,
    3762,  3761,  3768,  3769,  3770,  3771,  3772,  3773,  3774,  3775,
    3776,  3777,  3778,  3779,  3780,  3785,  3784,  3795,  3795,  3852,
    3851,  3908,  3908,  3930,  3989,  4039,  4064,  4063,  4089,  4112,
    4114,  4115,  4119,  4137,  4158,  4167,  4203,  4158,  4232,  4234,
    4235,  4239,  4240,  4245,  4256,  4244,  4307,  4306,  4320,  4321,
    4325,  4326,  4331,  4340,  4330,  4389,  4398,  4388,  4442,  4455,
    4460,  4459,  4497,  4498,  4503,  4502,  4536,  4536,  4555,  4554,
    4604,  4621,  4630,  4620,  4684,  4693,  4683,  4733,  4735,  4740,
    4742,  4744,  4761,  4766,  4772,  4779,  4780,  4788,  4794,  4803,
    4809,  4815,  4816,  4820,  4820,  4825,  4826,  4827,  4831,  4832,
    4833,  4836,  4838,  4842,  4843,  4844,  4848,  4849,  4850,  4851,
    4852,  4853,  4854,  4855,  4858,  4860,  4864,  4865,  4866,  4870,
    4871,  4872,  4873,  4874,  4877,  4879,  4883,  4884,  4885,  4889,
    4890,  4891,  4892,  4893,  4894,  4895,  4898,  4900,  4904,  4905,
    4906,  4910,  4911,  4912,  4917,  4925,  4933,  4941,  4953,  4965,
    4970,  4975,  4983,  4991,  4999,  5007,  5015,  5023,  5031,  5044,
    5057,  5071,  5076,  5089,  5090,  5141,  5142,  5145,  5160,  5178,
    5183,  5181,  5188,  5190,  5189,  5193,  5192,  5198,  5235,  5236,
    5241,  5240,  5259,  5278,  5277,  5294,  5298,  5306,  5305,  5308,
    5310,  5312,  5314,  5319,  5320,  5326,  5327,  5344,  5345,  5349,
    5350,  5354,  5373,  5383,  5394,  5403,  5404,  5420,  5422,  5421,
    5426,  5424,  5435,  5436,  5440,  5458,  5474,  5475,  5491,  5506,
    5528,  5529,  5534,  5533,  5557,  5567,  5589,  5588,  5606,  5605,
    5625,  5647,  5651,  5680,  5692,  5693,  5698,  5709,  5697,  5734,
    5735,  5739,  5752,  5773,  5786,  5812,  5813,  5818,  5817,  5854,
    5859,  5860,  5864,  5865,  5869,  5871,  5877,  5879,  5881,  5883,
    5885,  5887,  5897,  5912,  5896,  5926,  5927,  5931,  5932,  5936,
    5937,  5941,  5942,  5946,  5947,  5951,  5952,  5956,  5960,  5961,
    5964,  5966,  5970,  5971,  5975,  5976,  5977,  5981,  5986,  5991,
    5996,  6001,  6006,  6011,  6016,  6031,  6037,  6052,  6057,  6072,
    6078,  6096,  6101,  6106,  6111,  6116,  6122,  6121,  6147,  6148,
    6149,  6154,  6159,  6164,  6166,  6168,  6170,  6176,  6184,  6202,
    6219,  6245,  6263,  6264,  6265,  6266,  6267,  6268,  6272,  6273,
    6274,  6278,  6279,  6283,  6284,  6285,  6286,  6291,  6298,  6299,
    6303,  6304,  6308,  6309,  6316,  6321,  6327,  6333,  6339,  6358,
    6364,  6366,  6370,  6374,  6375,  6379,  6384,  6383,  6406,  6407,
    6408,  6409,  6414,  6418,  6423,  6428,  6432,  6437,  6442,  6448,
    6453,  6459,  6463,  6468,  6473,  6491,  6493,  6495,  6511,  6513,
    6518,  6523,  6535,  6540,  6545,  6550,  6552,  6554,  6556,  6558,
    6560,  6562,  6564,  6567,  6566,  6571,  6570,  6574,  6576,  6585,
    6586,  6587,  6593,  6594,  6595,  6596,  6597,  6601,  6605,  6606,
    6610,  6611,  6615,  6616,  6617,  6618,  6619,  6623,  6624,  6625,
    6626,  6627,  6631,  6636,  6638,  6644,  6645,  6647,  6652,  6662,
    6663,  6667,  6668,  6669,  6677,  6678,  6682,  6683,  6687,  6688,
    6689,  6693,  6694,  6695,  6696,  6699,  6700,  6704,  6705,  6709,
    6710,  6714,  6715,  6719,  6720,  6721,  6722,  6723,  6724,  6730,
    6736,  6742,  6748,  6749,  6762,  6768,  6774,  6780,  6785,  6790,
    6799,  6820,  6828,  6829,  6834,  6835,  6839,  6847,  6851,  6852,
    6856,  6857,  6861,  6870,  6874,  6875,  6879,  6887,  6888,  6892,
    6893,  6897,  6898,  6903,  6904,  6908,  6915,  6924,  6929,  6937,
    6938,  6939,  6940,  6941,  6942,  6947,  6955,  6956,  6961,  6960,
    6973,  6974,  6978,  6981,  6982,  6983,  6984,  6988,  6996,  7003,
    7004,  7008,  7018,  7019,  7023,  7024,  7027,  7029,  7033,  7045,
    7046,  7050,  7057,  7070,  7071,  7073,  7075,  7081,  7086,  7092,
    7098,  7105,  7115,  7116,  7117,  7118,  7119,  7123,  7127,  7128,
    7132,  7133,  7137,  7138,  7142,  7143,  7144,  7148,  7149,  7153,
    7157,  7170,  7182,  7183,  7187,  7188,  7192,  7193,  7197,  7198,
    7202,  7203,  7207,  7208,  7212,  7213,  7217,  7218,  7222,  7224,
    7228,  7229,  7233,  7237,  7238,  7251,  7252,  7253,  7257,  7258,
    7262,  7268,  7282,  7283,  7287,  7288,  7292,  7293,  7301,  7300,
    7346,  7345,  7359,  7371,  7370,  7389,  7388,  7407,  7406,  7425,
    7419,  7439,  7438,  7471,  7476,  7481,  7486,  7491,  7498,  7505,
    7510,  7518,  7519,  7520,  7521,  7525,  7526,  7538,  7539,  7543,
    7544,  7547,  7549,  7557,  7565,  7567,  7569,  7570,  7578,  7579,
    7583,  7592,  7590,  7604,  7618,  7617,  7631,  7629,  7643,  7650,
    7661,  7662,  7690,  7697,  7701,  7706,  7705,  7721,  7723,  7728,
    7736,  7735,  7751,  7755,  7754,  7766,  7767,  7771,  7786,  7787,
    7791,  7800,  7804,  7809,  7815,  7814,  7825,  7834,  7824,  7849,
    7858,  7867,  7876,  7885,  7891,  7897,  7906,  7915,  7943,  7964,
    7974,  7978,  7983,  7984,  7987,  7989,  7990,  7991,  7992,  7995,
    8000,  8011,  8016,  8027,  8028,  8032,  8033,  8037,  8038,  8039,
    8043,  8044,  8049,  8057,  8058,  8059,  8060,  8065,  8064,  8093,
    8103,  8120,  8123,  8130,  8134,  8141,  8145,  8149,  8156,  8161,
    8164,  8171,  8174,  8181,  8184,  8191,  8194,  8202,  8205,  8212,
    8216,  8223,  8227,  8234,  8235,  8260,  8261,  8262,  8267,  8272,
    8280,  8279,  8291,  8292,  8293,  8298,  8297,  8319,  8320,  8324,
    8325,  8329,  8330,  8331,  8336,  8335,  8357,  8366,  8365,  8392,
    8393,  8397,  8398,  8402,  8403,  8404,  8405,  8406,  8407,  8412,
    8411,  8433,  8434,  8435,  8440,  8439,  8445,  8452,  8457,  8465,
    8466,  8470,  8484,  8483,  8496,  8497,  8501,  8502,  8506,  8516,
    8526,  8527,  8532,  8531,  8542,  8543,  8547,  8548,  8552,  8562,
    8573,  8572,  8580,  8580,  8591,  8592,  8597,  8598,  8607,  8616,
    8617,  8621,  8626,  8631,  8636,  8641,  8640,  8660,  8668,  8660,
    8675,  8676,  8677,  8678,  8679,  8683,  8690,  8697,  8699,  8710,
    8711,  8715,  8716,  8744,  8774,  8776,  8782,  8792,  8793,  8794,
    8809,  8816,  8841,  8847,  8853,  8854,  8855,  8856,  8857,  8861,
    8862,  8867,  8918,  8925,  8968,  8974,  8980,  8986,  8992,  8998,
    9004,  9010,  9014,  9020,  9026,  9032,  9038,  9044,  9048,  9054,
    9064,  9070,  9078,  9084,  9094,  9100,  9109,  9119,  9125,  9135,
    9141,  9150,  9154,  9160,  9166,  9172,  9178,  9184,  9190,  9196,
    9202,  9208,  9214,  9220,  9226,  9232,  9238,  9242,  9243,  9247,
    9248,  9252,  9253,  9257,  9258,  9262,  9263,  9264,  9265,  9266,
    9267,  9271,  9272,  9276,  9277,  9278,  9279,  9280,  9281,  9293,
    9294,  9295,  9296,  9297,  9303,  9307,  9313,  9319,  9325,  9331,
    9333,  9340,  9347,  9353,  9394,  9403,  9410,  9418,  9424,  9431,
    9437,  9451,  9458,  9474,  9480,  9486,  9494,  9500,  9506,  9512,
    9518,  9533,  9545,  9551,  9557,  9563,  9569,  9575,  9581,  9587,
    9593,  9599,  9605,  9611,  9617,  9623,  9629,  9635,  9641,  9649,
    9670,  9677,  9683,  9690,  9697,  9704,  9711,  9717,  9723,  9728,
    9734,  9741,  9747,  9753,  9759,  9765,  9771,  9789,  9795,  9801,
    9808,  9815,  9830,  9836,  9842,  9848,  9854,  9861,  9867,  9873,
    9879,  9885,  9891,  9899,  9912,  9918,  9924,  9930,  9936,  9944,
    9950,  9962,  9968,  9974,  9982,  9992,  9998, 10014, 10020, 10027,
   10034, 10041, 10048, 10055, 10059, 10079, 10078, 10151, 10191, 10193,
   10198, 10199, 10203, 10204, 10208, 10209, 10213, 10220, 10228, 10254,
   10260, 10266, 10272, 10278, 10284, 10293, 10300, 10302, 10299, 10309,
   10320, 10326, 10332, 10338, 10344, 10350, 10356, 10362, 10368, 10375,
   10374, 10394, 10393, 10408, 10419, 10427, 10443, 10444, 10449, 10454,
   10457, 10460, 10459, 10476, 10478, 10484, 10483, 10500, 10502, 10504,
   10506, 10508, 10510, 10512, 10514, 10516, 10518, 10520, 10525, 10526,
   10530, 10537, 10545, 10546, 10550, 10557, 10565, 10566, 10570, 10571,
   10575, 10583, 10594, 10595, 10604, 10615, 10616, 10622, 10623, 10643,
   10645, 10649, 10647, 10664, 10662, 10680, 10678, 10685, 10694, 10692,
   10710, 10709, 10719, 10730, 10728, 10747, 10746, 10757, 10768, 10769,
   10770, 10778, 10779, 10783, 10798, 10798, 10813, 10853, 10926, 10937,
   10942, 10934, 10961, 10981, 10989, 10981, 10998, 10997, 11020, 11037,
   11020, 11044, 11048, 11074, 11075, 11080, 11083, 11084, 11085, 11089,
   11090, 11095, 11094, 11100, 11099, 11107, 11108, 11111, 11113, 11113,
   11117, 11117, 11122, 11123, 11127, 11129, 11134, 11135, 11139, 11150,
   11163, 11164, 11165, 11166, 11167, 11168, 11169, 11170, 11171, 11172,
   11173, 11174, 11178, 11179, 11180, 11181, 11182, 11183, 11184, 11185,
   11186, 11190, 11191, 11192, 11193, 11196, 11198, 11199, 11203, 11204,
   11212, 11214, 11218, 11220, 11219, 11233, 11236, 11235, 11250, 11256,
   11271, 11273, 11277, 11279, 11284, 11285, 11305, 11336, 11340, 11341,
   11345, 11358, 11360, 11365, 11364, 11399, 11401, 11406, 11407, 11408,
   11413, 11419, 11423, 11424, 11428, 11435, 11442, 11449, 11459, 11486,
   11490, 11496, 11502, 11512, 11516, 11526, 11527, 11528, 11529, 11530,
   11531, 11535, 11536, 11537, 11538, 11539, 11543, 11544, 11545, 11546,
   11547, 11551, 11552, 11553, 11554, 11558, 11563, 11564, 11567, 11570,
   11569, 11603, 11604, 11608, 11616, 11629, 11629, 11639, 11640, 11644,
   11663, 11703, 11702, 11715, 11723, 11714, 11725, 11737, 11749, 11748,
   11766, 11765, 11776, 11777, 11776, 11793, 11800, 11821, 11842, 11854,
   11859, 11858, 11868, 11874, 11881, 11886, 11891, 11901, 11902, 11906,
   11917, 11930, 11931, 11935, 11946, 11947, 11951, 11952, 11955, 11957,
   11960, 11961, 11962, 11966, 11967, 11975, 11983, 11974, 11993, 12000,
   11992, 12010, 12022, 12023, 12036, 12040, 12041, 12057, 12058, 12062,
   12071, 12072, 12073, 12075, 12074, 12085, 12086, 12090, 12091, 12093,
   12092, 12096, 12095, 12101, 12102, 12106, 12107, 12111, 12121, 12122,
   12126, 12127, 12132, 12131, 12145, 12146, 12150, 12155, 12163, 12164,
   12172, 12174, 12174, 12182, 12190, 12181, 12212, 12213, 12217, 12225,
   12226, 12230, 12240, 12241, 12248, 12247, 12263, 12262, 12276, 12275,
   12287, 12286, 12300, 12301, 12305, 12318, 12334, 12335, 12339, 12340,
   12344, 12345, 12346, 12351, 12350, 12372, 12374, 12377, 12379, 12382,
   12383, 12386, 12390, 12394, 12398, 12402, 12406, 12410, 12414, 12418,
   12426, 12429, 12439, 12438, 12453, 12460, 12468, 12476, 12484, 12492,
   12500, 12507, 12509, 12511, 12520, 12524, 12529, 12528, 12534, 12533,
   12538, 12547, 12554, 12559, 12561, 12563, 12565, 12567, 12575, 12586,
   12594, 12596, 12604, 12611, 12618, 12628, 12635, 12641, 12650, 12658,
   12662, 12666, 12673, 12680, 12686, 12693, 12700, 12705, 12710, 12718,
   12720, 12722, 12727, 12728, 12731, 12733, 12737, 12738, 12742, 12743,
   12747, 12748, 12752, 12753, 12757, 12758, 12761, 12763, 12770, 12781,
   12780, 12796, 12795, 12802, 12803, 12804, 12805, 12806, 12810, 12811,
   12816, 12820, 12826, 12832, 12854, 12855, 12856, 12871, 12870, 12883,
   12892, 12882, 12894, 12898, 12899, 12911, 12910, 12932, 12933, 12938,
   12940, 12942, 12944, 12946, 12948, 12950, 12952, 12954, 12956, 12958,
   12960, 12962, 12967, 12968, 12973, 12972, 12982, 12983, 12987, 12987,
   12989, 12990, 12994, 12995, 13000, 12999, 13010, 13014, 13018, 13030,
   13040, 13041, 13042, 13048, 13060, 13072, 13082, 13092, 13059, 13100,
   13101, 13105, 13106, 13110, 13111, 13123, 13127, 13128, 13129, 13132,
   13134, 13138, 13139, 13143, 13148, 13155, 13160, 13167, 13169, 13173,
   13174, 13178, 13183, 13191, 13192, 13195, 13197, 13205, 13207, 13211,
   13212, 13213, 13217, 13219, 13224, 13225, 13234, 13235, 13239, 13240,
   13244, 13264, 13288, 13300, 13311, 13330, 13338, 13350, 13365, 13386,
   13387, 13388, 13397, 13398, 13399, 13400, 13415, 13421, 13427, 13433,
   13439, 13468, 13499, 13509, 13519, 13525, 13534, 13546, 13552, 13558,
   13574, 13575, 13579, 13588, 13604, 13608, 13659, 13663, 13681, 13685,
   13765, 13790, 13821, 13822, 13838, 13848, 13852, 13858, 13864, 13874,
   13880, 13889, 13899, 13900, 13930, 13943, 13959, 13975, 13992, 13993,
   14004, 14005, 14016, 14017, 14018, 14022, 14049, 14082, 14097, 14098,
   14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107, 14108,
   14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117, 14118,
   14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127, 14128,
   14129, 14130, 14131, 14132, 14133, 14134, 14135, 14136, 14137, 14138,
   14139, 14140, 14141, 14142, 14143, 14144, 14145, 14146, 14156, 14157,
   14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165, 14166, 14167,
   14168, 14169, 14170, 14171, 14172, 14173, 14174, 14175, 14176, 14177,
   14178, 14179, 14180, 14181, 14182, 14183, 14184, 14185, 14186, 14187,
   14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195, 14196, 14197,
   14198, 14199, 14200, 14205, 14206, 14207, 14208, 14209, 14210, 14211,
   14212, 14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221,
   14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231,
   14232, 14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241,
   14242, 14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251,
   14252, 14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261,
   14262, 14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271,
   14272, 14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281,
   14282, 14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291,
   14292, 14293, 14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301,
   14302, 14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311,
   14312, 14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321,
   14322, 14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331,
   14332, 14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341,
   14342, 14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351,
   14352, 14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361,
   14362, 14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371,
   14372, 14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381,
   14382, 14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391,
   14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399, 14400, 14401,
   14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14411,
   14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419, 14420, 14421,
   14422, 14423, 14424, 14425, 14426, 14427, 14428, 14429, 14430, 14431,
   14432, 14433, 14434, 14435, 14436, 14437, 14438, 14439, 14440, 14441,
   14442, 14443, 14444, 14445, 14446, 14447, 14448, 14449, 14450, 14451,
   14452, 14453, 14454, 14455, 14456, 14457, 14458, 14459, 14460, 14472,
   14471, 14491, 14490, 14497, 14496, 14506, 14505, 14516, 14515, 14521,
   14529, 14531, 14536, 14536, 14545, 14544, 14558, 14557, 14562, 14566,
   14567, 14568, 14572, 14573, 14574, 14575, 14579, 14580, 14581, 14582,
   14587, 14613, 14612, 14712, 14723, 14736, 14752, 14765, 14787, 14822,
   14864, 14892, 14938, 14952, 14953, 14954, 14955, 14959, 14977, 14995,
   14996, 15000, 15001, 15002, 15003, 15007, 15008, 15026, 15040, 15041,
   15042, 15048, 15054, 15066, 15065, 15081, 15082, 15086, 15087, 15091,
   15104, 15105, 15106, 15111, 15116, 15115, 15135, 15151, 15168, 15167,
   15206, 15207, 15211, 15212, 15216, 15217, 15218, 15219, 15221, 15220,
   15234, 15235, 15236, 15237, 15238, 15244, 15244, 15249, 15254, 15264,
   15274, 15278, 15287, 15287, 15292, 15298, 15309, 15320, 15328, 15330,
   15334, 15341, 15348, 15350, 15354, 15355, 15360, 15359, 15363, 15362,
   15366, 15365, 15369, 15368, 15371, 15372, 15373, 15374, 15375, 15376,
   15377, 15378, 15379, 15380, 15381, 15382, 15383, 15384, 15385, 15386,
   15387, 15388, 15389, 15390, 15391, 15392, 15393, 15394, 15395, 15396,
   15400, 15401, 15405, 15406, 15410, 15420, 15430, 15443, 15458, 15471,
   15484, 15496, 15501, 15509, 15514, 15522, 15540, 15560, 15572, 15585,
   15594, 15598, 15602, 15603, 15607, 15634, 15636, 15640, 15644, 15648,
   15655, 15656, 15660, 15661, 15665, 15666, 15670, 15671, 15677, 15683,
   15689, 15699, 15698, 15708, 15709, 15714, 15715, 15716, 15721, 15722,
   15723, 15727, 15728, 15732, 15744, 15753, 15763, 15772, 15786, 15787,
   15792, 15791, 15807, 15808, 15809, 15813, 15814, 15818, 15818, 15842,
   15843, 15847, 15848, 15849, 15853, 15857, 15864, 15867, 15865, 15881,
   15888, 15909, 15933, 15935, 15939, 15940, 15944, 15945, 15953, 15954,
   15955, 15956, 15957, 15963, 15969, 15979, 15981, 15983, 15988, 15989,
   15990, 15991, 15992, 15996, 15997, 15998, 15999, 16000, 16001, 16011,
   16012, 16017, 16030, 16043, 16045, 16047, 16052, 16057, 16059, 16061,
   16067, 16068, 16070, 16076, 16075, 16093, 16094, 16098, 16103, 16111,
   16111, 16137, 16136, 16153, 16157, 16162, 16167, 16166, 16178, 16179,
   16181, 16183, 16201, 16207, 16212, 16194, 16275, 16293, 16318, 16350,
   16355, 16363, 16386, 16314, 16452, 16472, 16485, 16495, 16451, 16516,
   16520, 16524, 16528, 16532, 16536, 16543, 16550, 16557, 16567, 16568,
   16572, 16573, 16574, 16578, 16579, 16584, 16586, 16585, 16591, 16592,
   16596, 16606
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM",
  "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFAULT_AUTH_SYM",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM",
  "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS",
  "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM",
  "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUGHLY", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "@3",
  "change", "@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "create", "@5", "@6", "@7", "@8",
  "@9", "@10", "@11", "@12", "@13", "server_def", "server_options_list",
  "server_option", "event_tail", "@14", "ev_schedule_time", "@15",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "@16",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "@17",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "@18", "@19", "@20",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "get_diagnostics", "which_area", "diagnostics_information",
  "statement_information", "statement_information_item",
  "simple_target_specification", "statement_information_item_name",
  "condition_number", "condition_information",
  "condition_information_item", "condition_information_item_name",
  "sp_decl_idents", "sp_opt_default", "@21", "sp_proc_stmt",
  "sp_proc_stmt_if", "@22", "sp_proc_stmt_statement", "@23",
  "sp_proc_stmt_return", "@24", "sp_proc_stmt_unlabeled", "@25",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@26", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@27", "@28", "@29", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@30", "@31",
  "searched_case_stmt", "@32", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@33", "@34",
  "searched_when_clause", "@35", "@36", "else_clause_opt",
  "sp_labeled_control", "@37", "sp_opt_label", "sp_labeled_block", "@38",
  "sp_unlabeled_block", "@39", "sp_block_content", "@40",
  "sp_unlabeled_control", "@41", "@42", "@43", "@44", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@45", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "@46",
  "create3", "@47", "@48", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "@49", "have_partitioning", "partition_entry", "@50",
  "partition", "part_type_def", "@51", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "@52", "@53", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "@54", "part_name",
  "opt_part_values", "@55", "@56", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "@57", "@58",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@59", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@60", "@61", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "@62", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@63", "type", "@64", "@65", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "@66", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "@67", "@68", "@69", "@70", "@71", "@72", "@73",
  "alter_user_list", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "@74", "@75",
  "@76", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "@77", "add_part_extra", "reorg_partition_rule",
  "@78", "reorg_parts_rule", "@79", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "@80", "@81", "@82", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "opt_restrict", "opt_place", "opt_to", "slave", "@83",
  "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option",
  "slave_connection_opts", "slave_user_name_opt", "slave_user_pass_opt",
  "slave_plugin_auth_opt", "slave_plugin_dir_opt",
  "opt_slave_thread_option_list", "slave_thread_option_list",
  "slave_thread_option", "slave_until", "slave_until_opts", "checksum",
  "@84", "opt_checksum_type", "repair", "@85", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "@86",
  "binlog_base64_event", "check", "@87", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@88",
  "opt_no_write_to_binlog", "rename", "@89", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "@90",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "@91",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "@92", "cache_keys_spec", "@93",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "@94",
  "select_part2", "@95", "@96", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@97", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "@98", "@99", "@100",
  "variable", "@101", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "@102", "gorder_list",
  "in_sum_expr", "@103", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "@104", "@105", "@106", "@107", "@108", "@109", "@110",
  "normal_join", "opt_use_partition", "use_partition", "table_factor",
  "@111", "select_derived_union", "@112", "@113", "select_init2_derived",
  "select_part2_derived", "@114", "@115", "select_derived", "@116",
  "select_derived2", "@117", "@118", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "@119", "@120",
  "index_hints_list", "opt_index_hints_list", "@121", "opt_key_definition",
  "@122", "opt_key_usage_list", "key_usage_element", "key_usage_list",
  "using_list", "interval", "interval_time_stamp", "date_time_type",
  "table_alias", "opt_table_alias", "opt_all", "where_clause", "@123",
  "having_clause", "@124", "opt_escape", "group_clause", "group_list",
  "olap_opt", "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "@125", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "@126",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "@127", "select_var_list", "select_var_ident",
  "into", "@128", "into_destination", "@129", "@130", "do", "@131", "drop",
  "@132", "@133", "@134", "@135", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "drop_ts_options_list",
  "drop_ts_options", "drop_ts_option", "insert", "@136", "@137", "replace",
  "@138", "@139", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "@140", "fields", "insert_values",
  "@141", "@142", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "@143", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "@144", "update", "@145", "@146",
  "update_list", "update_elem", "insert_update_list", "insert_update_elem",
  "opt_low_priority", "delete", "@147", "single_multi", "@148", "@149",
  "@150", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "@151",
  "opt_table_sym", "opt_profile_defs", "profile_defs", "profile_def",
  "opt_profile_args", "show", "@152", "show_param", "@153", "@154",
  "show_engine_param", "master_or_binary", "opt_storage", "opt_db",
  "opt_full", "from_or_in", "binlog_in", "binlog_from", "wild_and_where",
  "describe", "@155", "@156", "explanable_command", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "@157",
  "flush_options", "@158", "@159", "opt_flush_lock", "@160",
  "flush_options_list", "flush_option", "opt_table_list", "reset", "@161",
  "reset_options", "reset_option", "@162", "slave_reset_options", "purge",
  "@163", "purge_options", "purge_option", "kill", "kill_option", "use",
  "load", "@164", "@165", "@166", "@167", "data_or_xml", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys_nonewline",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "@168", "start_option_value_list", "@169", "@170", "@171",
  "start_option_value_list_following_option_type", "@172",
  "option_value_list_continued", "option_value_list", "@173", "@174",
  "option_value", "@175", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "@176", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "@177",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "@178", "handler", "@179", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "@180",
  "handler_rkey_mode", "revoke", "@181", "revoke_command", "grant", "@182",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "@183", "@184", "@185",
  "@186", "opt_and", "require_list", "require_list_element", "grant_ident",
  "user_list", "grant_list", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin", "@187",
  "opt_work", "opt_chain", "opt_release", "opt_savepoint", "commit",
  "rollback", "savepoint", "release", "union_clause", "union_list", "@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "@191",
  "view_list_opt", "view_list", "view_select", "@192", "view_select_aux",
  "@193", "create_view_select_paren", "create_view_select", "@194",
  "view_check_option", "trigger_tail", "@195", "@196", "@197", "udf_tail",
  "sf_tail", "@198", "@199", "@200", "@201", "@202", "sp_tail", "@203",
  "@204", "@205", "@206", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@207",
  "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   641,   642,   643,   642,   642,   644,   644,   645,   645,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   647,   648,   648,   649,   650,   650,   652,   651,
     653,   653,   654,   654,   655,   657,   656,   659,   658,   660,
     660,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   662,   662,   662,   663,   664,   664,   664,   664,
     666,   665,   667,   668,   665,   669,   670,   665,   671,   672,
     665,   673,   665,   674,   665,   665,   665,   665,   665,   675,
     676,   676,   677,   677,   677,   677,   677,   677,   677,   679,
     678,   681,   680,   680,   682,   682,   682,   682,   683,   683,
     684,   684,   685,   685,   686,   686,   687,   687,   689,   688,
     690,   690,   690,   690,   690,   690,   690,   690,   690,   690,
     690,   690,   690,   691,   692,   692,   693,   693,   694,   694,
     695,   695,   695,   695,   695,   695,   695,   696,   696,   696,
     697,   697,   699,   698,   700,   700,   701,   701,   702,   702,
     703,   703,   704,   704,   705,   706,   707,   707,   708,   708,
     709,   710,   710,   710,   710,   711,   711,   712,   712,   713,
     713,   715,   714,   714,   716,   714,   717,   714,   718,   718,
     719,   719,   720,   721,   721,   722,   723,   723,   724,   724,
     724,   724,   724,   725,   726,   726,   727,   727,   728,   728,
     729,   729,   730,   730,   730,   731,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   731,   731,   732,   733,   734,
     734,   735,   735,   736,   736,   737,   738,   738,   739,   739,
     740,   741,   741,   742,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   744,   744,   745,
     746,   745,   747,   747,   747,   747,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   749,   748,   751,   750,   753,
     752,   755,   754,   756,   757,   758,   760,   759,   761,   762,
     762,   762,   763,   763,   765,   766,   767,   764,   768,   768,
     768,   769,   769,   771,   772,   770,   774,   773,   775,   775,
     776,   776,   778,   779,   777,   781,   782,   780,   783,   783,
     785,   784,   786,   786,   788,   787,   790,   789,   792,   791,
     793,   794,   795,   793,   796,   797,   793,   798,   798,   799,
     799,   799,   800,   801,   802,   803,   803,   804,   804,   805,
     806,   807,   807,   809,   808,   810,   810,   810,   811,   811,
     811,   812,   812,   813,   813,   813,   814,   814,   814,   814,
     814,   814,   814,   814,   815,   815,   816,   816,   816,   817,
     817,   817,   817,   817,   818,   818,   819,   819,   819,   820,
     820,   820,   820,   820,   820,   820,   821,   821,   822,   822,
     822,   823,   823,   823,   824,   825,   826,   827,   828,   829,
     829,   829,   830,   831,   832,   833,   834,   835,   836,   837,
     838,   839,   839,   840,   840,   841,   841,   841,   841,   842,
     843,   842,   844,   845,   844,   846,   844,   847,   848,   848,
     850,   849,   851,   853,   852,   854,   855,   856,   855,   855,
     855,   855,   855,   857,   857,   858,   858,   859,   859,   860,
     860,   861,   862,   863,   864,   865,   865,   866,   867,   866,
     868,   866,   869,   869,   870,   871,   872,   872,   873,   873,
     874,   874,   876,   875,   877,   878,   879,   878,   880,   878,
     881,   881,   882,   882,   883,   883,   885,   886,   884,   887,
     887,   888,   888,   889,   889,   890,   890,   892,   891,   893,
     894,   894,   895,   895,   896,   896,   896,   896,   896,   896,
     896,   896,   898,   899,   897,   900,   900,   901,   901,   902,
     902,   903,   903,   904,   904,   905,   905,   906,   907,   907,
     908,   908,   909,   909,   910,   910,   910,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   912,   911,   911,   911,
     911,   911,   911,   911,   911,   911,   911,   911,   913,   914,
     915,   916,   917,   917,   917,   917,   917,   917,   918,   918,
     918,   919,   919,   920,   920,   920,   920,   921,   922,   922,
     923,   923,   924,   924,   925,   925,   925,   925,   925,   925,
     926,   926,   927,   928,   928,   929,   931,   930,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   933,   932,   934,   932,   932,   932,   935,
     935,   935,   935,   935,   935,   935,   935,   936,   937,   937,
     938,   938,   939,   939,   939,   939,   939,   940,   940,   940,
     940,   940,   941,   941,   941,   942,   942,   942,   943,   944,
     944,   945,   945,   945,   946,   946,   947,   947,   948,   948,
     948,   949,   949,   949,   949,   950,   950,   951,   951,   952,
     952,   953,   953,   954,   954,   954,   954,   954,   954,   954,
     954,   954,   954,   954,   954,   954,   954,   954,   954,   954,
     955,   956,   957,   957,   958,   958,   959,   959,   960,   960,
     961,   961,   962,   962,   963,   963,   964,   965,   965,   966,
     966,   967,   967,   968,   968,   968,   969,   969,   969,   970,
     970,   970,   970,   970,   970,   970,   971,   971,   973,   972,
     974,   974,   975,   976,   976,   976,   976,   977,   978,   979,
     979,   980,   981,   981,   982,   982,   983,   983,   984,   985,
     985,   986,   986,   987,   987,   987,   987,   988,   988,   988,
     988,   988,   989,   989,   989,   989,   989,   990,   991,   991,
     992,   992,   993,   993,   994,   994,   994,   995,   995,   996,
     997,   998,   999,   999,  1000,  1000,  1001,  1001,  1002,  1002,
    1003,  1003,  1004,  1004,  1005,  1005,  1006,  1006,  1007,  1007,
    1008,  1008,  1009,  1010,  1010,  1011,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1015,  1015,  1016,  1016,  1018,  1017,
    1019,  1017,  1017,  1020,  1017,  1021,  1017,  1022,  1017,  1023,
    1017,  1024,  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1025,
    1025,  1026,  1026,  1026,  1026,  1027,  1027,  1028,  1028,  1029,
    1029,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1031,  1030,  1030,  1032,  1030,  1033,  1030,  1030,  1030,
    1030,  1030,  1034,  1035,  1035,  1037,  1036,  1038,  1038,  1038,
    1040,  1039,  1041,  1042,  1041,  1043,  1043,  1044,  1045,  1045,
    1046,  1047,  1047,  1047,  1048,  1047,  1049,  1050,  1047,  1047,
    1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,  1047,
    1047,  1047,  1047,  1047,  1051,  1051,  1051,  1051,  1051,  1052,
    1052,  1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,  1056,
    1057,  1057,  1057,  1058,  1058,  1058,  1058,  1060,  1059,  1059,
    1061,  1062,  1062,  1063,  1063,  1064,  1064,  1064,  1065,  1066,
    1066,  1067,  1067,  1068,  1068,  1069,  1069,  1070,  1070,  1071,
    1071,  1072,  1072,  1073,  1073,  1074,  1074,  1074,  1074,  1074,
    1076,  1075,  1077,  1077,  1077,  1079,  1078,  1080,  1080,  1081,
    1081,  1082,  1082,  1082,  1084,  1083,  1085,  1087,  1086,  1088,
    1088,  1089,  1089,  1090,  1090,  1090,  1090,  1090,  1090,  1092,
    1091,  1093,  1093,  1093,  1095,  1094,  1094,  1096,  1096,  1097,
    1097,  1098,  1100,  1099,  1101,  1101,  1102,  1102,  1103,  1104,
    1105,  1105,  1107,  1106,  1108,  1108,  1109,  1109,  1110,  1111,
    1113,  1112,  1115,  1114,  1116,  1116,  1117,  1117,  1118,  1119,
    1119,  1120,  1120,  1121,  1121,  1123,  1122,  1125,  1126,  1124,
    1127,  1127,  1127,  1127,  1127,  1128,  1128,  1129,  1129,  1130,
    1130,  1131,  1131,  1131,  1132,  1132,  1132,  1133,  1133,  1133,
    1134,  1134,  1135,  1136,  1137,  1137,  1137,  1137,  1137,  1138,
    1138,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1140,  1140,  1140,  1140,  1140,  1140,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1143,  1143,  1144,
    1144,  1145,  1145,  1146,  1146,  1147,  1147,  1147,  1147,  1147,
    1147,  1148,  1148,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1153,  1153,  1153,
    1153,  1153,  1153,  1153,  1153,  1155,  1154,  1154,  1156,  1156,
    1157,  1157,  1158,  1158,  1159,  1159,  1160,  1160,  1161,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1163,  1164,  1162,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1165,
    1162,  1167,  1166,  1168,  1168,  1168,  1169,  1169,  1170,  1170,
    1171,  1172,  1171,  1173,  1173,  1175,  1174,  1176,  1176,  1176,
    1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1177,  1177,
    1178,  1178,  1179,  1179,  1180,  1180,  1181,  1181,  1182,  1182,
    1183,  1183,  1184,  1184,  1185,  1186,  1186,  1187,  1187,  1188,
    1188,  1189,  1188,  1190,  1188,  1191,  1188,  1188,  1192,  1188,
    1193,  1188,  1188,  1194,  1188,  1195,  1188,  1188,  1196,  1196,
    1196,  1197,  1197,  1198,  1200,  1199,  1199,  1199,  1201,  1202,
    1203,  1201,  1204,  1206,  1207,  1205,  1209,  1208,  1211,  1212,
    1210,  1213,  1214,  1215,  1215,  1216,  1216,  1216,  1216,  1217,
    1217,  1219,  1218,  1220,  1218,  1221,  1221,  1222,  1223,  1222,
    1225,  1224,  1226,  1226,  1227,  1227,  1228,  1228,  1229,  1229,
    1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,
    1230,  1230,  1231,  1231,  1231,  1231,  1231,  1231,  1231,  1231,
    1231,  1232,  1232,  1232,  1232,  1233,  1233,  1233,  1234,  1234,
    1235,  1235,  1236,  1237,  1236,  1238,  1239,  1238,  1240,  1240,
    1241,  1241,  1242,  1242,  1243,  1243,  1243,  1244,  1245,  1245,
    1246,  1247,  1247,  1249,  1248,  1250,  1250,  1251,  1251,  1251,
    1252,  1252,  1253,  1253,  1254,  1255,  1255,  1255,  1256,  1256,
    1256,  1256,  1256,  1257,  1257,  1258,  1258,  1258,  1258,  1258,
    1258,  1259,  1259,  1259,  1259,  1259,  1260,  1260,  1260,  1260,
    1260,  1261,  1261,  1261,  1261,  1262,  1263,  1263,  1264,  1265,
    1264,  1266,  1266,  1266,  1267,  1269,  1268,  1270,  1270,  1271,
    1271,  1273,  1272,  1275,  1276,  1274,  1274,  1274,  1278,  1277,
    1280,  1279,  1281,  1282,  1279,  1279,  1279,  1279,  1279,  1279,
    1283,  1279,  1279,  1279,  1279,  1279,  1279,  1284,  1284,  1285,
    1286,  1287,  1287,  1288,  1289,  1289,  1290,  1290,  1291,  1291,
    1292,  1292,  1292,  1293,  1293,  1295,  1296,  1294,  1298,  1299,
    1297,  1300,  1300,  1300,  1300,  1301,  1301,  1302,  1302,  1303,
    1304,  1304,  1304,  1305,  1304,  1306,  1306,  1307,  1307,  1308,
    1307,  1309,  1307,  1310,  1310,  1311,  1311,  1312,  1313,  1313,
    1314,  1314,  1316,  1315,  1317,  1317,  1318,  1318,  1319,  1319,
    1320,  1321,  1320,  1323,  1324,  1322,  1325,  1325,  1326,  1327,
    1327,  1328,  1329,  1329,  1331,  1330,  1333,  1332,  1334,  1332,
    1335,  1332,  1336,  1336,  1337,  1337,  1338,  1338,  1339,  1339,
    1340,  1340,  1340,  1342,  1341,  1343,  1343,  1344,  1344,  1345,
    1345,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,
    1347,  1347,  1349,  1348,  1350,  1350,  1350,  1350,  1350,  1350,
    1350,  1350,  1350,  1350,  1350,  1350,  1351,  1350,  1352,  1350,
    1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,
    1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,
    1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1350,  1353,
    1353,  1353,  1354,  1354,  1355,  1355,  1356,  1356,  1357,  1357,
    1358,  1358,  1359,  1359,  1360,  1360,  1361,  1361,  1361,  1363,
    1362,  1364,  1362,  1365,  1365,  1365,  1365,  1365,  1366,  1366,
    1367,  1367,  1367,  1367,  1368,  1368,  1368,  1370,  1369,  1372,
    1373,  1371,  1371,  1374,  1374,  1375,  1374,  1376,  1376,  1377,
    1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,
    1377,  1377,  1378,  1378,  1380,  1379,  1381,  1381,  1383,  1382,
    1382,  1382,  1384,  1384,  1386,  1385,  1387,  1388,  1388,  1389,
    1390,  1390,  1390,  1391,  1393,  1394,  1395,  1396,  1392,  1397,
    1397,  1398,  1398,  1399,  1399,  1399,  1400,  1400,  1400,  1401,
    1401,  1402,  1402,  1403,  1403,  1403,  1403,  1404,  1404,  1405,
    1405,  1406,  1406,  1407,  1407,  1408,  1408,  1409,  1409,  1410,
    1410,  1410,  1411,  1411,  1412,  1412,  1413,  1413,  1414,  1414,
    1415,  1416,  1416,  1416,  1416,  1417,  1417,  1417,  1418,  1419,
    1419,  1419,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1421,  1421,  1421,  1421,  1421,  1422,  1422,  1422,
    1423,  1423,  1424,  1424,  1425,  1426,  1426,  1427,  1427,  1428,
    1428,  1428,  1429,  1429,  1429,  1429,  1430,  1430,  1430,  1431,
    1431,  1432,  1433,  1433,  1434,  1435,  1436,  1437,  1438,  1438,
    1439,  1439,  1440,  1440,  1440,  1441,  1441,  1441,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1445,
    1444,  1447,  1446,  1448,  1446,  1449,  1446,  1451,  1450,  1450,
    1452,  1452,  1454,  1453,  1455,  1453,  1457,  1456,  1456,  1458,
    1458,  1458,  1459,  1459,  1459,  1459,  1460,  1460,  1460,  1460,
    1461,  1463,  1462,  1462,  1462,  1462,  1462,  1462,  1462,  1462,
    1464,  1464,  1464,  1465,  1465,  1465,  1465,  1466,  1467,  1468,
    1468,  1469,  1469,  1469,  1469,  1470,  1470,  1470,  1471,  1471,
    1471,  1471,  1471,  1473,  1472,  1474,  1474,  1475,  1475,  1476,
    1477,  1477,  1477,  1477,  1479,  1478,  1480,  1480,  1481,  1480,
    1482,  1482,  1483,  1483,  1484,  1484,  1484,  1484,  1485,  1484,
    1486,  1486,  1486,  1486,  1486,  1488,  1487,  1489,  1489,  1489,
    1489,  1489,  1491,  1490,  1492,  1492,  1492,  1492,  1493,  1493,
    1494,  1494,  1495,  1495,  1496,  1496,  1498,  1497,  1499,  1497,
    1500,  1497,  1501,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1502,  1502,  1503,  1503,  1504,  1504,  1504,  1505,  1505,  1505,
    1505,  1506,  1506,  1507,  1507,  1508,  1508,  1508,  1508,  1508,
    1509,  1509,  1510,  1510,  1511,  1512,  1512,  1512,  1512,  1512,
    1513,  1513,  1514,  1514,  1515,  1515,  1516,  1516,  1516,  1516,
    1516,  1518,  1517,  1519,  1519,  1520,  1520,  1520,  1521,  1521,
    1521,  1522,  1522,  1523,  1524,  1524,  1525,  1526,  1527,  1527,
    1529,  1528,  1530,  1530,  1530,  1531,  1531,  1533,  1532,  1534,
    1534,  1535,  1535,  1535,  1536,  1536,  1537,  1538,  1537,  1539,
    1540,  1541,  1542,  1542,  1543,  1543,  1544,  1544,  1544,  1544,
    1544,  1544,  1544,  1544,  1544,  1545,  1545,  1545,  1546,  1546,
    1546,  1546,  1546,  1547,  1547,  1547,  1547,  1547,  1547,  1548,
    1548,  1549,  1550,  1551,  1551,  1551,  1552,  1553,  1553,  1553,
    1554,  1554,  1554,  1556,  1555,  1557,  1557,  1558,  1558,  1560,
    1559,  1562,  1561,  1561,  1563,  1563,  1565,  1564,  1566,  1566,
    1566,  1566,  1568,  1569,  1570,  1567,  1571,  1571,  1573,  1574,
    1575,  1576,  1577,  1572,  1579,  1580,  1581,  1582,  1578,  1583,
    1583,  1583,  1583,  1583,  1583,  1584,  1584,  1584,  1585,  1585,
    1586,  1586,  1586,  1587,  1587,  1588,  1589,  1588,  1590,  1590,
    1591,  1592
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,    14,     0,     0,    14,     0,     0,
      14,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     0,     6,     1,     1,
       1,     3,     1,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     0,     1,     0,     2,
       3,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       1,     1,     3,     1,     3,     3,     1,     2,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     0,
       0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     5,     0,     2,     0,
       3,     0,     2,     2,     2,     2,     0,     6,     2,     0,
       2,     1,     1,     3,     0,     0,     0,     7,     0,     2,
       2,     1,     1,     0,     0,     8,     0,     6,     1,     2,
       1,     2,     0,     0,     6,     0,     0,     6,     0,     2,
       0,     5,     0,     1,     0,     5,     0,     2,     0,     5,
       4,     0,     0,     8,     0,     0,     8,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     1,     1,     1,     1,     2,     3,     2,     4,     5,
       0,     5,     0,     0,     5,     0,     7,     1,     0,     1,
       0,     4,     0,     0,     3,     5,     6,     0,     4,     2,
       2,     2,     2,     0,     1,     0,     3,     0,     1,     1,
       3,     1,     4,     5,     5,     0,     2,     0,     0,     7,
       0,    10,     1,     3,     1,     1,     0,     2,     0,     3,
       1,     3,     0,     6,     1,     0,     0,     5,     0,     4,
       1,     1,     1,     3,     1,     3,     0,     0,     5,     1,
       3,     1,     1,     0,     3,     1,     3,     0,     4,     1,
       0,     1,     2,     1,     3,     4,     3,     3,     3,     4,
       4,     3,     0,     0,     6,     0,     1,     0,     1,     1,
       2,     1,     1,     0,     1,     1,     2,     1,     0,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     2,     2,     7,     8,     8,     8,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     4,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     2,     2,     2,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       3,     0,     2,     3,     0,     1,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     0,     1,     0,     1,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     3,     2,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     1,     2,     2,     1,     2,     2,     0,
       1,     1,     1,     3,     1,     3,     0,     1,     0,     4,
       1,     1,     1,     0,     1,     2,     1,     1,     2,     1,
       3,     3,     1,     1,     0,     2,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       1,     1,     1,     1,     3,     1,     1,     1,     4,     2,
       1,     4,     0,     1,     0,     2,     1,     3,     0,     6,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     4,     3,
       5,     0,     3,     1,     4,     0,     3,     0,     2,     0,
       1,     0,     2,     2,     2,     2,     1,     1,     1,     3,
       4,     0,     6,     4,     0,     5,     0,     6,     4,     3,
       1,     7,     3,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     8,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     2,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     1,
       0,     2,     1,     0,     1,     1,     1,     0,     6,     3,
       3,     0,     1,     1,     3,     3,     2,     2,     4,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     1,     1,
       3,     1,     1,     0,     2,     1,     3,     3,     3,     1,
       0,     5,     0,     1,     1,     0,     6,     0,     1,     1,
       2,     1,     1,     1,     0,     5,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     0,     6,     1,     1,     1,     3,     2,     3,
       1,     1,     0,     6,     1,     1,     1,     3,     3,     4,
       0,     6,     0,     2,     0,     4,     0,     2,     1,     2,
       4,     2,     3,     2,     3,     0,     3,     0,     0,     6,
       2,     1,     1,     2,     2,     8,     4,     0,     1,     2,
       1,     1,     1,     1,     0,     2,     4,     3,     1,     1,
       3,     4,     0,     0,     0,     2,     2,     1,     1,     0,
       2,     3,     3,     3,     2,     3,     4,     3,     4,     3,
       4,     1,     3,     4,     3,     3,     6,     1,     5,     6,
       5,     7,     6,     8,     5,     6,     4,     4,     5,     3,
       4,     1,     3,     3,     3,     3,     3,     3,     5,     5,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     3,     2,     2,     2,     2,     3,     3,
       5,     6,     4,     4,     7,     2,     6,     5,     6,     6,
       4,     4,     5,     4,     6,     2,     4,     4,     4,    10,
       6,     8,     6,     4,     4,     6,     4,     4,     4,     6,
       4,     7,     7,     7,     6,     6,     6,     6,     3,     4,
       6,     8,     2,     2,     8,     8,     6,     6,     1,     6,
       6,     8,     8,     6,     8,     6,     2,     8,     8,     2,
       2,     2,     4,     4,     4,     4,     3,     8,     6,     8,
       4,     6,     4,     4,     4,     6,     8,     4,     3,     6,
       4,     6,     5,     8,     7,    10,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     0,     4,     4,     2,     0,     3,     2,     3,     2,
       1,     2,     1,     2,     1,     2,     2,     2,     0,     1,
       1,     3,     1,     3,     1,     3,     0,     1,     0,     2,
       4,     5,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     0,     6,     0,     6,     0,     8,     4,     0,     8,
       0,    10,     6,     0,     8,     0,    10,     6,     1,     2,
       2,     0,     1,     5,     0,     5,     3,     5,     2,     0,
       0,     7,     1,     0,     0,     6,     0,     3,     0,     0,
       5,     0,     1,     0,     1,     0,     2,     3,     3,     1,
       1,     0,     7,     0,     7,     1,     2,     0,     0,     2,
       0,     2,     0,     1,     1,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     0,     2,
       0,     1,     0,     0,     3,     0,     0,     3,     2,     0,
       0,     4,     4,     2,     0,     1,     1,     3,     3,     1,
       2,     0,     1,     0,     4,     4,     2,     0,     1,     1,
       0,     1,     0,     1,     2,     1,     3,     3,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     0,
       6,     0,     1,     3,     1,     0,     2,     3,     1,     2,
       1,     0,     3,     0,     0,     7,     2,     1,     0,     3,
       0,     7,     0,     0,     8,     4,     6,     4,     4,     4,
       0,     6,     4,     4,     4,     5,     4,     1,     3,     1,
       2,     1,     3,     1,     0,     2,     0,     1,     0,     1,
       1,     2,     3,     1,     1,     0,     0,     8,     0,     0,
       6,     0,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     3,     4,     0,     3,     3,     1,     2,     2,     0,
       3,     0,     5,     3,     1,     3,     1,     3,     1,     1,
       0,     1,     0,     4,     0,     1,     3,     1,     1,     1,
       0,     0,     6,     0,     0,    11,     3,     1,     3,     3,
       1,     3,     0,     1,     0,     4,     0,     7,     0,     5,
       0,     6,     1,     3,     2,     4,     0,     2,     0,     2,
       1,     1,     1,     0,     4,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       1,     3,     3,     6,     2,     2,     0,     6,     0,     6,
       5,     2,     1,     5,     5,     2,     2,     1,     4,     3,
       2,     3,     2,     2,     1,     3,     4,     3,     3,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     0,     1,     0,     2,     0,     1,
       1,     1,     0,     2,     0,     2,     0,     2,     2,     0,
       4,     0,     4,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     3,     0,     1,     1,     0,     4,     0,
       0,     5,     1,     0,     3,     0,     3,     3,     1,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     3,     1,     0,     3,
       1,     2,     0,     1,     0,     3,     3,     2,     2,     3,
       0,     1,     1,     2,     0,     0,     0,     0,    22,     1,
       1,     0,     1,     0,     1,     1,     0,     1,     1,     0,
       2,     2,     1,     3,     4,     3,     3,     0,     2,     2,
       1,     3,     3,     0,     4,     0,     3,     1,     1,     0,
       3,     2,     3,     1,     1,     2,     0,     2,     3,     1,
       5,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     2,     2,     2,
       1,     1,     3,     5,     1,     1,     1,     1,     1,     3,
       4,     5,     1,     5,     3,     2,     1,     3,     2,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     0,     4,     4,     6,     2,     3,     3,     3,     5,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     2,
       2,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     4,     1,     1,     1,     3,     3,
       1,     1,     2,     2,     0,     3,     4,     3,     0,     7,
       1,     2,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     1,     1,     1,     1,     0,     4,     6,     6,     6,
       7,     5,     0,     4,     8,     8,     8,     6,     0,     1,
       1,     2,     0,     1,     1,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     2,
       0,     1,     3,     1,     2,     2,     2,     1,     3,     3,
       1,     1,     3,     1,     3,     4,     5,     4,     6,     1,
       0,     3,     3,     1,     1,     0,     2,     2,     2,     2,
       0,     2,     0,     3,     2,     1,     2,     2,     2,     2,
       2,     0,     3,     0,     1,     0,     3,     2,     0,     1,
       2,     0,     1,     4,     4,     5,     2,     3,     0,     1,
       0,     4,     0,     1,     1,     0,     1,     0,     2,     2,
       1,     0,     1,     1,     2,     3,     2,     0,     6,     3,
       0,     0,     0,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     1,     2,     1,     2,     3,     3,     3,
       0,     3,     3,     0,     7,     0,     3,     1,     3,     0,
       3,     0,     3,     4,     1,     3,     0,     3,     0,     3,
       4,     4,     0,     0,     0,    16,     8,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2601,  1081,  2531,     0,     0,     0,     0,     0,     0,
    2533,   123,    63,  1704,  1818,  1819,  1608,  1636,     2,     0,
    1081,   269,   173,     0,    75,  1645,     0,  1870,     0,     0,
    1081,   483,     0,  1864,     0,     0,  1081,  1648,  1854,   246,
     173,  2533,     0,  1127,  2339,  1742,     0,     0,     0,  1725,
       0,  2414,  1693,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1118,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1820,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   929,     0,     0,  1006,
       0,     0,     0,     0,   173,     0,   909,  2599,  2600,  2601,
    1083,  1082,     0,  2533,  1975,  1066,  1092,  2038,  2039,  2040,
    2041,  2042,  2043,  2044,  2045,  1989,  2046,  2048,  2047,  2049,
    2050,  1990,  1991,  2051,  2052,  2053,  2055,  2054,  2056,  1992,
    1993,  2057,  2058,  2059,  2060,  1994,  1995,  2061,  2063,  2062,
    1996,  2064,  2065,  2066,  2069,  2068,  2067,  1997,  2070,  1998,
    2071,  2072,  2073,  2074,  2075,  2076,  2077,  2079,  2078,  1999,
    2080,  2081,  2082,  2083,  2084,  2086,  2085,  2087,  2088,  2089,
    2000,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,  2098,
    2001,  2099,  2100,  2101,  2121,  2002,  2102,  2105,  2104,  2103,
    2106,  2107,  2108,  2110,  2109,  2111,  2112,  2003,  2113,  2114,
    2115,  2116,  2117,  2119,  2118,  2123,  2124,  2125,  2004,  2005,
    2120,  2122,  2319,  2126,  2128,  2127,  2129,  2131,  2130,  2006,
    2132,  2007,  2008,  2133,  2134,  1972,  2135,  1973,  2136,  2138,
    2139,  2140,  2145,  2009,  2137,  2141,  2142,  2143,  2144,  2146,
    2010,  2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,
    2156,  2178,  2167,  2169,  2160,  2162,  2163,  2165,  2161,  2168,
    2166,  2172,  2171,  2173,  2174,  2175,  2176,  2177,  2170,  2158,
    2164,  2159,  2179,  2180,  2157,  2181,  2182,  2183,  2184,  2185,
    2186,  2187,  2188,  2189,  2190,  2191,  2193,  2192,  2194,  2195,
    2196,  2197,  2198,  2199,  2201,  2200,  2202,  2203,  2204,  2206,
    2205,  2208,  2209,  2011,  2207,  2210,  2211,  2212,  2213,  2214,
    2215,  2012,  2013,  2014,  2216,  2217,  2015,  2218,  2220,  2219,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2016,  2017,  2228,
    2229,  2230,  2231,  2232,  2233,  2234,  2235,  2236,  2237,  2238,
    2239,  2240,  2241,  2243,  2242,  2244,  2245,  2246,  2247,  2248,
    2249,  2250,  2018,  2251,  2019,  2252,  2253,  2020,  2254,  2021,
    2255,  2256,  2257,  2258,  2022,  2259,  2260,  2261,  2263,  2264,
    2262,  2265,  2023,  2266,  2267,  2268,  2024,  2270,  2269,  2271,
    2025,  2273,  2274,  2026,  2272,  2028,  2275,  2276,  2027,  2029,
    2277,  2278,  2279,  2280,  2281,  2283,  2282,  2284,  2285,  2286,
    2030,  2287,  2288,  2289,  2290,  2031,  2291,  2292,  2293,  2294,
    2295,  2297,  2296,  2298,  2299,  2300,  2301,  2303,  2305,  2304,
    2302,  2306,  2307,  2308,  2309,  2312,  2313,  2314,  2315,  2310,
    2311,  2032,  2316,  2317,  2318,  2320,  2321,  2323,  2322,  2033,
    2034,  2324,  2325,  2037,  2326,  2327,  2330,  2328,  2329,  2332,
    2331,  2333,  2335,  2334,  2035,  2336,  2036,  2337,  2338,   192,
    1978,   175,  1979,  1988,     0,  2406,  2405,  1050,  1067,  2534,
    2535,   578,   859,     0,     0,   860,     0,   577,   858,   173,
    2601,   128,     0,   574,   575,     0,     0,     0,  1718,     0,
    1634,  1634,  1634,     0,     0,  1634,  1634,     0,  1637,  1634,
     173,  1634,     0,    68,  1827,   270,     0,  2442,     0,     0,
       0,  1971,     0,  1651,     0,  1871,  1872,     0,  1879,     0,
    1880,  1874,  2403,     0,     0,     0,     0,     0,   173,  1084,
       0,  1702,     0,   236,   245,   247,   248,   244,  2435,  2535,
    2546,  1119,  1125,  1137,     0,  1798,   248,  1037,  1021,  1037,
    1726,  1723,     0,     0,  1702,  1873,  2658,     0,     0,     0,
    2654,     0,  2659,     0,  1127,     0,     0,     1,     5,     0,
       0,  2116,  2005,  2220,  1811,  1809,  1966,     0,   900,   930,
       0,   905,     0,   903,  1984,  1983,  1982,     0,   916,   915,
     913,     0,   447,     0,     0,     0,  2610,   907,  1064,  2532,
       0,   194,     0,    77,     0,     0,     0,  2538,     0,     0,
       0,     0,   127,     0,     0,     0,   124,  1152,  1152,  2601,
    2603,  2605,   578,   576,     0,     0,     0,  1722,  1721,  1720,
       0,  1718,  2039,  1989,  2050,     0,  1939,     0,     0,     0,
    1406,     0,  1994,     0,  2064,  2066,  1999,     0,     0,  1159,
    1159,   731,     0,     0,     0,  2088,  2089,  1945,     0,     0,
       0,  1936,  1946,  2005,  2128,  2129,     0,  1938,  2134,     0,
       0,     0,     0,  2151,  1943,     0,     0,  2188,  2190,     0,
       0,  2194,  2195,  2196,  2197,  1922,  1214,     0,   731,  1935,
    1942,  2213,  1928,  2221,  2226,  2227,     0,  2236,     0,     0,
    2258,     0,  2264,  2262,  2268,     0,     0,  2294,     0,     0,
     731,  1921,  2312,  2313,  2314,  2315,     0,  1937,  2032,  1944,
       0,  2326,  1159,   731,   731,     0,     0,     0,  2333,  2335,
    2338,     0,     0,     0,  2570,  1213,     0,  1371,     0,  1288,
    1400,  1171,  1177,  1191,     0,  1206,  1224,  1225,  1227,  1326,
    1226,  1232,  1231,  1609,  1932,  1230,  1229,  1933,  1934,  1223,
    1956,  1978,  1955,     0,     0,     0,     0,     0,     0,     0,
       0,  1638,     0,     0,  1620,  1634,    70,     0,     0,     0,
    1968,  1515,  2417,  2418,     0,    76,  1653,  1654,  1652,  1005,
       0,  1869,     0,  1883,     0,  1079,   493,   484,     0,  1793,
    1792,     0,  1865,  2547,     0,     0,  1055,  1656,  1703,     0,
    1655,  1860,     0,  1858,  1855,  1857,   237,     0,     0,   267,
       0,  2541,  2538,  2548,  2584,  2578,  2577,  2581,  2580,  2582,
    1143,  2583,  1142,  2579,  2576,  1152,  1138,  1140,  1141,   775,
       0,     0,  2359,  2360,  2201,  2221,  2361,  2310,     0,     0,
    2380,  2340,  2345,  2341,     0,     0,   775,  1806,     0,     0,
    1806,     0,  1550,  1796,  1799,     0,  2363,  1774,   856,   855,
     854,  2364,  1792,     0,  1750,  1762,     0,  1727,  1767,     0,
    2365,     0,  1795,     0,  1550,  1806,     0,  1743,     0,     0,
       0,     0,   243,  1042,  1041,  1017,  1038,  1039,     0,     0,
    1020,  1022,  1023,  1019,     0,  2671,  2415,  1005,  1927,  1926,
    1976,  2655,  1925,  2663,  2665,  2651,  2653,  2660,  1121,     0,
    2552,     6,    62,     0,     0,  1824,  2608,  2609,  2607,   791,
       0,  1159,  1985,  2602,   176,   914,     0,   448,   176,     0,
       0,     0,     0,     0,   449,   450,   382,   918,     0,   898,
     911,     0,     0,   910,  2610,     0,     0,  1094,  1096,  1095,
    1112,   196,   193,   174,     0,  1052,  1627,  1629,  1069,  2537,
       0,     0,  2539,  2543,  1212,  1211,     0,   121,   126,     0,
       0,     0,  2509,   125,  2503,  2606,  1152,  1152,  1152,  2598,
       0,  2586,  2593,  2594,  2597,  2596,  2595,  2592,     0,  2585,
    2588,  2589,  2591,  2590,  2610,  2604,     0,   861,   861,   861,
       0,  1705,  1708,  1712,  1716,  1719,     0,     0,  1520,  1245,
    1520,  1520,  1520,  1407,     0,     0,     0,     0,     0,     0,
       0,     0,  1520,     0,  1282,  1255,     0,  1283,     0,     0,
       0,  1947,     0,     0,     0,  2570,     0,     0,     0,     0,
    1376,     0,     0,     0,  2570,     0,     0,     0,     0,     0,
    1402,  1404,  1955,  1520,     0,     0,  1520,     0,     0,     0,
       0,     0,  1164,   771,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1520,  1520,     0,
       0,  1520,  1296,  1949,     0,     0,     0,  1948,     0,     0,
       0,  1941,  1940,  1923,     0,  1299,  1301,  1300,     0,  1520,
    1520,     0,     0,     0,  1235,  1234,  1236,     0,     0,     0,
       0,     0,     0,  1210,  1209,  1208,  1207,     0,     0,     0,
    1215,     0,  1216,  1217,     0,  1218,  1219,  1220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1237,     0,     0,
       0,  1924,  1335,     0,  1635,  1615,  1622,  1617,     0,  1638,
    1618,  1626,   462,   461,  1643,  1644,  1624,  1639,  1640,     0,
    1623,  2501,  1619,     0,  1610,     0,    69,     0,  1850,     0,
       0,     0,  1846,  1848,  1847,     0,     0,  1851,     0,  1849,
    1828,  1832,  1838,  1829,     0,     0,   268,   271,   273,     0,
     276,  2452,  2467,  2468,  2464,  2469,  2487,  2470,  2474,     0,
    2466,  2458,     0,  2473,     0,  2462,  2471,     0,  2456,     0,
    2472,  2477,  2488,  2460,  2465,  2443,     0,  2450,  2454,  1516,
    1517,     0,  2416,     0,  1967,     0,     0,  1102,  1884,  1885,
    1881,  1515,  2404,  2407,     0,   494,     0,     0,   505,     0,
       0,    65,    66,     0,  1086,     0,  1085,  1089,     0,     0,
       0,  1659,  1649,  1658,  1441,  1861,  1862,     0,   235,   260,
     255,   263,   257,   259,   258,   264,   265,   266,   261,   256,
     262,   249,     0,  2452,     0,  2436,     0,  2542,     0,  2544,
    2561,  1126,  2549,  1149,  1128,  1148,     0,  1139,   774,     0,
     777,   779,  1678,  1679,   778,   787,     0,   776,     0,     0,
       0,  2366,     0,   783,   785,   784,  2375,   782,     0,     0,
    2350,  2371,  1802,     0,     0,  1773,     0,   578,     0,     0,
       0,     0,     0,     0,  1744,     0,     0,   621,     0,  1766,
    1551,  1800,  1801,  1806,     0,     0,  1806,     0,  1779,  1796,
       0,  1806,  1739,     0,     0,  1731,  1736,  1732,     0,  1738,
    1737,  1740,  1728,  1729,  1802,  1755,  1780,  1796,  1765,  1772,
       0,  1754,  1761,     0,  1770,  1796,  1796,  1806,  1806,  1043,
       0,  1026,  1027,     0,     0,  1724,  1444,     0,     0,  2652,
    2666,  2650,  2661,  2662,  2649,  1122,  2553,  1120,  2554,     0,
       7,     4,  1823,  1813,  1814,  1815,  1816,  1817,  1812,  1810,
    1825,  1826,   792,   791,   569,   572,   571,     0,     0,  1987,
       0,   906,     0,   436,   904,     0,     0,   414,   393,   414,
     451,     0,     0,   791,   921,     0,     0,   908,  1065,     0,
       0,   482,  1112,  1098,  1114,     0,   197,   199,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    78,    79,   101,  1054,  1053,     0,  1051,  1077,
    1076,  1074,     0,  1075,  1073,  1068,  1070,  1071,  2536,  2540,
     579,   791,   424,     0,   385,     0,     0,     0,     0,     0,
     578,     0,     0,  2587,   110,   862,     0,     0,     0,  1710,
    1631,  1441,  1633,  1966,     0,     0,     0,  1714,     0,     0,
    1521,  1520,     0,  1385,     0,     0,     0,     0,  1408,     0,
       0,     0,     0,     0,     0,     0,  1356,     0,  1385,  1160,
       0,   732,  1306,     0,     0,     0,     0,     0,     0,  1491,
    1492,  1493,  1494,  1502,  1495,  1496,  1497,  1504,  1509,  1498,
    1499,  1505,  1506,  1507,  1500,  1508,  1503,  1501,  1510,     0,
    1490,     0,     0,  1514,  1511,  1513,  1512,     0,  1377,  1369,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1520,     0,     0,     0,  1520,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1318,     0,     0,     0,     0,     0,  1520,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1278,     0,  1958,  1957,     0,     0,     0,   824,     0,  1239,
       0,  1238,  1453,     0,  2555,  2571,     0,  2366,  1372,  1374,
       0,  1162,  1161,  1163,  1174,  1167,  1172,  1165,  1169,     0,
    1221,  2045,  1175,     0,     0,  1203,  2570,  1529,  1204,  1189,
    1194,  1195,     0,  1192,  1193,     0,  1197,     0,  1196,  1200,
    1201,  1202,  1205,     0,     0,     0,     0,  1228,  1233,  1401,
    1152,  1959,     0,  1612,  1625,  1794,  1641,  1680,     0,  1007,
       0,     0,    71,    73,  1843,  1840,  1839,  1841,  1845,  1844,
    1842,     0,  1852,  2088,  2312,  2315,   280,     0,   253,   252,
     254,   277,     0,     0,  2453,  2451,  2485,  2484,  2489,     0,
    2486,  2482,  2475,  2510,  2479,     0,  2510,  2481,  2480,  2510,
    2476,  2483,  2510,  2448,     0,  1519,  2124,  2205,     0,  1522,
    2420,  1646,  2670,     0,  1882,     0,     0,     0,  1080,     0,
    1152,   492,   491,   490,   489,     0,   507,   487,   495,    67,
       0,     0,  1866,     0,     0,     0,     0,  1057,  1657,     0,
       0,  1630,  1442,  1863,  1859,  1856,     0,     0,  2451,     0,
    2448,  2545,  2563,  2562,  2550,  1152,  1541,  1153,  1153,  1955,
    2382,     0,  2377,  2376,     0,     0,     0,  2395,  2378,     0,
       0,  2344,  2383,  2384,  2387,     0,     0,     0,     0,     0,
    2381,  2310,  2346,  2347,     0,  2352,  2342,     0,     0,  1804,
    1807,  1808,     0,     0,  1788,  1782,  1781,  1777,  1783,  1778,
    1791,  1790,  1789,  1752,  1751,  1561,  1562,  1560,  1554,  1555,
    1559,  1558,  1747,  1797,  1787,  1785,  1775,  1806,  1786,  1784,
    1733,  1734,  1735,     0,  1550,     0,  1804,  1806,  1796,     0,
    1806,  1806,  1769,  1771,     0,  1029,  1040,  1025,  1024,  1462,
    1461,     0,  1415,     0,  1417,  1414,  1413,  1412,     0,  1461,
    2656,  2664,  2668,     0,  1550,  2560,  2558,   570,  1680,  1680,
       0,  1986,     0,     0,     0,     0,     0,     0,     0,   177,
     186,     0,     0,   391,   392,  1680,   390,   437,   438,   441,
     442,   443,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   444,  1680,  1680,   387,   415,   416,   419,   420,   421,
     422,   423,   383,     0,   388,     0,   919,  1003,  1680,  1003,
       0,  1680,  1680,  1003,  1680,     0,     0,  1680,  1680,     0,
       0,  1680,     0,     0,  1003,     0,  1680,     0,   990,     0,
       0,  1680,  1680,  1680,  1680,  1680,  1003,     0,     0,  1680,
     482,  1680,     0,     0,  1013,     0,     0,  1680,  1680,  1680,
    1680,     0,     0,  1680,     0,  1680,   937,   989,   582,   608,
     609,   899,   936,   938,   950,   478,     0,   968,   992,   993,
     991,     0,   923,   925,  2611,  2612,  2613,  1101,  1093,  1100,
    1097,  1112,  1110,  1099,   851,   850,     0,  1113,   195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1628,  1078,  1072,   122,   791,
    1680,  1680,  1680,  1680,   389,   425,   426,   429,   430,   431,
     432,   435,   433,   434,     0,     0,   401,     0,     0,  2504,
       0,  2644,     0,     0,     0,   175,   580,     0,     0,   863,
       0,     0,     0,     0,     0,  1706,     0,  1969,  1713,  1444,
    1717,  1716,     0,  1302,     0,  1349,     0,  1351,  1352,  1353,
       0,     0,     0,     0,     0,  1303,     0,  1253,  1304,  1305,
       0,     0,     0,     0,  1355,     0,   733,     0,     0,  1256,
    1257,  1250,  1242,     0,     0,  1328,     0,     0,  1258,     0,
       0,     0,     0,     0,  1329,  1403,     0,  1405,  1959,     0,
    1361,  1310,  1263,     0,  1359,     0,  1264,  1330,  1331,  1332,
    1312,  1313,     0,  1334,     0,  1314,     0,     0,  1317,     0,
       0,  1266,  1365,  1363,     0,     0,     0,     0,  1367,  1268,
       0,     0,     0,  1267,     0,     0,     0,     0,     0,     0,
       0,  1270,     0,  1251,  1364,  1366,  1320,     0,     0,     0,
       0,     0,  1279,     0,  2564,  1452,  2572,  1453,     0,     0,
    2566,  2556,  2561,  2569,  1243,     0,     0,  1960,  1168,  1173,
    1166,  1170,  2570,     0,     0,     0,     0,  1187,  1186,     0,
       0,     0,  2570,  1529,  1190,     0,     0,  1345,  1346,  1398,
       0,  1616,  1613,  1642,  1681,     0,  2502,  1009,  1008,  1621,
    1007,    74,     0,  1837,  1853,  1830,     0,   272,   281,   274,
     278,   279,   275,  2478,     0,  2459,     0,  2463,  2457,  2461,
       0,     0,  2449,     0,  2455,  2430,  2424,  2431,  2433,  2427,
    2432,  2434,  2425,  2426,  2421,  2428,  1523,  1552,     0,  1103,
    1105,  1106,  1104,  1112,     0,     0,  2410,  2411,  2409,  2408,
     497,     0,  1586,  1587,  1572,  1573,  1571,  1574,   506,  1575,
    1585,     0,   518,     0,     0,     0,  1868,  1867,     0,  1087,
    1090,  1091,  1062,  1061,  1063,  1056,  1058,  1059,   562,  1663,
       0,     0,     0,  1669,  1650,  1660,     0,     0,   250,     0,
       0,     0,     0,     0,     0,  1147,  1444,  1601,  1144,  1132,
    1552,  1542,  1131,  1154,  1150,     0,   790,   789,   788,   786,
       0,     0,     0,     0,  2389,  2390,     0,     0,  2367,  2368,
    2369,     0,  2373,  2349,  2350,     0,  2351,     0,  2401,  2402,
    2399,  2400,  2398,  2372,  1803,     0,  1756,     0,  1776,     0,
       0,  1749,     0,  1768,  1730,  1758,  1748,  1522,  1796,  1745,
    1746,     0,  1049,     0,  1045,  1044,     0,  1018,  1031,  1461,
    1444,     0,     0,  1438,  1463,     0,  1463,  1444,  1444,     0,
    1444,  1441,  1458,     0,     0,  2667,  1543,  2559,     0,     0,
     902,   180,   183,   181,     0,   182,     0,     0,   446,   445,
       0,  1794,   439,   134,   133,   135,   136,  1569,  1570,  1566,
    1567,  1565,  1568,   138,   137,   132,   917,     0,     0,     0,
    1794,   417,   394,   395,   398,   399,   400,     0,  1004,   892,
    1081,   972,     0,   654,   892,   847,   852,   852,   970,     0,
       0,  1081,     0,     0,     0,     0,     0,  1081,     0,     0,
       0,  1680,     0,   983,   932,     0,     0,     0,     0,     0,
     984,     0,     0,   933,  1680,     0,     0,     0,     0,     0,
       0,  1081,     0,     0,   480,     0,  1081,   482,  1016,  1015,
    1014,     0,  1081,  1081,     0,     0,     0,     0,   614,   615,
     613,     0,     0,   606,   583,   791,   934,   479,   935,   653,
       0,  1010,   650,   656,  1962,     0,     0,     0,   144,  2615,
       0,  1482,   198,   102,   100,    82,  1974,    86,    88,    81,
     106,  1579,  1580,  1578,  1576,  1577,   107,    84,    85,    87,
      91,    90,    92,    93,    96,    97,    94,    89,    95,    83,
      98,   108,   109,    80,     0,     0,     0,     0,  1794,   427,
       0,     0,  1680,   384,   402,   403,   406,   407,   408,   409,
     410,   413,   411,   412,     0,  2505,  2507,     0,     0,   378,
     377,     0,   139,  2638,     0,     0,   653,   111,   478,   581,
     584,   885,   887,   886,   877,   876,   112,   115,   118,  1632,
    1716,  1444,  1522,  1967,  1522,     0,  1715,     0,     0,  1350,
    1386,     0,  1409,     0,  1247,   745,   745,   729,  1394,   725,
     745,  1390,   729,  1392,     0,     0,     0,     0,     0,  1357,
    1354,     0,     0,     0,     0,     0,  1380,     0,     0,     0,
    1252,     0,  1340,  1362,  1360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1368,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   813,   819,   822,   823,   825,   817,     0,  1322,  1240,
    1152,  2573,  2575,  1123,     0,  2565,  2567,   894,  1373,     0,
    1184,  1180,     0,  1178,  1528,  1199,  1198,     0,     0,     0,
    1188,  1153,  1336,  1152,     0,  1399,  1961,   994,   460,   620,
    1611,    72,  1833,     0,     0,  2514,     0,  2513,     0,  2497,
    2500,  1966,     0,     0,     0,     0,     0,  2419,  1553,  1690,
       0,  1112,  1116,  1977,  1875,  2412,  2413,     0,   498,   499,
     501,  1153,   515,   493,     0,   485,   488,     0,   497,     0,
    1060,  1137,     0,  1682,  1667,  1674,  1668,     0,     0,     0,
    1666,  1951,  1950,  1957,  2548,     0,  1488,     0,     0,     0,
       0,     0,     0,  2551,  1522,  1522,  1595,     0,     0,  1129,
    1134,  1130,  1133,     0,  1151,  1158,  1157,  1952,  1959,  2379,
       0,     0,     0,     0,  2394,  2388,  2385,  2386,     0,  2348,
    2370,  2354,  2353,  2356,  2358,  1805,  1550,  1764,  1763,  1557,
    1556,  1741,  1550,  1760,  1806,     0,     0,     0,     0,     0,
    1033,     0,  2555,  1456,     0,  1440,  1439,  1464,     0,  1444,
    1463,  1463,     0,  1420,  1419,  1694,  1697,     0,  1418,  1515,
    1446,  1137,  2657,  2669,     0,   619,   618,   185,   184,   190,
     191,  1583,  1581,  1582,   452,   463,  1584,   464,   440,   131,
     453,   454,   418,     0,   396,   920,   655,   893,   955,     0,
       0,     0,   852,   649,   892,   861,   853,   892,   892,   999,
    1000,     0,     0,   593,   590,   974,   602,   953,   944,   954,
     965,   967,     0,   592,   616,     0,     0,   604,     0,   939,
     981,   982,  1007,   587,     0,     0,   629,   630,   628,   610,
     617,  1001,  1002,   588,   589,   976,     0,  1537,  1539,  1547,
     595,   594,     0,   591,     0,   952,   987,   960,     0,   627,
     625,   622,   624,   623,   626,   605,   597,   596,   599,   598,
     601,   600,   603,   949,     0,  1003,  1003,   969,     0,   637,
     638,   640,   641,  1965,     0,  1012,   971,     0,   642,   651,
     643,     0,     0,     0,   154,     0,     0,   922,     0,   147,
     145,   156,     0,     0,     0,  1485,     0,  1486,  1483,  1484,
       0,   103,   105,   459,   458,   457,   456,   428,     0,     0,
       0,  1794,   404,  2506,     0,     0,  2645,   381,   379,   380,
       0,     0,   200,   635,   636,   634,   633,     0,   467,     0,
     465,     0,   477,     0,  1886,   791,   585,     0,     0,     0,
       0,  1522,  1541,  1970,  1709,     0,  1280,  1410,     0,     0,
     746,  1387,   799,     0,  1396,     0,  1397,   727,   726,  1389,
    1391,  1395,  1393,  1246,  1254,  1327,  1249,  1248,     0,     0,
       0,  1286,  1308,     0,  1287,     0,  1378,     0,     0,  1260,
       0,  1262,     0,     0,  1342,  1311,  1333,  1289,  1315,     0,
    1265,  1241,     0,  1290,     0,  1295,  1293,     0,  1269,     0,
       0,  1276,     0,  1274,     0,  1275,     0,  1277,  1319,  1321,
       0,     0,   824,   810,   811,   812,     0,   814,   816,   818,
       0,     0,  1454,  2574,  1124,     0,     0,  1375,  1176,     0,
    1185,  1182,     0,  1179,  1154,  1347,  1337,  1614,   996,   995,
    1835,     0,  1831,   289,   284,   292,   286,   288,   287,   293,
     294,   295,   296,   290,   285,   291,   283,   282,  2511,     0,
    2522,     0,     0,     0,     0,     0,     0,  1524,     0,  1647,
    1107,  1112,  1116,     0,  1108,  1886,   502,     0,     0,     0,
     522,     0,   520,   496,     0,  1088,  1152,  1664,  1676,     0,
    1684,     0,     0,  1661,  1671,     0,     0,     0,  1670,   482,
       0,   251,     0,  2441,     0,     0,     0,  1552,  1530,     0,
       0,  1607,     0,  1602,  1145,     0,  1156,  1155,     0,  2397,
    2396,  2392,  2391,  2393,  2374,     0,     0,  1757,  1759,  1753,
    1048,  1047,  1046,  1030,     0,     0,  1035,  2561,  1515,  1448,
    1444,  1416,  1444,  1427,     0,     0,  1444,  1423,  1421,  1425,
       0,  1522,     0,  1480,  1152,  1954,  1544,  1547,   397,   957,
       0,   892,   848,   849,   861,     0,   861,   861,     0,     0,
     943,     0,  1069,     0,   948,   787,   611,   980,   979,     0,
     612,     0,   941,     0,  1548,  1549,  1540,   481,   940,   962,
     946,  1852,   973,   653,  1011,   829,   721,   670,   661,   745,
     664,   663,   707,   729,   675,   725,   723,   693,   725,   725,
     700,   699,   717,   703,   683,   799,   799,   682,   720,   799,
     704,   702,   706,     0,   708,   725,   713,   701,   705,   722,
     698,   695,   719,   745,   729,   729,   679,   718,   799,     0,
     711,   745,   749,   681,   799,   806,     0,     0,   745,   747,
    1964,   155,   143,     0,     0,   924,   926,     0,     0,   927,
    2617,     0,  2619,     0,  1115,     0,    99,     0,     0,   386,
     455,   405,  2508,     0,   211,  1152,     0,     0,   201,   203,
     204,     0,     0,     0,   580,  1888,  1887,   466,   565,   586,
       0,     0,     0,  1716,  1711,  1563,     0,  1411,     0,     0,
       0,     0,   793,   804,   802,   796,     0,   800,   801,  1388,
       0,     0,  1358,     0,     0,     0,  1381,     0,     0,     0,
       0,     0,     0,     0,  1244,     0,  1338,     0,     0,     0,
       0,     0,     0,  1273,  1271,  1272,   808,  1324,     0,   821,
     815,   813,   820,     0,  1552,  2555,   895,  1181,     0,  1348,
     998,   997,     0,     0,  2512,     0,  2447,  2499,  2498,  2515,
    2515,  2515,  1689,  1688,     0,  1687,  1691,  1109,  1117,     0,
     500,   503,     0,   495,     0,   519,     0,   486,   563,     0,
       0,     0,  1685,  1673,  2552,  1662,  1665,  1959,  1443,  1489,
       0,  2438,  2439,  2437,  1136,     0,  1525,  1606,  1603,     0,
    1596,  1598,  1600,     0,  1953,  2355,  2357,  1032,     0,     0,
    1028,  1449,  1447,  1457,     0,  1412,  1444,  1444,     0,  1412,
       0,     0,     0,  1696,  1541,  1698,  1445,  1477,  1459,     0,
    1546,     0,     0,   956,     0,     0,     0,     0,     0,     0,
     986,     0,  1010,   945,   966,   988,     0,   749,  1081,  1538,
     961,   963,  1057,     0,   639,     0,   833,   669,   662,   680,
     678,   734,   724,     0,   734,   734,   689,   707,   684,     0,
     799,   697,   688,   709,   712,   714,   716,   734,     0,   799,
     677,   676,   686,   673,   734,   757,     0,     0,     0,     0,
     753,     0,   827,     0,     0,   760,   657,   750,   752,     0,
       0,   710,   799,   666,   807,   806,   668,   799,   806,   734,
       0,   748,   734,     0,   141,   146,   157,   158,   912,  2616,
       0,  2614,     0,  1111,  1487,   104,     0,     0,   214,   212,
     213,     0,   207,   209,   204,  2632,     0,  2639,     0,     0,
    2637,   468,   470,   478,   566,     0,     0,  1547,   890,     0,
       0,     0,  1707,  1281,   743,   741,   744,   742,   795,   794,
     798,     0,   797,   806,   730,     0,  1284,  1285,  1309,     0,
    1379,  1370,  1307,     0,  1261,  1339,     0,     0,  1316,  1291,
    1294,  1292,  1297,  1298,     0,  1323,     0,  1144,  1144,   631,
    2568,  1183,  1836,  1834,     0,     0,  2520,  2520,  2520,  2429,
       0,     0,     0,  1152,   508,     0,   525,   524,   521,  1552,
    1675,  1677,  1683,  1672,  2440,     0,  1526,  1541,   780,  1599,
       0,  1146,  1034,     0,     0,  1428,     0,  1432,  1437,  1433,
       0,  1424,  1422,     0,  1563,  1481,     0,  1552,  1547,   959,
       0,   652,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   985,  1929,   975,   482,   977,   942,     0,   947,
     607,     0,   832,     0,   837,   738,   739,   740,   690,   735,
     737,     0,   692,   660,   685,   715,   691,     0,   687,   674,
     763,   764,   766,   765,   762,   772,   755,   773,     0,     0,
     767,   768,   769,   761,   751,   759,   754,   665,   667,   671,
     672,   658,     0,   659,  1963,   148,   928,   317,  2618,  2626,
       0,  2628,  2621,   129,  2636,  2646,   211,     0,     0,   152,
       0,   202,   787,   205,  2552,  1886,     0,   473,   864,     0,
     889,     0,   866,   868,  1564,   805,   803,     0,  1382,  1547,
       0,  1341,  1343,   809,     0,  1455,   632,  2523,     0,     0,
    2519,  2517,     0,  2518,  2516,  2490,     0,  2445,  2446,  2444,
    1686,     0,     0,     0,   516,     0,     0,   550,   564,  1534,
    1547,     0,  1552,     0,  1604,  1597,  1036,  1450,     0,     0,
       0,     0,     0,  1695,  1469,  1470,     0,     0,  1475,  1479,
    1460,  1545,   958,     0,     0,   864,     0,     0,  1931,  1930,
     951,  1010,     0,   830,     0,   834,   835,   836,     0,   828,
     736,     0,   896,     0,   756,   758,     0,   150,   343,     0,
     329,   315,     0,     0,     0,   319,   159,   162,   160,     0,
     161,   167,     0,   168,   169,   170,   171,   172,   163,   341,
     342,   166,   164,   165,     0,  1980,     0,  1981,  1127,     0,
       0,  2624,     0,  2620,  2548,   178,   208,     0,     0,   144,
     153,  2640,   770,   471,   469,     0,  2548,     0,  1680,   113,
     865,   881,   880,   870,  1547,     0,     0,   116,   867,   883,
     874,   119,   869,   882,   872,   728,     0,  1384,  1259,  1325,
    2496,  2495,  2494,  2491,     0,     0,     0,     0,     0,     0,
    2521,  2525,     0,  1441,  1153,     0,   509,     0,   512,   514,
     528,     0,  1680,     0,     0,  1680,  1680,  1680,  1680,   543,
     551,   553,     0,  1535,  1536,     0,  1531,  1533,  1527,  1588,
     781,  1889,  2555,  1429,     0,  1434,     0,  1426,  1465,  1465,
    1476,     0,   864,   644,   866,   868,   978,     0,   831,     0,
       0,   799,     0,   799,   149,     0,   142,     0,     0,   328,
     331,     0,     0,   334,   324,   323,   325,     0,   318,   317,
     317,   371,   322,   368,   367,   360,  2627,     0,  2552,     0,
       0,     0,  2622,  2647,   210,  1152,   156,     0,   475,   474,
     879,     0,   994,   871,   888,   891,     0,   994,   875,   994,
     873,  1547,  2492,  2526,  2529,  2527,  2528,  2530,  2524,  1692,
    1700,     0,  1876,     0,   517,   510,     0,     0,   526,     0,
    1680,  1680,     0,     0,     0,     0,     0,   523,   552,  1680,
    1547,     0,  1135,     0,  1897,  1451,     0,     0,     0,  1473,
    1471,   648,   647,   645,   646,     0,   843,     0,   842,     0,
     839,   838,   694,   897,   696,   151,   344,   355,   358,   350,
     330,     0,     0,     0,   320,   317,     0,   304,   302,   303,
     309,   310,   311,   312,   313,   314,   305,   308,   306,   307,
     317,     0,   219,     0,     0,  2625,  2623,     0,  2629,     0,
     188,   187,   179,     0,   317,  2633,     0,  2641,  2552,   878,
     114,   884,   117,   120,  1383,     0,     0,   780,   504,   516,
     513,   536,   529,   532,     0,   561,     0,     0,   557,   558,
     556,   554,   547,     0,   545,     0,  1532,  1589,     0,     0,
       0,     0,  1890,  1892,     0,  1605,  1431,  1436,     0,  1466,
       0,     0,     0,   964,   845,   846,   844,     0,     0,     0,
       0,   317,   351,     0,   326,     0,   335,     0,     0,   217,
     374,   372,   215,   362,   362,  2630,  2631,   189,  2648,     0,
     158,   178,   476,  1699,  1701,  1877,   511,   536,     0,   534,
       0,   530,   527,   531,   559,   560,     0,   544,     0,   555,
       0,     0,     0,     0,     0,  1891,     0,     0,  1898,  1900,
    1468,  1467,  1482,     0,     0,     0,   352,   358,   348,   356,
     317,     0,     0,   316,     0,   370,   218,     0,     0,     0,
     317,     0,   361,   363,   365,     0,   140,  2642,  1903,   533,
       0,   541,   537,   539,   542,   550,   549,   546,  1591,  1895,
    1896,     0,  1893,     0,     0,  1899,     0,     0,   841,   840,
       0,   349,     0,     0,   347,   327,   332,   317,   375,   317,
     229,   228,     0,   221,   297,   369,     0,   220,  2634,   317,
       0,  1889,   535,     0,     0,   548,  1594,     0,  1592,  1894,
    1902,  1901,  1474,  1472,   353,     0,   317,     0,   317,     0,
     317,     0,     0,     0,     0,     0,   216,   317,  2643,     0,
    1897,   540,   538,  1590,     0,     0,   345,   317,   333,   338,
       0,     0,   224,   298,   299,     0,   226,  2635,     0,  1905,
    1593,   317,   317,   334,   337,   376,   373,     0,   300,   222,
     223,   234,   233,     0,  1904,     0,  1909,   317,   317,   339,
     242,   240,   317,   230,   238,   232,     0,   239,     0,   227,
       0,     0,  1916,     0,   225,   241,   301,  1907,  1908,  1906,
    1911,     0,     0,  1913,  1914,     0,  1878,   231,  1915,  1910,
       0,  1917,  1919,     0,  1912,     0,  1152,  1918,     0,  1153,
    1920
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   599,  1441,    57,    58,    59,    60,    61,  1291,
      62,   806,  1216,  1742,  1743,    63,   542,    64,   994,  1512,
    1513,  3050,  3051,  1514,    65,  2126,  3087,  4142,  3088,  4147,
    3089,  4149,  1531,   510,   511,  1969,  1970,  1019,  3071,  3037,
    3855,  3041,  3967,  4106,  4009,  2052,  3409,  3856,  3857,  3976,
     537,  2124,  1461,  4133,  1949,  4242,  1950,    66,   631,   992,
    1485,  1486,  3427,  3428,  3689,  3429,  3681,  3682,  3683,  3684,
    4370,  4215,  4312,  4371,  4443,  4477,  4483,  4412,  4492,  4493,
    4494,  4481,   847,  4495,    67,   565,   566,   849,  1321,  1756,
    1322,    68,    69,   536,  1236,  1237,  1238,  1239,  2302,  1757,
    2297,  2298,  3206,  4413,  4479,  4498,  4216,  4217,  4113,  4218,
    3979,  4219,  4117,  4220,  3982,  4221,  4222,  4223,  4224,  4362,
    4225,  4112,  4405,  4212,  4213,  4364,  4459,  4474,  4226,  3989,
    4107,  4299,  3990,  4108,  4357,  4208,  4358,  4400,  4455,  4209,
    4300,  4403,  4303,  4227,  4233,  4372,  4228,  4234,  4229,  3994,
    4124,  4232,  4122,  4231,  4368,  4367,  4439,  2651,  3070,   618,
     619,   642,  2116,   620,  1008,   965,  1463,  1982,  1983,  2502,
    2503,  2633,  2634,  2635,  1974,  1975,  1976,  2104,  2105,  2106,
    1956,  1957,  1958,  1467,  1953,  1954,   621,   966,   976,  1977,
    1978,  1979,  2639,  2108,  2109,  2110,  2111,  1204,  1205,  2924,
    2657,  3080,  3874,  3437,  4016,  4248,  3081,  3082,  2577,  2992,
    2062,    70,   554,   827,  1288,  2353,  1289,  2355,  2807,  2808,
    2809,  1801,  1802,  3754,  1806,  2352,  3914,  4259,  4057,  4058,
    2811,  4056,  2815,  3231,  3232,  3524,  3756,  3917,  4264,  4167,
    4332,  4262,  4328,  4263,  4330,  4424,  4382,  4383,  4177,  4273,
    4274,  4336,  4385,  4069,  4070,  4071,  2373,  2821,  3759,  3695,
    2098,  1453,  1454,   512,   513,   514,   639,  2658,  2037,  2659,
    2660,  3014,  2039,  2040,  2778,  1376,  3005,  2979,  3737,  3077,
    3018,  3019,  3020,  3021,  3022,  3028,  2943,  2512,  2513,  2582,
    3031,  3872,  3613,  3628,  3393,  3394,  3395,  3396,  3397,  3398,
    3399,  3106,  3107,  3104,  1067,  3818,  3819,  3820,  3100,  3101,
    3662,  3646,  3647,  3648,  3873,   769,  3836,  3456,  1344,  1345,
    3924,  1355,  1356,  2397,  1842,  2398,  1457,  3457,  3458,  3459,
    3656,  3161,  3734,  3167,  3168,  3169,  2741,  2742,  2743,  2744,
    2745,  2241,  3649,  3030,  3606,  3811,  3814,  3959,  4200,  2514,
    2944,  2515,  2947,   916,   515,  2516,  2517,  1545,  1546,  4019,
    4027,  4031,  4020,  4032,  4028,  4021,  4022,  4023,  4034,  4030,
    2664,  3696,  3697,  2936,  3177,  3961,    71,  1473,   959,   968,
     964,   984,   626,  1474,   977,  2053,  2588,  3668,   608,  2041,
    3598,  3322,  3602,  2042,  2958,  2043,  3309,  3583,  2044,  3339,
    3600,  3808,  2959,  2960,  2045,  2046,  2047,  3321,  3331,  3951,
    3187,  3188,  3189,  2518,   125,  2289,  3026,  2561,    72,  1419,
      73,   930,   931,   932,  2447,  2448,  2890,  3286,  3560,   925,
     926,   927,  1915,  2445,    74,   634,  1518,    75,  1299,  2365,
    2366,  2367,    76,   985,    77,    78,   635,  1525,  1526,  1527,
      79,  1284,   132,    80,   835,  1294,  1296,  1297,    81,   630,
     986,   987,   988,   989,  2058,    82,  1793,  2329,  2330,  2331,
    2332,  1482,  2590,  1483,  1484,  2067,  3224,    83,    84,   596,
    2249,   571,   853,   572,   573,  1836,  2388,  3738,   865,   866,
     867,  2849,  1334,  1335,  1336,  2393,  2854,  1064,   770,   771,
     772,   773,  1158,  1159,  3650,   774,  1168,  1703,   775,   776,
     777,   778,   779,   780,  1730,  3133,  3134,  3476,  2276,  2277,
    2278,   781,  2163,  3118,  2177,   782,  1151,  1688,  1619,  3468,
    3126,  3719,  3888,  1562,  2146,  2694,  2774,  2243,  1089,  1090,
    1054,  2153,  1568,  1922,  1923,  1924,  1925,  1926,  3571,  3570,
    3572,  3928,  3776,  3930,  3780,  2458,  1821,  1822,  1927,  1928,
    2891,  3774,  4082,  2244,  2245,  2246,  3494,  2892,  3290,  2910,
    2911,  3787,  2449,  1929,  2898,  4189,  3937,  3938,  4292,  4291,
    3939,  3785,  3786,  3576,  3577,  3046,  3047,  3048,  2835,  1609,
    1610,  1617,  1271,  1272,  1563,  2327,  2796,  3767,  3921,  2267,
    3546,  3919,  4076,  2050,  2987,  2988,  2390,  2391,  2914,  3306,
    3336,  1379,  3739,  2798,  1888,  1889,  3702,  4482,  2746,  2606,
    2925,  2349,  2350,  4182,  4340,  4427,  4428,  3261,  3262,  3550,
    3551,  2392,  2846,  3263,  3768,  4081,    85,   519,    86,  1740,
    2282,  2777,  1213,  2294,   996,  1301,  1549,  1550,   794,   532,
    1206,  1207,  1208,    87,   543,  2328,    88,   561,  1819,   819,
     839,  1302,  1303,  2374,  2822,  2829,  2375,  2834,  3534,  2824,
    3237,  3238,  2284,  2285,  2825,  3240,  3531,  3514,  3515,  3219,
    3751,    89,   584,  3301,  2905,  2906,  4159,  4160,   840,    90,
     518,  1041,  2672,  1555,  2134,  1042,  1043,  2137,   660,   661,
      91,   934,   581,  1401,  1402,  1403,  1904,    92,   575,   917,
    2876,  2882,  1883,   831,  1209,  1383,   920,  1384,  1869,  2426,
    1365,    93,   955,   954,  1448,    94,   604,  1449,    95,   807,
    1230,  1752,  2782,  3192,  3502,  1231,  1232,  2295,    96,   562,
     844,   845,  1306,  1824,    97,   556,   832,  1812,    98,   547,
      99,   100,   823,  3225,  4257,  4378,   551,  1795,  1280,  3438,
    4184,  4282,  4283,  4285,  4348,  4349,  4421,  4486,  4509,  4502,
    4512,  4513,  4516,  4521,  4522,   784,   941,   785,  3802,   786,
     787,   788,  2830,  2831,  3307,   789,  2832,   790,  2937,   997,
    1552,   540,   490,  2595,   615,   942,  2804,   792,  3996,   962,
    1012,   492,   493,   101,   574,   881,  1360,  1350,  1359,  1862,
    2414,  1866,  2416,  2417,  3275,  2872,  3276,  2873,   921,  1858,
    1863,  2874,  1867,   884,  1851,  1852,  1853,  1854,  2865,  1848,
    2423,   102,   824,   497,  1282,  1283,  2338,   103,   583,   104,
    1273,  1789,  1790,  2324,  2795,  2325,   105,   850,  1325,   106,
     809,  1265,  2313,  1266,  1765,  1267,  1268,  1779,  1773,  1782,
    1776,  4044,  3904,  3905,  2792,  1212,  1013,  1014,  2305,  2786,
    2787,  3746,  3907,  3506,  4050,  4051,   107,   133,   500,   637,
    1003,  1328,   108,   109,   110,   111,  1331,  1436,  2384,  1437,
    2250,  1438,  1439,  1936,  1834,  1684,  1685,  3175,  1148,  1149,
    2253,  2750,  2751,   868,   646,  1029,  1021,   126,   127,   128,
     649,   650,   129,   982,   983,  2589,  3043,  3411,  3671,  3672,
    3861,  4004,  4000,  4001,  3998,  4003,  1023,  3868,  4319,  4447,
    1024,  1025,  3072,  3870,  4137,  4321,  4419,  1026,  2648,  3424,
    4005,  4244,   112,   943,   593,  1434,  1429,  1431,  1932,  2465,
     113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3845
static const int yypact[] =
{
    4561,  2250,   111, -3845,   482,   885, 47855,   943,   662,   662,
     684,  2954, -3845, -3845, -3845, -3845, -3845,  2882, -3845, 47855,
     111,  1248, -3845, 23883, -3845, -3845,   995,   137,    75,   662,
     111, -3845, 47855, -3845,   934,  1365,   111, -3845, -3845, 41715,
   -3845,   684, 47855, -3845, -3845, -3845, 41715,   -68,   941,   950,
    1068, -3845, -3845, 47855,  1014,  -141,  1553,  1556, -3845, -3845,
    1269, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, 24500, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845,  1489, 47855,  1558, 47855, -3845,
    1594, 47855, 39873, 47855, -3845,  1225,  1593, -3845, -3845,  1678,
   -3845, -3845,   662,   684, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845,  1186, -3845, -3845,  1254, -3845, -3845, -3845, -3845, -3845,
    1824,  1637, -3845,  1672, 39873, -3845, 47855, -3845, -3845, -3845,
    1112, -3845,  1344, -3845,  1355,  1675,  1679,  1699,   898, 11350,
    1723,  1723,  1723, 47855,  1743,  1723,  1723, 47855, -3845,  1723,
   -3845,  1723,   662, -3845, -3845, -3845,  1831, -3845, 47855,  1609,
     223,  -110, 39873,  1540, 47855, -3845, -3845, 11350, -3845,  1752,
   -3845, -3845, -3845,   662,  1956,  1823,   989, 47855, -3845, -3845,
     662,  1328,   731,  1384, -3845, -3845,  1548, -3845, -3845,   169,
   -3845, -3845, -3845,  1490, 26351,  6064,  1548,   566,  -108,   566,
   -3845, -3845, 47855,   662,  1751, -3845, -3845,   261,   261,   261,
   -3845,   261, -3845,   261, -3845,  -141,  1401, -3845, -3845,  1392,
   47855,   865,  1880,  1028, -3845, -3845,  1400,   -45, -3845,  1462,
   36803, -3845, 47855, -3845, -3845, -3845, -3845,  1692, -3845, -3845,
   -3845,  2578, -3845, 36803, 23883, 47855,  1539, -3845, -3845, -3845,
   23883,  1433, 47855, -3845, 23883, 23883,   932,    45,    72, 47855,
   47855,  1874, -3845,  2063, 36803,  1632, -3845,   306,  1161,  1678,
    2071, -3845,  1637, -3845, 47855, 47855, 47855, -3845, -3845, -3845,
   42329,   898,  1443,  1458,  1460, 15795, -3845,  1463,  1473,  1479,
   11350,  1484,  1497,  1500,  1504,  1506,  1518,  1523,  1536,  1545,
    1545,  1547,  1551,  1565,  1576,  -165,  1583, -3845,  1587,  1589,
    1600, -3845, -3845,  1603,  1617,  1619,  1625, -3845,  1629,  1639,
    1645, 11985,  1649,  1657, -3845, 20789,  1664,  1666,  1698,  1704,
    1712,  1716,  1725,  1733,  1740, -3845, -3845, 11350,  1547, -3845,
   -3845,  1747, -3845,  1755,  1757,  1759,  1764,  1768,  1771,  1785,
    1787,  1791,  1821,  1846,  1849,  1851,  1853,  1855,  1871,  1884,
    1547, -3845,  -152,  1886,  1888,  1074,  1896, -3845,  1898, -3845,
     275,  1906,  1545,  1547,  1547,  1918,  1922,  1926,  1938,  1940,
    1944, 15795, 15795, 15795, 11350, -3845, 47855, -3845, 47855, -3845,
    1426,  3136, -3845,  2606, 15795,   207, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  1607,  1696, -3845, -3845, -3845, -3845, -3845,
   -3845,  1967,  1597,  1997, 47855, 47855, 47855,  1904, 47855, 47855,
   39873,    57, 47855, 36803, -3845,  1723,  1742,  3225, 29431,  4313,
   -3845,   140, -3845, -3845, 47855, -3845, -3845, -3845, -3845,  2138,
    1847,  1426,  2326,   214, 23883, -3845,  1425, -3845,  -205, -3845,
   -3845,  2080, -3845, -3845, 36803, 23883, -3845, -3845, -3845, 21408,
   -3845, -3845,  2332, -3845,  1836, -3845, -3845,  1696,  3621, -3845,
    4586,  1994,    45,  1911, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845,  1868,  1490, -3845, -3845,    44,
    2048,  1925,   384,   465, 34347,   113,   522,  1106, 26967, 34961,
    1950, -3845, -3845, -3845,   152,  2431, -3845,    -8,  1972,  1233,
      -8, 37417,  2344,   212, -3845,   338, -3845,  2424, -3845, -3845,
   -3845, -3845,  2104,  2087, -3845, -3845,   343,  2379, -3845,  2470,
   -3845,    69, -3845,  2121,  2344,    -8,   212, -3845,  2362,  2490,
     121,  -114, -3845, -3845, -3845, -3845,  2013, -3845,   761,  2572,
   -3845,  2024, -3845, -3845, 23883, -3845, -3845,  2138, -3845, -3845,
   -3845,  2036, -3845,  2302,  2141, -3845, -3845,    64, -3845,  2045,
       9,  2535, -3845, 39873,  1098, 38031, -3845, -3845, -3845,  2568,
    2584,  1545,  2056, -3845, -3845, -3845,  2693, -3845, -3845,  2070,
    2603,  2603,  2603,  2709, -3845, -3845, -3845,  2083,  2336, -3845,
   -3845,  2265,  2154, -3845,  1539, 23883,  2519,  2126, -3845, -3845,
    2376, 11350, -3845, -3845,  4946,   176, -3845, -3845,   276, -3845,
    2712,  2341, -3845, -3845, -3845, -3845,  2621, -3845, -3845,  2693,
    2713,  2603,  2581,  2182, -3845, -3845, -3845, -3845, -3845, -3845,
     253, -3845, -3845, -3845, -3845, -3845, -3845, -3845,   273, -3845,
   -3845, -3845, -3845, -3845,  1539, -3845, 23883, -3845, -3845, -3845,
   23883, -3845,  2188, -3845,  2196, -3845, 11350, 11350,   347,  2770,
    2829,  2829,  2829,  1426,  2239, 11350, 11350, 11350, 11350, 11350,
   11350, 11350,   351,  2216, -3845, -3845,   -88, -3845,  2223, 11350,
   11350, -3845, 11350, 11350, 25117, -3845,  4415, 11350, 11350,   460,
    2723, 11350, 11350, 11350, 11350,  3532, 11350, 11350, 25117,  2852,
    2234, -3845,  2241,   352, 11350, 11350,  1404, 11350, 11350, 11350,
   11350, 11350, -3845, -3845, 11350, 11350, 11350, 11350, 15795, 11350,
   11350, 11350, 11350, 11350, 11350,  2251, 11350,  2829,  2829, 11350,
   11350,  1588, -3845, -3845, 11350,  2370,  2370, -3845, 11350,  8175,
   11350, -3845, -3845, -3845,  2259, -3845, -3845, -3845, 25117,  2829,
    2829, 11350, 11350, 11350,  2770,  2770,  2770,   220,  2262,   612,
   11350, 27583,  2264, -3845, -3845, -3845, -3845, 11350, 11350, 11350,
   -3845, 15795, -3845, -3845,   782, -3845, -3845, -3845, 12620, 15795,
   15795,  2240, 15795, 15795, 15795, 15795, 15795,  2646, 15795, 15795,
   16430, 17065, 15795, 15795, 15795, 15795,  1064,  2770, 39873, 15795,
   11350, -3845, -3845, 47855, -3845, -3845, -3845,  2270, 23883,    57,
   -3845, -3845, -3845, -3845, -3845, -3845,  2279,    57, -3845,  2761,
   -3845, -3845,  2283, 23883, -3845,  2281, -3845,  2651, -3845,  2653,
    2654,  2655, -3845, -3845, -3845,  2872,  2658, -3845,  2659, -3845,
   -3845,  2303, -3845, -3845, 17700, 39873, -3845,  2311, -3845,  2780,
   -3845,  2546,  2492,  2034, -3845, -3845, -3845, -3845, -3845,  2582,
   -3845, -3845,  2416, -3845,  2596, -3845, -3845,   389, -3845,    93,
   -3845, -3845, -3845, -3845, -3845, -3845,  2599,  2334, -3845, -3845,
   -3845, 47855, -3845, 48469, -3845, 21408,   482, -3845, -3845, -3845,
    2701,   147,  2339, -3845, 23883, -3845,    91,    91,  2587,  1182,
   39873, -3845, -3845,   172,  2342,  2419,  2346, -3845,  2427, 23883,
   23883, -3845, -3845, -3845,  2601, -3845,  2982,   731, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845,  2365,  2844,  2546,  2639, -3845,  2643, -3845, 47855, -3845,
    1708, -3845, -3845, -3845,  2381, -3845, 11350, -3845, -3845, 47855,
   -3845, -3845, -3845, -3845, -3845,  2941, 11350, -3845, 36803,  1089,
    1177,   981,   152, -3845, -3845, -3845, -3845, -3845, 47855, 42943,
    2382, -3845,  2774,   482, 11350, -3845,  2390,  1637, 47855, 47855,
   47855, 23883, 47855, 23883, -3845,  1271,  1271, -3845, 35575, -3845,
   -3845, -3845, -3845,    -8, 47855, 47855,    -8, 36803, -3845,   212,
   47855,    -8, -3845,  2776,  2493, -3845, -3845, -3845,  2849, -3845,
   -3845,  2843,  2401, -3845,  2774, -3845, -3845,   212, -3845, -3845,
   23883, -3845, -3845,   212, -3845,   212,   212,    -8,    -8,  2453,
     566, -3845, -3845,  2547,  -108, -3845,   697,   261,  2656, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,   112,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,   101, -3845, -3845, -3845,  2107,  2912, -3845,
   39873,  1748,   744,  1293,  1748,  1530,   482,   164, -3845,   164,
   -3845, 36803,  2877,  3546,  2683,  1276, 23883, -3845,  2415, 43557,
   23883, -3845, -3845, -3845,   188,  2420,  2422,  1426,  2899,  2901,
    2903,  2906,  2907,  2908,  2909,  2913,  2915,  2916,  2917,  2922,
    2924,  2925,  2926,  2930,  2933,  2935,  2940,  2942,  2943,  2945,
    2946,  2953,  2434, -3845, -3845, -3845, -3845, 23883, -3845, -3845,
   -3845, -3845,  2512, -3845, -3845, -3845, -3845,  1961, -3845, -3845,
   -3845,   233,  1532,  2497,  2524,   118, 36803,  2921, 47855, 47855,
    1637, 47855, 47855, -3845, -3845,   617,  2755,  2759,  2765,  2498,
   -3845,  2601, -3845,  1317, 47855,  2936, 31277, -3845,   315,  1086,
   -3845,  2829,  2494, -3845,  2500,  2506,  2509, 11350,    89,   488,
    1120,  1430,   933,  1131,   539,   307, -3845,  2516,  2504, -3845,
    2517, -3845, -3845,   591,   654,  1152,  1154,  2518,  2520, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  2955,
   -3845,   694,  1250, -3845, -3845, -3845, -3845,  2526, -3845, -3845,
    1172,   726,   769,   260,  2532,   858,  1420,  1488,  2531, 25117,
   47855,  2829,  2534,  1184,  1196,  2829,  2536,   886,  1215,  1513,
    1554,  1630,  1230,  1238,   905,  1687,  2696,  1240,   913,   936,
    1289,   965,   985, -3845,  1302,  2537,  2543,   999,   268,  2829,
    2552,   344,  2554,  2555,  1308,  9445, 10080, 10715,   455,  1001,
   -3845,  2559, -3845,  2241,  2563,  2566,   360,   186,  1331, -3845,
   11350, -3845, -3845,   640,   791,  2608,   134,   981, -3845,  2708,
   47855,  2267,   131, -3845, -3845, -3845, -3845, -3845, -3845,   847,
   -3845,  2579, -3845,  2580,  1812,  2583, 11350,  1140,  2583,  2883,
    1265,  1265, 15795,  2861,  2967, 11985,   872, 11985,   872,  2583,
    2583,  2583, -3845, 15795,  2586, 15795, 15795, -3845,  2770,  1426,
    2588,  -217, 47855, -3845,  2279,   775, -3845,   152, 36803,   165,
   23883, 39873,  2564, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845,  3564, 23883,  2667,  2669,  2672, -3845, 30047, -3845, -3845,
   -3845, -3845, 30047,    -3, -3845, -3845, -3845, -3845, -3845,  2682,
   -3845, -3845, -3845,  2591, -3845, 36803,  2591, -3845, -3845,  2591,
   -3845, -3845,  2591,    58,  4948, -3845,   251,   816,  2702,  2616,
   -3845, -3845, -3845, 23883, -3845,  2998,   637, 23883,  2415,  2594,
   -3845, -3845, -3845, -3845, -3845,   106,  2697, -3845,  3226, -3845,
   11350,   482, -3845, 36803, 36803, 23883, 23883,   507, -3845,  1546,
    2607, -3845, -3845, -3845, -3845, -3845,  3621, 17700,  2610, 36803,
     783, -3845, -3845, -3845, -3845, -3845,  1451,  1426, -3845,  2600,
   -3845, 38645, -3845,  1426,   152,  2614,  2615, -3845, -3845,  2987,
     794, -3845,  2618,  2620, -3845,  2622,  2624,  2625, 44171, 11350,
   -3845,  1177, -3845, -3845,   152, -3845, -3845,  8810,   482,  3065,
   -3845,  1426,  2623, 47855, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,   -19,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845,    -8, -3845, -3845,
   -3845, -3845, -3845,  2846,  2344,  2379,  3065,    -8,   212, 23883,
      -8,    -8, -3845, -3845,  2522,  2680, -3845, -3845, -3845, -3845,
   -3845, 47855,  2320,  2790, -3845,  2635, -3845, -3845, 23883, -3845,
    2638, -3845,  3086,  3227,  2344, -3845, -3845, -3845,   152,   152,
    2937, -3845,   482,  2766,  2768,  2769,  2772,  2775,  2806, -3845,
   -3845,   482,   482, -3845, -3845,   152, -3845,  1217, -3845, -3845,
   -3845, -3845,   482,   482,   482,   482,  2553,   482,   482,  1690,
   -3845, -3845,   152,   152, -3845,   940, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  1094, -3845,  2895, -3845,  2949,   152,  3216,
    2905,   152,   152,  3216,   152,  2910,  2918,   152,   152,  2731,
    3162,   152,  3049,  2764,  1244,  3061,   152,  2927, -3845,  2773,
    3182,   152,   152,   152,   152,   152,  3216,  2929,  3270,   152,
   -3845,   152,  2951,  2952,   163,  2958,  2959,   152,   152,   152,
     152,   231, 47855,   152,  2961,   152, -3845, -3845,  6121, -3845,
   -3845, -3845, -3845, -3845, -3845,   842, 22025, -3845, -3845, -3845,
   -3845,   146, -3845,  2904, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845,  2718, -3845, -3845, 11350,
    2727,  2553,   482,  2553,  2553,   482,   482,  1122,   482,  2553,
    2553,   482,   482,   482,   482,   482,   482,   482,  2553,  2553,
     482,  1875,   482,  2553,  4946, -3845, -3845, -3845, -3845,   278,
     152,   152,   152,   152, -3845,  1520, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, 39873,  3081,  1568,   797, 39873, -3845,
   47855, -3845,   413, 47855,  2728,  -124,  4034,   837,   837, -3845,
   23883, 23883, 23883, 47855,  2778, -3845, 31277, -3845, -3845,   697,
   -3845,  2726, 13255, -3845,  2730, -3845, 11350, -3845, -3845, -3845,
    1352, 11350, 11350,  3219,  2523, -3845, 39259, -3845, -3845, -3845,
   11350, 39259,  2523, 11350, -3845,  2737, -3845,  3137,  3140, -3845,
   -3845, -3845, -3845, 11350, 11350, -3845, 11350, 11350, -3845, 11350,
   11350, 11350, 11350, 11350, -3845, -3845, 15795, -3845,  2738,  2743,
   -3845, -3845, -3845,  2744, -3845, 11350, -3845, -3845, -3845, -3845,
   -3845, -3845, 11350, -3845, 11350, -3845, 11350, 11350, -3845, 11350,
   11350, -3845, -3845, -3845, 13890, 11350, 11350,  2748, -3845, -3845,
   11350, 11350, 11350, -3845, 11350,   525, 11350,  1493, 11350,  1796,
   11350, -3845, 11350, -3845, -3845, -3845, -3845, 11350,  1407,   106,
    2553,  2749, -3845,  1709, -3845, -3845,  2650, -3845,   640,  2751,
   -3845, -3845,  1708, -3845, -3845, 39873, 11350, -3845, -3845, -3845,
   -3845, -3845, -3845, 15795,   362,  2752, 15795, -3845,  2883,  3532,
    3532,  2200, 11350,  1140,  2883, 11350,  2753,  2758, -3845, 11350,
   47855, -3845, -3845, -3845, -3845, 39873, -3845, -3845, -3845, -3845,
     165, -3845,  2281, -3845,  2415, -3845,  3231,  2763, -3845, -3845,
   -3845, -3845, -3845, -3845, 47855, -3845,  2831, -3845, -3845, -3845,
   22644, 22644, -3845, 22644, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845,  2344,  1546, -3845,
    2771, -3845, -3845,  2376,  2848,  2781,  3129, -3845, -3845, -3845,
   47855, 15795, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845,  3353,  2777,  2782,  3246,  2784,  1426, -3845,  2850, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845,   877, -3845, -3845,
    2785,  2785, 19553, -3845, -3845, -3845, 47855,  3251, -3845,  3211,
    3229, 22644, 22644, 22644,   704, -3845,   215, -3845,   945,  3179,
    2344, -3845,  3232, 40487, -3845, 31891, -3845, -3845, -3845, -3845,
    1089,  2876,  2880,  1282, -3845, -3845,  3184,  3007, -3845, -3845,
   -3845,   152,  1426, -3845,  2382,  8810,  2797, 28199, -3845, 15795,
    1587, -3845,  1426, -3845, -3845,  1122, -3845,   323, -3845, 35575,
   35575, -3845,  3073, -3845, -3845, -3845, -3845,  2616,   212, -3845,
   -3845,  3277, -3845,  3278, -3845,  2807,  3284, -3845,  3054, -3845,
     832,  3198,  3206, -3845,  3080,  1198,  3080,   832,   832, 25117,
     697,  2601, -3845,  2553,  3135, -3845, -3845, -3845, 38645, 36189,
   -3845, -3845, -3845, -3845,  3352, -3845,  3354,  1516, -3845, -3845,
    2421,   919, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845,  1530,  2421,  2421,
     983, -3845,   143, -3845, -3845, -3845, -3845,  3290, -3845, 25734,
     111, -3845,   259, -3845, 25734, -3845,   188,   188, -3845, 44785,
   25734,   111,  1122,  2553, 25734,  2553, 45399,   111,   482,   482,
    2292,   152,  2553, -3845, -3845,  3212, 47855,  3213, 25734, 25734,
   -3845, 39873, 47855, -3845,   152,  1232,  2553, 46013,  1122,  1122,
   25734,   111, 25117,  1651, -3845,   482,   111, -3845, -3845, -3845,
   -3845, 23883,   111,   111,  2286,  2491,  2684,  2691, -3845, -3845,
   -3845,  2553, 45399, -3845, -3845,  6054, -3845, -3845, -3845, 18936,
   47855,   301,   514, -3845,  2822,    55,   339,  2914,   931,  2833,
    2835, 46627,  1426,  2553, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,   482,   106,  2421,  2421,  2232, -3845,
    3098,  3267,   152, -3845,  2156, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,  2947, -3845,  3451,  3023,  2864, -3845,
   -3845,   229, -3845, -3845,  1313, 23883, 18319, -3845,  3097, -3845,
    3495, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
    2859,   697,  2616,  1325,  2616,  2875, -3845, 11985,  1339, -3845,
    1426, 11350,  1426,  1726, -3845,  2871,  2871,  2873, -3845,  2884,
    2871,  3280,  2873,  3281,  2881,  2887,  1402,  2894,  2896,  1607,
   -3845, 11350, 11350,  1455,   379,  1467,  -113,  1008,  1019,   409,
   -3845,  1491,  2851, -3845, -3845,  1501,  1524,  1541,  1561,  1021,
    1563,  1749, 11985,  1572,   942,   439, -3845,  1605,  1042,  1058,
    1611, 11350,  1633, 11350,  1655, 11350,  1685,  1700,  1720,  2911,
    2911,   133, -3845,  2897, -3845, -3845, -3845,  2902, -3845, -3845,
    1868,  2650, -3845, -3845,  2932, -3845, -3845,  2898,  1426,  2934,
   -3845, -3845, 11350, -3845,   207, -3845, -3845, 15795,   479,  2944,
   -3845,  1426, -3845, -3845,  2948,  1607, -3845,   994, -3845, -3845,
   -3845, -3845,    18,  3497, 30047, -3845,  1777, -3845, 36803,  2900,
   -3845,  2919,  2957,  2979,  2981,  2972, 11350, -3845, -3845,  3177,
   23883, -3845,  3323, -3845, -3845, -3845, -3845,  2973,  2923, -3845,
   -3845, -3845,  2883,  3282,  3160, -3845, -3845,   106, 47855, 36803,
   -3845,  1490, 25117, -3845,  2956, -3845,  2956,  1375,  2976,  1799,
   -3845, -3845, -3845,  2928,  1911,  1818, -3845, 17700,  3180, 36803,
    3376,  3379,  3384, -3845,  2616,  2616,   848,  2991,  3337, -3845,
   -3845, -3845, -3845, 47241, -3845, -3845, -3845, -3845,  -203, -3845,
    2977,  2978,   181,  3163, -3845, -3845, -3845, -3845,  8810, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845,  2344, -3845, -3845, -3845,
   -3845, -3845,  2344, -3845,    -8,   482,   482,  1729,   482,  3430,
    3465,  1199,   791, -3845,  2220, -3845, -3845, -3845,  3357,   832,
    3080,  3080,  3364,  3249,   -43,  2984, -3845,   152, -3845,  2528,
   -3845,  1490, -3845, -3845, 11350, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  1094, -3845, -3845, -3845, -3845, -3845,  2983,
    3368,  3371,   188, -3845, 25734, -3845, -3845, 25734, 25734, -3845,
   -3845,   119, 45399, -3845, -3845, -3845, -3845, -3845, -3845,  2989,
   -3845, -3845,   106, -3845, -3845, 36189,   482, -3845, 25734,  2989,
   -3845, -3845,   177, -3845,  3014,   482, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, 45399,  2992, -3845,   349,
   -3845, -3845,  1956, -3845, 45399, -3845, -3845, -3845, 45399, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,  2993,  2815,  1826, -3845,  2994,  2996,
   -3845, -3845, -3845, -3845, 47855, -3845, -3845, 23883, -3845, -3845,
   -3845,  5546, 47855,  3233, -3845, 11350, 11350,  3269, 47855,  3271,
   -3845,  3557, 47855,  3615, 45399, -3845,  3006, -3845,  3008, -3845,
    1828, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  3009, 47855,
    2421,  2012, -3845, -3845,   482,  1313, -3845, -3845, -3845, -3845,
    3285,  3286, 47855, -3845, -3845, -3845, -3845,  3150, -3845, 23883,
   -3845,  3185, -3845,  3024,   197,  3947, -3845,  3027,  3029,  3030,
   31277,  2616,  3289, -3845, -3845,  3532, -3845,  1426, 11350,  1320,
   -3845, -3845,   280,  3297, -3845,  1487, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  3035,  3532,
    3532, -3845, -3845, 11350, -3845,  3622,  3200, 11350, 11350, -3845,
   11350, -3845,   899,  3041,  3063, -3845, -3845, -3845, -3845, 11350,
   -3845, -3845,  3532, -3845, 11350, -3845, -3845, 11350, -3845, 11350,
   11350, -3845,  1728, -3845,  1766, -3845,  1776, -3845, -3845, -3845,
     106,  3044,  3417, -3845, -3845, -3845,   106,  3235, -3845, -3845,
     106,  2553,  2381, -3845, -3845,   612, 47855, -3845, -3845,  1841,
   -3845, -3845, 11350, -3845, 40487, -3845, -3845, -3845,  3408,  3672,
   -3845,  3287, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, 47855,
     516,  3070, 32505, 36803, 36803, 36803, 14525,  1426,  3549, -3845,
   -3845, -3845,  3323,  3442, -3845,    85, -3845, 47855,  3068,  1393,
   -3845,  1857, -3845, -3845,  3069, -3845,  1868,  3071, -3845,   152,
   14525,  2785,  3185, -3845, -3845,  1375, 25117, 31891, -3845, -3845,
   47855, -3845,  3513,  2182, 36803, 36803, 36803,  2344,  3507,  2848,
    2848, -3845, 28815, -3845, -3845,  3236, -3845, -3845, 33119, -3845,
   -3845, -3845, -3845, -3845, -3845, 28199, 44171, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,   482,  3559,  3322,  1708,  2719, -3845,
     697, -3845,   832, -3845,  3469,  3471,   832, -3845, -3845, -3845,
   25117,  2616, 14525, -3845,  1868,  1426,  3090,   349, -3845,   -81,
   11350, 25734, -3845, -3845, -3845,  3088, -3845, -3845,  3604,  3605,
   -3845, 25734,  1961, 47855, -3845,  2941, -3845, -3845, -3845,  3186,
   -3845,  5546, -3845, 25117, -3845, -3845, -3845, -3845, -3845, 47855,
   -3845, 23883, -3845, 18936, -3845,  3100, -3845,  2871,  2871,  2871,
   -3845, -3845, -3845,  2873, -3845,  2884,  3332, -3845,  2884,  2884,
   -3845, -3845, -3845, -3845, -3845,   280,   245, -3845, -3845,   280,
   -3845, -3845, -3845,    97,  1129,  2884, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  2871,  2873,  2873, -3845, -3845,   280,  2871,
   -3845,  2871,  2242, -3845,  1908,   151,  2871,  2871,  2871,  3101,
    3094, -3845,  1426,  3532,  3656, -3845, -3845,  3248,   482,  3598,
   -3845,  1889, -3845,  3105, -3845, 46627, -3845,  2553,  1530, -3845,
   -3845, -3845, -3845,  3247,   884, -3845,  3274,  3109,  3116, -3845,
   -3845,   482,  3110,  3119,  6121, -3845, -3845, -3845,  3733, -3845,
   47855, 47855, 47855,  2726, -3845,  3490,  1246,  1426,  3123,  3124,
    3125,  3127,  3727,   155, -3845,  3728, 39259, -3845, -3845, -3845,
    3131,  1947, -3845,  3138,  3141,  1789, -3845,   261,  3142,  1838,
    1075,  1963,  3438,  3515, -3845,  3361, -3845,  1863,  1307,  1869,
    1894,  1936,  1958, -3845, -3845, -3845, -3845, -3845,  3143, -3845,
   -3845,   196, -3845,  3146,   200,   791, -3845, -3845,  1983, -3845,
   -3845, -3845,  3610,  3496, -3845,  3581, -3845, -3845, -3845,   578,
     578,   578,  1587,  1426,  1995, -3845, -3845, -3845, -3845,  3547,
   -3845, -3845,  3152,  3226, 47855, -3845,  3160, -3845,  2381, 25117,
   14525,  3153,  3151, -3845,     9, -3845, -3845,  3149, -3845, -3845,
   36803,  2182,  2182,  2182, -3845,  3745,  3585, -3845, -3845, 39873,
    3161, -3845, -3845,  3468, -3845, -3845, -3845, -3845,   482,  3642,
   -3845, -3845, -3845,  2635,  2783,  3217,   832,   832,  3275,  3218,
   11350, 11350,  3169, -3845,  3289, -3845, -3845,   369,  2381, 11350,
   -3845,   106,  3160, -3845,  1965,  3170,  3171, 47855,  3174,  3178,
   -3845,  2736,   301, -3845, -3845, -3845, 23883,  2242,   111, -3845,
   -3845,  2989,   877,  3176, -3845, 47855,  3505, -3845, -3845, -3845,
   -3845,  1076, -3845,  3183,  1076,  1076, -3845,  2048, -3845,  3214,
     280, -3845, -3845,  3220, -3845, -3845, -3845,  1076,  3189,   280,
   -3845, -3845, -3845, -3845,  1076, -3845, 39873,   297,   482,  2565,
   -3845,  3228, -3845,  3696,   192,  3572, -3845,  2242, -3845,  3573,
    3467, -3845,   280, -3845, -3845,  3792, -3845,   280,  3792,  1076,
    3470, -3845,  1076, 47855, -3845, -3845, -3845, -3845, -3845, -3845,
   47855, -3845,   851, -3845, -3845, -3845,  2019,   482, -3845, -3845,
   -3845,  3194,  3196, -3845, -3845, -3845,   339, -3845, 47855,  5546,
   -3845, -3845, -3845,  3097, -3845,   970,  2027,   349,  3199,  2031,
    2033, 35575, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, 39259, -3845,  3792, -3845,  3473, -3845, -3845, -3845, 11350,
   -3845, -3845, -3845, 11350, -3845, -3845,  3499,  3664, -3845, -3845,
   -3845, -3845, -3845, -3845,  3201, -3845,  2553,   945,   945, -3845,
   -3845, -3845, -3845, -3845,  3466,   368,  3230,  3230,  3230, -3845,
   14525,  3587,  3301, -3845, -3845,  3215,  3250, -3845, -3845,   200,
   -3845, -3845, -3845, -3845,  2182, 11350, -3845,  3289,  2292, -3845,
   28815, -3845, -3845,   482,   612, -3845,  3253, -3845, -3845, -3845,
    3255,  1426,  1426, 47855,  3490, -3845,   753,   200,   349, -3845,
    2060, -3845, 47855, 47855,  2072, 47855, 47855,  2667,  2669,  2672,
    1875,  1875, -3845, -3845, -3845, -3845, -3845, -3845,  3612, -3845,
   -3845,  2078, -3845,   778,  3484, -3845, -3845, -3845, -3845,  1076,
   -3845,   261, -3845, -3845, -3845, -3845, -3845,   261, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  3506,  3256,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845,  3234, -3845, -3845,  3339, -3845, 53995, -3845, -3845,
    1024,  3240, -3845, -3845, -3845, -3845,  1559, 47855, 23883,  3269,
    3409, -3845,  2941, -3845,     9,   197,  3185, -3845,   167, 47855,
   -3845,  3502,    95,  1102, -3845, -3845, -3845,  3237,  3238,   349,
    1973, -3845, -3845, -3845,  3242, -3845, -3845, -3845,  3317,  3319,
   -3845, -3845,  3324, -3845, -3845,   135,  2306, -3845, -3845, -3845,
   -3845,  3294, 23883, 15795,  3340, 47855,  1428,  3040, -3845,  1661,
     349, 11350,  2344, 36189, -3845, -3845, -3845, -3845, 11350,  3254,
   11350,  3257,  2086, -3845, -3845, -3845,   188,   188, -3845,   753,
   -3845, -3845, -3845,  2090,  2094,   167,  2096,  2099, -3845, -3845,
   -3845,   301,  3259, -3845, 47855, -3845, -3845, -3845,    70, -3845,
   -3845,  2112, -3845,  2115, -3845, -3845, 11350,  3729,  3272, 47855,
    1109, -3845, 55223, 55223, 47855, -3845, -3845, -3845, -3845,  5243,
   -3845, -3845,   -46, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,  3850, -3845,  3241, -3845, -3845,  1024,
    3252, -3845,  1144, -3845,  1911, -3845, -3845,  5546,  3700,   931,
   -3845, -3845, -3845, -3845, -3845,  3260,  1911,   482,   152, -3845,
     167, -3845, -3845, -3845,   349,  3261,  3504, -3845,    95, -3845,
   -3845, -3845,  1102, -3845, -3845, -3845, 11350, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,   158,  3521,  2553,  2553,  2553,  2553,
    2306, -3845, 25117,  2601, -3845,   106, -3845,  2118, -3845, -3845,
   -3845,  3346,   152,  3768,  3769,   152,   152,   152,   152,  3279,
    3040, -3845,  3748, -3845, -3845, 11350, -3845, -3845,  1426,  3500,
   -3845,  3832,   791,  1426, 47855,  1426, 47855, -3845,  3719,  3719,
   -3845,  3487,   167, -3845,    95,  1102, -3845,  3160, -3845,  1066,
    1066,   280,   261,   280,  1426, 11350, -3845, 11350,  3306, -3845,
   -3845,  3724, 47855, -3845, -3845, -3845, -3845, 11350, -3845, 53995,
   53995, -3845, -3845, -3845, -3845,  3885, -3845,  3288,     9,  3855,
    3548,  3860, -3845,  3336, -3845, -3845,  3557,  5546, -3845, -3845,
   -3845,  2553,   994, -3845, -3845, -3845,  1397,   994, -3845,   994,
   -3845,   349, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  3291,
   -3845,   152, -3845,  3293, -3845, -3845, 47855,  3292, -3845,   482,
     152,   152,  1932,  1932,   106, 39873,  3393, -3845, -3845,   152,
     349,  3913, -3845,   855,  3663, -3845,  2133,  2144,  1486, -3845,
   -3845, -3845, -3845, -3845, -3845,  2151, -3845,  3924, -3845,   173,
    3566,  3568, -3845, -3845, -3845,  1426,  1426, -3845,   242, -3845,
   -3845,  3698,  3786, 11350,  1426, 50925,  3299, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   54609, 11350, -3845,   -46,  3850, -3845, -3845,  3567, -3845,  3569,
   -3845, -3845, -3845,  3809, 53995, -3845,  3802, -3845,     9, -3845,
   -3845, -3845, -3845, -3845, -3845, 25117, 14525,  2292, -3845,  3340,
   -3845,  3312, -3845, -3845,   -31, -3845,   482,   482, -3845, -3845,
   -3845, -3845, -3845,  2160, -3845, 39873, -3845, -3845,  3898,  3900,
    3799,  3903,   855, -3845,  1273, -3845, -3845, -3845,  3904, -3845,
    3905,  3321,  3325, -3845, -3845, -3845, -3845,  3370,  3830,  3351,
   11350, 53995, -3845,  3810, -3845,  3740,  1426,  3682,  3327, -3845,
    3329,  1426,  3848, 55223, 55223, -3845, -3845, -3845, -3845,  3826,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  2163, -3845,
   15160, -3845, -3845, -3845, -3845, -3845, 39873, -3845,  3393, -3845,
    3343,   261,   261,  3925,   261, -3845,  3930,  3931,  1273, -3845,
   -3845, -3845, 46627, 46627,  1066,  1066, -3845,   263, -3845,  1426,
   51539,  3926, 47855, -3845,  3435, -3845, -3845, 11350,  3849, 41101,
   52153,  3366, -3845, -3845, -3845,  3529, -3845,  3336,  3543, -3845,
    3312, -3845,  3373, -3845,  2883,  3040, -3845, -3845,  3646, -3845,
   -3845,   261, -3845,   261,   261, -3845,  3377,  2165, -3845, -3845,
   11350, -3845,  3864,  3474, -3845,  3381, -3845, 53995,  1426, 53995,
   -3845, -3845,  3811,  3382,  1615, -3845,  3383, -3845, -3845, 53995,
    3800,  3832, -3845, 15160,  3387, -3845, -3845,  3392,  3395, -3845,
   -3845, -3845, -3845, -3845,  1426,  3973, 53995, 47855, 49083,  3877,
   52767,  3844, 47855,  5546,  3845,  3846, -3845, 53995, -3845,  3988,
    3663, -3845, -3845, -3845,  3646,  3486, -3845, 49697, -3845,  2247,
    3599,  3432, -3845, -3845,  3918,  2762, -3845, -3845,   261,  3820,
   -3845, 53995, 53995, -3845, -3845, -3845, -3845, 33733, -3845, -3845,
   -3845, -3845, -3845,   704, -3845,  3684,  3412, 50311, 53381, -3845,
   -3845, -3845, 30663, -3845, -3845, -3845,  3856, -3845, 11350, -3845,
     780, 20170,  3570, 33733, -3845, -3845,  1426, -3845, -3845, -3845,
   -3845, 39873,  2170, -3845, -3845, 25117, -3845, -3845, -3845, -3845,
   23264,  3415, -3845,   152, -3845, 25117, -3845, -3845, 14525, -3845,
   -3845
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3845, -3845, -3845, -3845, -3845,    66, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,  1758, -3845, -3845, -3845, -3845, -3845,
    1955, -3845,   634, -1820, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845,   636,  1560,  3407, -3845,   370,
   -3845,    49, -3845, -3845, -3845, -2942,   -70,  -255, -3845, -3845,
     350,    37,  3102,  -252, -3844, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845,   390,   385, -3845, -3845,   209, -3845,
   -3845, -1532, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  -427,
    -388,  1933, -3845, -3845, -3845,  4033, -3845,  3509, -3845, -1738,
    2255, -3845, -3845, -3845, -3845, -3845,  2321, -1670, -3845, -3845,
   -3845,  1304, -3845, -3845, -3845, -3845,   -71,   232, -3845,   234,
   -3845,   238, -3845,   239, -3845,   240,   241,   244,   246, -3845,
     247, -3845, -3845,  -383, -3845, -3845, -3845, -3845,   248, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845,  -258, -3845, -3845,  -101,
   -3845, -3845,  -248,   254, -3845,  -202,   256, -3845,   257, -3845,
    -119, -3845,  -116, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845,  3111, -3845, -3845, -3845,
   -2068, -3845, -3845, -2315,  2649, -3845, -1785, -3845, -3845, -1926,
   -3845, -3845, -1686,   988, -3845, -3845,   493,   912, -3845, -1352,
   -1887, -1886, -3845, -3845, -3845, -2012, -2009, -1393, -1392, -2281,
   -3845, -3845, -3845,   249, -3845, -3845, -2576,  2074,  2648, -3845,
   -1979, -3845, -3845,  1130, -3845, -3845,  1314,   603,  1311, -3845,
     903,  2845, -1215, -3845, -3845, -3845, -3845, -3845, -3845,   -35,
     221,  -122, -3845, -3397,   609, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -2273, -3845, -3845, -3845,  -285, -3845, -3845,
    -199, -3845, -3845,  -244, -3845,    73, -2306, -3845, -3845, -3845,
   -3845,  2611, -1316, -3845,  3631, -3845,  -554,   713,  2110, -2191,
   -1381, -3845,  -880,  -879, -2495, -3845, -3845, -3845, -3348,  1084,
    1499, -3845,   810,  2111, -1894, -3845,  1574, -3845, -3845,   840,
   -3845, -2734, -3845, -3845, -3845,   796, -3845,   799, -3845, -3845,
   -3845, -1143,   767, -2579,  1471,  -775, -3845,   348, -2424, -2492,
   -3845,   571, -3845,   523, -3621, -3310, -3845,  -568, -2102, -2408,
     -86, -3845, -3845,   538, -3147,  1707, -3845, -3845, -3845, -3220,
   -1794,  1436, -3845, -3845,  1010, -3845, -1391,  1012, -3845, -3845,
   -3845,  1016, -3845,    94, -3845, -3845, -3845, -3845, -2919, -3845,
   -3845, -1461, -2024, -3845, -3845,  4173,  4175, -1004, -2702, -3595,
     103,   104, -3845, -3845, -3845,  2657, -1130,   168,   166,   180,
    2073,  -591,   321, -2413, -3845,   378, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  2164,  -540, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -2434, -2436, -3845, -3845,  1635, -3845, -3845, -3845,
   -2296, -1423, -1421, -1890,   880, -2155, -3278, -3845, -3845, -3845,
   -3845, -3845, -3845,  2789, -3845, -3845, -3845, -3845, -3845,  3635,
   -3845,  2799, -3845, -3845, -3845, -3845, -3845, -3845, -3845,   620,
    1859, -3845, -3845, -3845, -3845, -3845, -3845,   901,  2700, -3845,
   -3845, -3845,   -11, -3845, -3845, -3845, -3845,  2409, -3845, -3845,
   -3845, -3845,  2750, -3845, -3845, -3845, -3845, -3845, -3845,  1437,
   -3845,  1903, -3845, -1443, -3845, -3845,  1029,  -952,  1872,  3657,
    2009, -3845, -3845,  -586, -3845, -3845, -3845, -1671, -2433, -3845,
    3394, -1195, -2420,  2426,  -644, -1826,  1081,   318,  3806, -3845,
   -1105, -1051, -3845, -3845,  -637, -3845, -3845, -3845,  -620, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
    1494, -3845, -3845, -3845, -3845, -1181, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  1508, -3845,  2106, -3845,  -498, -3845,  3190,
   -3845, -3845, -3845, -2350, -1943,  1810,   982, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -1529, -3845, -2376, -3845,
   -3845, -3845, -3845, -3845,  2032, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -1678, -3845, -1988,   182, -3845,   335, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845,   -72,   866,   -67, -2777, -1054,
    1681, -3845, -3845, -1251,  3239, -2332, -3845, -3845, -3845,  2014,
   -3845, -3845, -3845, -3845, -3845,   949, -2932,  2855, -3845, -3845,
   -3120,  -872, -2269,  -854, -3845, -2362,   504, -1722, -1778,  -452,
   -1355, -2415, -3845, -3845, -3845, -3845,  -164, -3845, -3845, -3845,
     527,  1909, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845,  -544,  -759, -3845, -3845,  2167,  1760, -3845,
    3106, -3845,  -999,  3367, -3845, -3845,  3374, -3845, -3845, -3845,
   -3845,  3036,  3020,  2001, -3845, -3845, -2368, -3845, -3845,  1951,
   -3845,   802,  -860, -1766,  1091, -3845, -3845,  1093, -3247, -3845,
   -3845,  3380, -3845, -3845, -3845,  1036, -3845,    82,  3754,  3385,
   -3845, -3845, -3845, -3845, -3845, -3845,  2786, -1026,  3680, -3845,
   -3845, -3845, -3845, -3845, -3845,  2438, -3845, -3845, -3845, -3845,
   -3845, -3845,  2968,  3770,  -570, -1245, -3845,  -716,  2950,  2443,
    -846, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845,  2604,  1009, -3845, -3845,
   -3845,  3045, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,  1126,
     -64, -3845,    76,   -91, -3845,    13, -3845, -3845, -3845, -3845,
   -3845,  -158, -3845, -3845,  -161, -3845,  -939, -1346,   727, -1206,
   -2040, -3845,  1119,  3032, -3211,  -668, -1074, -1128, -1883,   115,
   -3845, -3845,  3134,  1910,   116,  -399,  -396,    -6, -2751,  -111,
    -561, -3845, -1751, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845,  1957, -3845, -3845, -3845,  1095, -3845,  3798, -3845,  2686,
    1099,  3803, -3845, -1311,  2513,  1971,  1974, -3845, -3845,  1979,
   -2177, -3845, -3845,   148, -3845,  2590, -3845, -3845, -3845, -3845,
   -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845,  2551,  3534,  3062, -3845,  2605, -3845, -3845, -3845,
   -3845, -3845,   346, -3845,  -128, -3845, -2549,  2856,   621, -3845,
    1179,  -621,  -851, -3845, -3845,   341, -3845, -3845,   356,  3824,
    3542, -3845, -3845, -3845, -3845, -3845, -2756,  -833, -3845, -3425,
   -2819, -1655, -3845, -3845, -2167, -2983, -3845, -3845,  -989, -3845,
   -3845, -3845, -3845, -2053, -3845, -3845, -3845,   150,  3886,  3887,
   -3845, -3845,   450, -3845,   550, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845,   396,   729, -3845, -3845,  3750, -3845, -3845, -3845,
   -3845,  3751, -3845, -3845, -3845, -3845, -3845,  3755, -3845, -3845,
   -3845, -3845, -3845,  1856, -3845, -3845, -3845, -3845, -3845, -3845,
   -3845, -3845
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2611
static const yytype_int16 yytable[] =
{
     491,  1006,  1443,  1020,  1028,   919,   879,   915,   948,   534,
    1672,   617,  2394,   533,  1346,  1349,  1450,   541,  1557,   553,
    1332,   783,  2135,  2066,  1361,   560,   555,  2348,  1759,  2251,
    1796,  1624,  1890,   567,  1547,  1548,   570,  1091,  1380,  2063,
     567,  2554,  1408,   489,  1374,  1049,  2973,   585,  1864,   963,
    2048,  2620,  2049,  1758,  2695,  3575,  1694,  1646,  2797,  2697,
    1380,  2916,   978,  1702,  1671,  2926,  2828,  2879,  2880,  1409,
    1960,  1961,  1804,  3289,  1980,  1981,  1980,  1981,  3248,  1455,
    1456,  2903,  3084,  2926,  2926,  2756,  1588,  2296,   606,  2378,
     995,   998,  2038,  2511,  2444,  3405,  2505,  2506,  1036,  2520,
    2894,  2945,  2969,  2524,  2640,  2883,  2974,  2641,  2904,  3763,
     609,  1959,   491,  3111,  2539,   491,   616,   622,  1704,  1705,
     135,  2851,  1708,  1709,  1710,  1711,  2550,  1713,  1714,  1716,
    1718,  1719,  1720,  1721,  1722,  2780,  1186,  1937,   539,  2112,
    2113,  1144,  1145,  1146,  1897,  3616,  3621,  1153,  1154,  3622,
    1153,  1154,  4043,  3163,  1187,   611,  3623,   498,   613,  1269,
    3445,  1799,  1907,  2583,  2117,  2389,  1269,  1972,  3632,  4017,
    1910,  1911,  2468,  2469,  3653,  1425,  3709,   552,  3595,  2629,
    2107,   548,  2558,   559,  3654,  3790,   636,  3580,  1972,  2480,
    2501,  1413,  3495,  2752,  3102,  4099,  2674,  1780,  3109, -1994,
    1410,  1810,  1153,  1154,  3190,  2238,  2498,  2499,  1736,   605,
   -1794,  2926,  2926,   886,   870,  2287,  3163,  2930,  2931,   545,
    3898,  1452,  2519,  2342,  2585,  2522,  2523,  2287,  2525,  2637,
    2638,  2528,  2529,  4119,  2151,  2532,  1153,  1154,  2870,  3210,
    2541,  4017,  1211,  3315,  2493,  2545,  2546,  2547,  2548,  2549,
    2310,  2462,  -901,  2553,  1363,  2555,  3271, -1966,  3318,  3164,
    3125,  2564,  2565,  2566,  2567,  3108,  3452,  2571,  1342,  2573,
    1580,  2482, -2557,  1295,   956,  1188,  1153,  1154,  3453,   627,
     628,  1405,  4331,  3761,  1153,  1154, -2493,  2343,   812,  4241,
    3253, -1518,  3454,  4295,  1278,  1270,   938,  3392,  2455,  1348,
     549,  3452,  1270,   886,  3617,  3581,  3435,  1342,   928,  3024,
    1131,  1432,  3840,  3453,  3804,  2344,  1016, -1794,  2559,  3062,
    2939,  3298,  3164,  1153,  1154,  2654,  3841,  3454,   594,  3835,
    3172,  1153,  1154,  1519,  2624,  2625,  2626,  2627,   886,   870,
    3092,   134,  3094,  2429,  4018,  3055,  3056,  1515,  -472,  2594,
    4093,  2597,  2598,  1452,  3067,  2844,  2300,  2608,  2609,  1560,
    1153,  1154,  3035,  1560,  1560,  2568,  2617,  2618,  3788,  3334,
    1955,  2622,  1537,  1538,  1539,  1378,  1153,  1154,  1153,  1154,
     130,  1071, -2557,  2345,  -567,  1191,  4134,  4301,  3236,  2386,
     568,  1955,  4120,   641,  1123,  1153,  1154,   569,  1452,  1001,
    3824,  1381, -2422,  3899,  1417,  1385,  1587,  3033,  4301,  3828,
    1390,  3918,  1202,  2064,  2279,  1540,  4018,  3831,  3435,   577,
    1091,  2649,  2280,  1004,  1005,  1153,  1154, -1518,  2279,  -568,
    3898,   815,  3847,  1290,  2934,  1540,  3268,  3849,  2065,  3940,
    3832,  1478,  2650,  2845,  2940,  1541,  2239,  1520,  1308,  4013,
    1382,  1521,  1973,  1777,  3034,  1153,  1154,  2215,  2301,  3243,
    3068,  2311,  1522,  1378,  2346,  1542,  1072,   131,  2902,  3086,
     939,  1153,  1154,  1973,   623,  3335,  1002,  3833,  3304,  1124,
    3025,  2877,  1561,  1418,  1132,  1933,  1576,  1631,  1930,   629,
     595,   578,  1859,  2948,  1279,  1153,  1154,  4192,   616,   957,
     622,   929,  3036,  3910,  1153,  1154,  1155,  2154,  3889,  1156,
    3842,  1433,  3257,  3258, -2422,   632,  4247,   797,  2747,  1202,
    1190,   622, -1994,  3293,  3436,   958,  1414,  1699,  3964,   814,
    4296,  3314,   810,  4241,  3316,  3317,   616,  1892,   820, -2131,
    1895,  1153,  1154,  2538,  1581,  1899,  3299,  2411,   546,  2569,
    3582,   833,  1707, -1478,  3920,  1153,  1154,  3325,  1155,  1571,
    1572,  1156,  4121, -1518,  1960,  1961,  1760,  1613,   880,  1728,
    1614,  1912,  1913,  1455,  1456,  2939,   935,  3880,  2995,   912,
    1612,  1189,  1980,  1981,  3165,  1935,  1330,  1406,  1516,  1626,
   -1478,  1343,  1155,  1523,   952,  1156,  3319,  3597,  2312,  1364,
    4327,  1639,  1640,  1641,   616,  1959,   967,  1153,  1154,  1645,
    2586,  2288,  3586,  3899,  2430,  2505,  2506,   616,   606,   491,
   -2153,  1759,  2640,  2288,   606,  2641,   993,  3191,   606,   606,
    1343,  2504,  1155,  1007,   967,  1156,  3436,  2951,   616,   813,
    1155,  2955,  3784,  1156,  2230,  2926,  1758,  3165,  1037,  1038,
    1039,  1455,  1456,  4100,  1044,  2971,  2972,  2038,  1415,  1203,
    2941,  2268,   980,  2437,  3509,  3510,  3511,  2985,  3941,  1739,
    1153,  1154,  2271,  4096,  2347,  2274,  3740, -2271,  2362,  1155,
     805,  1416,  1156, -1994,  1919,  3902,   912,  1155,  1524,  1201,
    1156,  3274,   550,  3624,  1781,  2152,  2583,  1909,  3173,  1092,
    4195,   825,  3057,  4236,  4026,  3541,  3542,  3543,   836,  1017,
    1153,  1154,  2112,  2113,  2731,  2932,  1155,  2265,  3900,  1156,
    2560,  2852,  1800,  2642,  2643,  4012,   851,  2118,  3091,  1811,
    3710,   936,  1155,  2127,  1155,  1156,  2283,  1156,  -901,   979,
    1798,  2912,  1153,  1154, -2493,   990,  3421,  2637,  2638,  1157,
    3272,  1155,  1157,  2107,  1156,  1817,  2128,  3166,  2095,  3444,
    1150, -1518,  1152,  1347,  2636,  2966,  1203,  1352,  1357,  4037,
    2254,  2893, -2493,  2583,  3610,  3433,  2933, -1518,  2975,  3420,
    1377,  1155,  3099,  1937,  1156,  1153,  1154,  1844,  1195,   491,
    1197,  3927,   967,   491,   616,  2928,   491,   616,  1517,  1034,
    4077,  2954,  1240,  2956,  1157,  3630,  3631,   940,  1274,  1517,
    2967,  1155,  3069,  1873,  1156,   981,  3528,  3328,   606,  2240,
    3455,  1133,  4464,  4322,  2980,  4151,  1896,  1155,   616,   606,
    1156,  2991,  1196,   606,  -472,  3922,  1200,  2942,  1157,  1210,
    3618,  3390,  1442,  3007,  3009,  3011,  1920,  3054,  4207,  3012,
    1921,  1155,  1679,  1680,  1156,  3455,  1386,  3609, -2422,   644,
    1155,  1391, -2131,  1156,  4180,  3308,  3060,  1018,   616,  4356,
    -567,  3052,   616,   616,  1153,  1154,  1778,  3535,  1157,  3901,
     803,  4202,  2661,  4204,  3578,   616,  1157,  3594, -2422,  1939,
    2802,  3629,  1679,  2181,  3439,  3902,  2161,  1155,  3585,  3634,
    1156,  2216,  1153,  1154,  4144,  3601,  3659, -2610,   834,  1517,
    1985,  1155,  3294,  3295,  1156,  -568,  3565,  2335,  3313,  2363,
    3569,  1153,  1154,  3607,  3608,  1157,  2878,  4010,   606,  1153,
    1154,  3108,  2909,  1157,  3108,  3108,  2828,  3934,  3027,  1281,
    2162,  3472,  3564, -2153,  1292,  3184,  3568,   616,  2142,  1451,
    1298,  3108,  1153,  1154,  1304,  1233,  1695, -1478,  1153,  1154,
     651,  2187,  1157,  1155,  1972,  3633,  1156, -2423,  3955,  3574,
    3652,  3655,  3657,  3658,  3935,  2381,  2219,  2220,  1157,   606,
    1157,  1153,  1154,  3903,  2400,  3228,  2123,   999,  3544,  3259,
   -1821,  3764,  2236,  2237,  2761,  2762,   923,  1157,  1065,   643,
   -2271,  1153,  1154,  4278,  2415,  1988,  3932,  1972,  1170,  4324,
    1615,  3122,  3123,  1616,  4279,  1153,  1154,  1153,  1154,  3745,
     801,  2258,   829, -2131,  1153,  1154,  1155,  1157,   134,  1156,
     606,  4254,  2433,   841,  1553,  1153,  1154,  1153,  1154,  3233,
    1689,  3129,  3130,  2662,   586,  4507,  2505,  2506,  2362,  2640,
    1380,  2431,  2641,  2336, -2557,  2946,  2946,  1157,  1153,  1154,
    4276,  2436,  2467,  3039,  2439,  2440,  1155,  3282,  1092,  1156,
    1135,  3146,  3147,  1157,  1153,  1154,   924,  1727,  3040, -2423,
    1380,  1682,  1092,  1890,  1890,  3327,  2275,  2231,  1960,  1961,
     587,  1153,  1154, -1794,  2364,  1723, -1821,  1157,  1155,  3251,
    1035,  1156,  1153,  1154, -2153,  2273,  1157,  1980,  1981,  2247,
     136,  3181,  3182,  3678,  2296,  2676,  4196,  3875,  1972,   657,
    3561,  2511,  3679,   115,  1761,  3505,  2539,  1421,  3144,  1959,
    1202,  2847,  1673,  1004,  1005,  2712,  1153,  1154,  2816,  1696,
    1517,  1155,   842,  1157,  1156,   616,  1955,  1153,  1154,  1536,
    2504,  1544,  2048, -1822,  2049,  1551,  2341,  1157,  2760,  1760,
    2404, -2271,  3956,   588, -2557,  1951,  1919,  1955,  1153,  1154,
    1153,  1154,  2160,    43,  2637,  2638,  4017,  2286,   658,  1809,
    1855,  4201,   616,  2127,  3324,  2644,  2382,  1731,  1153,  1154,
    3777,  3778,   606,  2884,  2038,  4129,  2290,  1022,  1030,   495,
    1153,  1154,   496,  1173,  2259,  4130,  2128,   606,  1188,  1157,
    1955,  1536,  1153,  1154,  2306,  2765,  2766,  2848,   843,  1455,
    1456,  4114,  4115,    13,  2167,  3260,  4280,  2020,  1092,   616,
    1155,  1153,  1154,  1156,   117,  2112,  2113,  2251,  4508,  2601,
    3473,  2642,  2643,  1683,  1672,   494,  1153,  1154,  4132,  1973,
    1856,  2337,  2358,  2359,  1153,  1154,  1153,  1154,  1155, -1822,
    4139,  1156,  3680,  4185,  3957,  1785,  2013,  1788,  2380,   606,
    3538,  2248,  1157,  2759,  1202,  2023,  2107,  1155,   606,  1459,
    1156,  4529,  2636,  2769,   616,  1155,  1000,  2168,  1156,  2363,
    2812,   830,  1973,   606,   606,  1202,   499,   912,  4110,  2663,
    2266,  1919,  1724,  2602, -1821,  1153,  1154,  4186,  1155,  4187,
     659,  1156,  1157,  1733,  1155,  2508,  1952,  1156,  1153,  1154,
    3859,  1955,  1831,  2312,  1153,  1154,  1725,  2174,  1920,    25,
    1839,  1672,  1921,  1840, -1821,    55,  1367,  1155,  1202,  3884,
    1156,  3936,   616,  2645,  1157,  1697,   535,  1153,  1154,  1941,
   -2343,  4018,  1860,   880,  3713,  1153,  1154,  1155,  3222,  2179,
    1156,  1698,   491,   491,   491,   606,   491,   606,  1153,  1154,
   -1794,  1155,  1891,  1155,  1156,  1422,  1156,  1203,  1893,   491,
    1155,   616,  3486,  1156,   491,  2907,   544,  1157,  1807,  3877,
    1304,  1155,  1792,  1155,  1156,  1368,  1156,   557,  2054,  2603,
    4281,  1170,  2180,  1973,   606,  1874,  1875,  1876,  2405,  1878,
    2260,  2976,   589,  4131,  1155,  1304,  1560,  1156,  1153,  1154,
    4197,  1849,  1894, -2423,  1672,  1369,  2261,  1898,   579,  2535,
    1155,  3073,  1808,  1156,   590,  4398,  4399,  3448,  2583,  2368,
    2739,   912,  1153,  1154,  1955,  2899, -1794,  1155, -1821,  3493,
    1156,   837,  1845, -2423,   616,  1857,  2900,  4111,  1155,   582,
    2583,  1156,   912,  1920,  2364,   616,  2740, -1822,   591,  2064,
     606,  1153,  1154,  2059,   606,  2575,  1157,  1846,  2989,  1870,
    2604,  2946,  3860,  1153,  1154,  2977,  1877,   645,  1879,  1726,
     580,  2183,  1155,  3859,  2065,  1156, -1821, -1822,  1182,  1183,
    1184,  1185,   854,  1155,  1157,   912,  1156,  1153,  1154,  1153,
    1154,   606,  4198,  2055,  1189,  4080,  -206,  1153,  1154,  2195,
    1955,  1203, -2343,  1157,  1155,  1908,  1155,  1156,   592,  1156,
     616,  1157,   491,   491,  1477,  2125,   491,    37,  2202,  1635,
    1153,  1154,  1203,  4199,  1155,  1880,  2206,  1156,  1044,  3074,
    2141,  2868,  1009,   597,  1157,  2538,  1155,  1153,  1154,  1156,
    1157,  3815,  4373,  4373,  1017,  2158,  1190,    43,  1155,  2207,
    4015,  1156,  1202,  2500,  3145,  2121,  2122,  1153,  1154,  1153,
    1154,  2504,  1971,  1157,  1543,  1203,  2978,  1155,  1153,  1154,
    1156,  2056,  1972,  1850,  2100,  2061,  1173,  3449,  2209,  3522,
    1560,  3876,  1155,  1157,  3448,  1156,  2100,  1881,   838,  3885,
    1155, -1822,  1155,  1156,   255,  1156,   257,  1157,  2210,  1157,
    1127,  1153,  1154,  1092,  2188,   855,  1157,  1153,  1154,  2536,
    2291,  1759,  2214,  1962,  2232,  1847,  1370,  1157,  2919,  1157,
    2386,  3127,  2100,  3523,   607,  2537,  2764,  3093,  1202,  1153,
    1154,  2901,  3128,  4079,  3139,  3999,  1758,  3816,  3303, -1822,
    1157,  1155,  3180,   816,  1156,  2699,  4060,   600,  2642,  2643,
     981,  1153,  1154, -1794,  1155,  3149,  1157,  1156,  3450,  2706,
    1155,    52,  2733,  1156,  2257, -1794,  2387,  4061,  4288,  1285,
    2605,  3150,  1286,  1157,  1672,  3052,  4444,  3817,  2862,  1275,
     856,  1153,  1154,  1155,  1157,  1128,  1156,   598,  3723,  2636,
    1199,  1155,  2721,   610,  1156,  4445,  1153,  1154,  2143,  2863,
    1832, -1794,  1018,  1659,  1155,  3625,  2281,  1156,  3626,    55,
    2399,  3075,   616,  4289,   606,   616,  1153,  1154,  1157,   912,
    2632,  1963,  1153,  1154,  1153,  1154,   606,  1955,  3239,  1157,
     817,  1240,  2155,  2920,  2864,   625,  1240,  2926,  2926,  1955,
    3948,  3949, -2610,  2159,  3449,   624,  3501,  3500,  2487,   616,
    1157,  2990,  1157,  1371,  1155,  3489,  3287,  1156,  2802,  3491,
    4339,  2775,  1153,  1154,  2169,  4346,  2170,   606,  3678,  1882,
    1157,   606,  1153,  1154,  1372,  1955,   612,  3679,  1155,  1049,
     117,  1156,  1157,  3789,  2178,  1153,  1154,   616,   616,   606,
     606,   633,  1153,  1154,  1157,   912,  2191,  1426,  4347,  1203,
     818,  1092,  1942,   616,  1933,   632,  3950,  1155,  2192,  2263,
    1156,  3288,  2488,  1157,  1373,   616,  1943,  3076,  1287,  1155,
    2251,   636,  1156,  1833,  2368,  3461,  4250,  2196,  1157,   879,
    2481,  4252,   880,  4253,  1153,  1154,  1157,   638,  1157,  4290,
    2489,  3848,  2200,  1155,  3850,  1155,  1156,  2428,  1156,  2101,
    2201,  2182,  2205,  1155,   640,  1202,  1156,  1973,  3703,  1153,
    1154,  2101,  2175,  1190,   652,  1153,  1154,  1202,  3451,  1180,
    1181,  1182,  1183,  1184,  1185,  1203,  1155,  2508,   507,  1156,
     654,  2681,   495,   606,   655,   496, -1716,  1157,  2333,  1964,
    1153,  1154,  1281,  1155, -1716,  2450,  1156,  2101,  1965,  3886,
    1157,  2208,   606,  1202,   656,  1966,  1157,  2357,  2490,  3452,
    1298,  2361,  2182,  1155,  2211,  1155,  1156,  3680,  1156,  3729,
    2223,  3453,  2102,   793,  1155,   798,   857,  1156,  1170,  1157,
   -1716,   558,  1153,  1154,  2102,  3454,  2136,  1157, -1716,  1468,
    1469,   808,  2965,  2242,  2675,  1864,   886,   870,  2370,  2371,
    1157,  3096,   564,  2875,  1153,  1154,   811,  1155,   846,   564,
    1156,  1153,  1154,  1155,  2424,  2735,  1156,   822,  4329,  1153,
    1154,  4333,   687,   858,   859,   860,   861,   862,   863,  1534,
    1944,  1332,   826,  2630,  3277,  1155,  3242,  2646,  1156,  2491,
    3278,  2535,   828,   864,  3894,  2368,  1494,  1495,  1519,  2156,
    1157,  1967,  1380,  2369,  2438,   848,  2570,  1155,  1380,   951,
    1156,   838,  3013,   950,  3115,   953,  1972,  3562,  3279,   814,
    2584,  3446,   912,  2461,  1157,  1347,   960,  3302,   981,  2342,
    1347,  2064,  2184,  1190,   912,  3451,   692,  1155,  2471,  1010,
    1156,   969,  2157,  1190,   991,  3463,  3464,  2478,  2479,  1011,
    2953,  1015,  1155,  1157,  1046,  1156,  2065,  1945,  2483,  2484,
    2485,  2486,   115,  2494,  2495,  1157,  2100,  3121,  3478,  1047,
     912,  1048,  1155,  2103,  1050,  1156,  2983,  2984,  1155,  3124,
    1155,  1156,  1946,  1156,  1051,  2103,  3997,  4422,   616,  1157,
    1052,  1157,   616,  2343,  2647,  1055,  1968,   491,  1672,  1157,
    2185,  1629,  1203,  3131,   606,   606,   606,  2670,  1056,  2275,
    2673,  1057,  1520,  3135,  1203,  1058,  1521,  1059,  1155,  2370,
    2371,  1156,  1157,  1173,  2757,  2197,  1190,  1522,  1155,  1060,
     616,  1156,   704,  2628,  1061,   616,  3136,  1510,  1511,  1157,
    2652,  1155,  1947,  1194,  1156,   886,   870,  1062,  1155,  1760,
    1203,  1156,  1672,  3137,  2779,  1938,  1063,  2372,  1066,  1157,
    1972,  1157,  1068,  2793,  2632,  2794,  2198,  1190,  2596,  1103,
    1157,  2596,  2596,  3138,  2596,  3140,  1069,  2596,  2596,  2596,
    2596,  2596,  2596,  2596,  3143,  1672,  2596,  1070,  2596,  2921,
    1155,  1122,  3611,  1156,  1073,  3614,  3615,  2767,  1074,  2492,
    1075,  3997,  3997,  1157,  1136,  1137,  2907,  2537,  4163,  1157,
    2100,  1076,  3627,   720,  1077,  1155,  1193,  3148,  1156,  1955,
    1190,  1155,   940,  3151,  1156,  2666,  2667,  2668,  1078,   616,
    1079,  1157,  4141,  2840,  2841,  2842,  1080,  1948,  3235,  2989,
    1081,   115,  2199,  1190,  3179,  3153,  1155,  3635,  1198,  1156,
    1082,  4073,  4074,  1157,  2776,  3098,  1083,  4164,  1523,   616,
    1086,   795,   796,  1153,  1154,   799,   800,  3155,  1087,   802,
    2922,   804,  1175,  1176,  4075,  1093,  4169,  1094,  2785,  4172,
    4173,  4174,  4175,  1157,  2791,  2791,  2100,  2791,  1155, -1794,
    3636,  1156,  3588,  3589,  3637,  2451,  3638,  3157,  1157,  2203,
    1190,  1973,  2496,  2497,  4154,  4155,  4156,  4157,  2632,  1095,
    1155,  1215,  3158,  1156,  2810,  1096,  1170,  1155,  1157,  1276,
    1156,  2749,  1190,  1097,  1157,  1155,  1157,  1098,  1156,  3664,
     886,   870,  3159,   116,  1293,  1890,  1099,  2399,  1347,   119,
    3483,  2101,  3639,  2999,  1100,  3000,  2833,  1202,  3997,  3997,
    2836,  1101,   117,  1524,  1277,  2791,  2791,  2791,  1104,  3530,
    1305,  3141,  1190,  1955,  1157,  3803,  1105,  2856,  1106,  2858,
    1107,  1392,  4472,  4473,  1157,  1108,  4270,  2307,  3484,  1109,
    2308,  1672,  1110,  2309,  4266,  4267,  3001,  1157,  3485,  3208,
    3209,   880,  3320,  4275,  1157,  2451,  1111,  3093,  1112,  4249,
    1393,  3718,  1113,  1891,  1891,  2790,  2790,  2251,  2790,  3002,
    2779,  3245,  3246,  3803,  1178,  1179,  1180,  1181,  1182,  1183,
    1184,  1185,   118,   749,   944,   945,  3332,   946,  2452,   947,
    3249,  3250,  1114,  1673,  3338,  3239,  1157,  1327,  3340,  1955,
    3416,  3417,   616,   616,  3997,  1973,  3003,  2453,  1394,  1307,
    3722,   119,  1395,  3497,  1190,  4088,  4089,  1115,  2454,  3997,
    1116,  1157,  1117,  3455,  1118,  1593,  1119,  1157,  1330,  3525,
    3526,  1767,  -826,  3997,  1333,  3728,  2790,  2790,  2790,  2938,
    2923,  3730,  1120,  2584,  3413,  2101,  4045,  3651,  2584,  2855,
    2952,  1202,  1157,  2950,  2584,  1121,  2962,  1125,  2584,  1126,
    2961,  3669,  3670,   120,  4162,  1338,  3731,  1129,  3720,  1130,
    2961,  1173,  2584,  2584,   912,   616,  2961,  1134,  2342,  3099,
    2986,  2982,  3895,  3896,  2584,  2994,  1673,  1269,  2452,  1138,
    3997,  2997,  2998,  1139,  1157,   606,  2685,  1140,  1564,  1565,
    1566,  2455,  3997,  3997,  1339,  1214,  2961,  2453,  3732,  1141,
    1577,  1142,  1768,  2584,  3023,  1143,  1157,  1769,  2454,  3706,
    3715,  2101,  2686,  1157,   970,  3049,  1597,  1202,  4230,  1358,
    3733,  1157,  1362,  1004,  1005,  3724,  1190,  3791,  1192,  3640,
     666,  1632,  2343,  1366,  1636,  4038,  3641,  1378,  2487,  3997,
    1387,  3006,  4046,  4047,  1203,  3741,  1190,  4048,  4049,  3997,
    1770,  1396,  1388, -1518,  1389,  1655,  1656,  3749,  3750,  1660,
    2687,  1404,  3471,  2688,   971,  1771,  1411,  1169,   255,  1407,
     257,  2689,  1412,  3642,  2963,  2964,  1420,  1674,  1675,   606,
    2584,  3863,  2497,   121,  2102,  1423,  3997,  1424,  3997,  3878,
    3879,  2455,   854,  3882,  3879,  3883,  3879,  1428,  3997,  1427,
    2487,  2993,  2488,  2456,  1430,  3797,  2996,  1435,   912, -1518,
    1175,  1176,   687,  1270,  3498,  3997,  1440,  3997,  1452,  3997,
    1458,  1598,  3942,  3526,  1460,  1601,  3997,  1397,  2921,  1462,
    2489,  1465,  1602,  4530,  3945,  3879,  3997,   879,  1466,  3004,
    3953,  3954, -1518,  1470, -1518,  3643,  1471,   972,  4087,  3250,
    3997,  3997,  4091,  3879,  1472,   122,  4092,  3879,  4094,  3879,
   -1518,  4095,  3879,  1475,  2488, -1518,  3997,  3997,  1269,   691,
    3053,  3997,  1170,  2457,  4101,  4102,   692,  4103,  4102, -1518,
    4165,  4166,  4029,  4033,   912,  1476, -1518,  1479,  1203,  1480,
    1398,  1481,  2489, -1518,  3644,  4286,  3250,  1528,  2490,  4360,
    3078,   666,  1529,  2456,   697, -1518,  4287,  3250,  1240,  2922,
    1603,  3685,   616,  4293,  3526,   855, -1518,  1530,   123,  3061,
   -1005, -1518,  4337,  4338,   606,  4379,  4380,  4433,  3415,  1535,
   -1518,  2487,  4519,  4520,  3008,  2103,  1662,  1663,  2487,  1494,
    1495,  3010,  2810,   616, -1518,  1536,  1673,  4268,  4269,  1533,
    3645,  1554,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,
    2490,  1092,  1170,   616,  1203,  1556,   124,  1605,  1188,  3822,
    3823,  1560,   704,  2457,  1171,  1567,  3797,  3267,  1579,  2491,
    3699,  3700,  3826,   687,  1347,  1582,  3291,  2315,  1618,  3829,
     856,  1628,  2812,  3547,  3548,  2488,  2690,  1629,  1172, -1518,
   -1518,  1706,  2488,  1399,  1270,  4438,  -653,  4440,  2451,  2487,
    1630,  2316,  3962,  1653,  3851,  3711,  2508,  3853,  3962,  3747,
    3748,  1670, -1518,  2489,  1681,  2317,  3908,  3909,  4029,  2509,
    2489, -1518,  4033,  1690,  4457, -1518,  2318,   715,  1712,  1732,
     691,  2491,  1735,  1400,  1737,  3221,  1738,   692,   718,  1741,
    1748, -1518,   719,   720,  1672,  1744, -1518,  1745,  1746,  1747,
     973, -1518,  1749,  1750,  2204,  1763,  1751,  1173,  2584,  4487,
    4488,  2584,  2584,  2488,  1762,   697,  2961, -1518,  1764,  1766,
    1510,  1511,  1772,  1774, -1518,  2319,  2320,  1004,  1005,   616,
    1775,  2490,  2584,  1783,  4029,  4033, -1518,  1784,  2490,  3266,
    1794,  2489,  1797,  1805,  1606,  1813,  1814, -1518,  4161,  1815,
    2961, -1518, -1518,  2321,  1816,   520,  1820,  1170,  2961,  2923,
    1608, -1518,  2961,   974,  1823,   975,  3794,  1170,  1826,  1827,
    -653,  3280,  3281,  1829,  3283, -1518,   502,  1830,  2691,  1841,
    -653,  2452,  1868,   704,  1835,  1865,  1872,  1900,  3344,  1170,
    2508,   606,  2441,  2442,  2443,  1902,  3400,  1173,  1901,  1903,
    2453,  1174,   491,  2509,  1905,  1914,  3410,  1917,  2961,  2490,
    2064,  2454,  2491,  1940,   521,  1931,  1986,  2051,  1517,  2491,
    2322, -1518,  2068,  3419,  2070,  2069,  2071,   501,  2072,  2492,
   -1518,  2073,  2074,  2075,  2076,  2065,  3430,  2094,  2077,  2144,
    2078,  2079,  2080,   606,   522,  3406,  2692,  2081,   715,  2082,
    2083,  2084,  3326, -1518,  3443,  2085,  1175,  1176,  2086,  3132,
    2087,  3330, -1518,   719,   720,  2088,  2096,  2089,  2090,  1177,
    2091,  2092,  2323,  1170,  2693, -1518,   857,   523,  2093,  3913,
    2114,   741,  2115,  2120,  4062,  3798, -1518, -1518,  3799,  2130,
    2491,  2492, -1518,  2131,  2455,  2139,  2145,  1672,   747,  2132,
    2165,  2133,  2147,   749,  -653, -1518,   750, -1518,  2148,  2189,
     502,  2149,  3345,  2193,  2173,   502,  4063,  3775,  2164,  2166,
    2171,  3552,  2172,   858,   859,   524,   861,  2182,   863,  2176,
   -1518, -1518,  2186,  4203, -1518, -1518,  2190,  2217,  2194,  2212,
    3496,  1332, -1518,   864,  2064,  2213,  1175,  1176,  2856,  -857,
    3422,  4161,  1173,  1332,  2218,  2252,  2256,  2221,  2222,  3800,
    3801,  2233,  1173, -1794,  3432,  2234, -1518,  2292,  2235,  2065,
    3923,  3943,  3944,  2785,  3946,  3947,  1274,   616,   616,   616,
   -1222,  2262,  1185,  1071,  1173,  1123,  -653,  2272,  1127,  2303,
   -1344,  2810,  2304,  2326,  2334,  2340,  2351,   503,  1178,  1179,
    1180,  1181,  1182,  1183,  1184,  1185,  2456,  2354,  2376,  2395,
    2833,  3537, -1518,  2379,  3539,  2401,  2402,  2403,   616,   616,
     616,  2406,  2492,  2407,  2425,  2427,   616,  2432,  1217,  2492,
     563,  2408,  2776,  2409,  2410,  4064,  2446,  2459,  2460,   880,
     880,  2463,  2464,  2466,  2477,  2472,  2470,  2473,  2474,  4384,
     -64,  2475,   741,  2507,  2476,   525,  3798,  2508,  2530,  3799,
    2521,  1160,  1161,  2531,  1673,  2526, -1518,  2533,  1173,   747,
    2855,  4256,  2534,  2527,   749,  2584,  2457,   750, -1518,  2540,
     505,  2543,  2542,  2544,  2551,  2584,  2552,  2961,  1178,  1179,
    1180,  1181,  1182,  1183,  1184,  1185, -1518,  1673, -1518,  1162,
    2492,  1175,  1176,  2961,  2510,   606,  2556,  2584,  2587,  2557,
    1163,  1175,  1176,  2562,  2563,  1347,  2572,  4072,  4065,  2591,
    -653, -1518, -1518,  1218,  2631, -1518, -1518,   526,  2593,  2653,
    3800,  3801,  2679,  1175,  1176,  2675,  4066,  2671,  2684,  2700,
    2451,  2701,  4384,  1672,  2702,  2713,  2714,  2280,  1219,  1164,
    2726,  2748,  1220,  2755,  2763,  2772,  2783,  1672,  2788,  4067,
    1165,  2773,  1672,  -653,  2803,  2805,  2784,  1672,  2806,  2813,
    3557,  2817,  4389,  4390,  2800,  4392,  2837,  2819,  2814,  3049,
    1942,  2838,  4126,  1800,  2387,  2818,  2823,  1166,  2839,  1221,
     527,  2386,  2860,  1850,  1943,   528,  2861,  4514,  1849,   504,
    2871,  2881,  2885,  2886,  3698,  3698,  3698,  1222,  3769,  2888,
    2887,  4523,  2889,   529,   505,  2895,  4514,  1175,  1176,   505,
     616,  4523,  4429,  2896,  4430,  4431,  2897,  2913,  2917,  2935,
    2918,  3032,  2968,  2970,  3042,  4240,  3044,  3058,   530,  3059,
    3064,  3038,  3065,  1178,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  1167,  2020,   531,  1179,  1180,  1181,  1182,  1183,  1184,
    1185,  4245,   506,  3063,  -573,  3066,  4243,   507,  3090,  1223,
    4072,  2140,  3099,  2452,  3103,  1178,  1179,  1180,  1181,  1182,
    1183,  1184,  1185,  3113,  3213,  3105,  3110,  3112,  3757,  3114,
    1991,  1992,  2453,  1673,  3666,  2399,  3116,  -653,  3117,  4484,
    3170,  4499,   508,  2454,   616,  3171,  3214,  3176,  3215,  3211,
     509,  3218,  3160,   616,  3223,  3230,  1285,  3690,  1153,  1154,
    3252,  3193,  1987,  -791,  -791,  1994,  3227,  1988,  3212,  1989,
    3194,  1990,   912,  -791,  3174,  3254,  3178,  3247,  3255,  1997,
    3195,  1991,  1992,  3256,  3264,  3265,  3183,  1998,  4068,  3273,
    3186,  3698,  3196,  3197,  3198,  3284,  3285,  3807,  1944,  3241,
     606,  1180,  1181,  1182,  1183,  1184,  1185,  1217,  3199,  3812,
    1347,  2000,  1993,  3216,  3292,  3226,  1994,  1995,  3244,  3269,
    3270,  3296,  1996,  3297,  3310,  1452,  2455,  3300,  3311,  2001,
    1997,  3312,  3323,  3329,  3341,  3333,  3342,  1224,  1998,  3343,
     616,  3408,  3401,  3404,  3412,  3407,  1225,  1999,  3414,  3779,
    3418,  3415,  3431,  1589,  1590,  1591,  1592,  1593,  2006,  3425,
    3426,  1226,  2000,   791,  2368,  3460,  3434,  3854,  3440,  3552,
    3441,  3442,  1933,  4526,  3858,  1945,  1452,  3462,  3466,  1227,
    2001,  3467,  3475,  3474,  3772,  1309,  3487,  2239,  2002,  2003,
    2013,   791,  3430,  1988,  1310,  2004,  3165,  1004,  1005,  3923,
    1946,  3516,  1218,  2005,  1311,  1891,  3507,  -931,  3518,  2006,
    3521,  3527,  3540,  3503,  3529,   616,  1312,  1313,  1314,  3545,
    2007,  3805,  3559,  1228,  3558,  3553,  3566,  1219,  3567,  3587,
    2010,  1220,  1315,  3579,  3590,  3591,  3596,  2011,  2456,  3612,
    2008,  3605,  3660,  3663,  2585,  3665,  3667,  3673,  3686,  3677,
    4243,  3687,  3691,  1229,  2012,  1594,  1595,  1596,  1597,  3688,
    1947,  3692,  3694,  3701,  3834,  3704,  3705,  3706,  1221,  3707,
    3708,  3712,   495,  3714,   616,   496,  3725,  3726,  3743,  2009,
    3716,  2010,  3727,  3717,  3721,  3735,  1222,  2836,  2011,  3736,
    3742,  3744,  3752,  3753,  3750,  3762,  3698,  3698,  3268,  3698,
    3698,  3765,  3766,  3864,  3770,  2012,  3771,  3773,  2457,   791,
    3783,  3792,  3793,  2014,   791,  3795, -1430, -1435,  3810,  3796,
    3813,  3838,  1347,  3651,  3821,  4072,  3839,  3200,  2013,  3825,
    3827,  2015,  3843,  3845,  3846,  3654,  3865,  3891,  3852,  3866,
    3881,  3887,  3892,  3893,  3201,   791,  3897,  3911,  1223,  3906,
    4496,  3912,  3929,  3916,  3931,  1948,  3915,  3952,  3958,  4002,
    3965,   791,  3966,  1598,  2014,  1599,  1600,  1601,  4011,   718,
    4025,  4007,   606,  4040,  1602,  4041,  4496,  3715,  4055,  4035,
    4042,  4036,  2015,  3698,  4039,  2019,  2016,  4052,  -346,  4105,
    4123,  4125,  4528,  2021,  4128,  4084,  4135,  4146,  4086,  3926,
    4097,  4153,  4138,  4145,  4168,   791,   791,   791,   791,  4170,
    4171,  4179,  4183,  4181,  1155,  4188,   606,  1156,   791,  4059,
    4176,  3027,  4207,  4210,  2017,  -364,  4237,   616,  4238,  2018,
    4235,  4239,  4272,  4261,  4255,  4258,  2019,  4277,  4284,  4294,
    4297,  2020,  4298,  4304,  2021,  4305,  4309,  4315,  4317,  4316,
    4320,  1316,  1603,  4327,  4341,  3202,  4342,  4343,  4098,  4344,
    4350,  4351,  4352,  4354,  2027,  4355,  4353,  4356,  1317,  4361,
    4363,  4365,  3203,  4109,  4366,  2022,  1224,  4369,  4116, -2325,
    4375,  4391,  1991,  1992,  4388,  1225,  4393,  4394,  4404,  2023,
    2024,  2025,  2026,  4008,  4407,  2599,  2600,  4409,  2607,  4418,
    1226,  2610,  2611,  2612,  2613,  2614,  2615,  2616,  1604,  1605,
    2619,  4420,  2621,  4417,  4426,  2027,  4423,  1994,  1227,  4432,
    2028,  2029,  2030,  4435,  4437,  4442,  4441,  2031,  4449,  4452,
    4446,  1997,  3204,  4436,  4453,  4456,  4460,  4053,  4454,  1998,
    4462,  4465,  4466,  2032,  4468,  4471,  2033,  4475,  4478,  3205,
    4476,  4485,  4500,  4501,  4505,  4118,  1673,  4515,  4525,  2623,
    2781,  3675,  1228,  2000,  3676,  1027,  3869,  2929,  4136,  1991,
    1992,  2028,  2029,  2030,  4271,  4376,  4246,  1452,  2031,  4377,
    1464,  2001,  2035,  3871,  3867,  4006,  4517,  4480,  2836,   576,
    2836,  2377,  1229,  2299,  2032,   922,  1318,  2033,  3207,  3977,
    4489,  3978,  -791,  -791,  1994,  3980,  3981,  3983,  3984,  4401,
    2006,  3985,  -791,  3986,  3987,  3988,  4211,  4302,  1997,  4402,
    2034,  3991,  4374,  3992,  3993,  4314,  1998,  4313,  1984,  2576,
    1532,  2036,  3337,  2035,  4014,   791,  3755,  3229,  3085,  3234,
    3520,  4260,  1803,  4140,  4054,  3758,  1606,  4326,  4451,  4387,
    2000,  4425,  2099,  4178,  4308,   653,  1319,  3693,  2574,  3423,
    1157,  1607,  1608,  3604,  1452,  3083,  3029,  2581,  2001,  4308,
    4059,  3592,  3619,  1320,  2779,  3620,  3661,  3960,  3806,   616,
    3844,  4325,  2010,  4318,  3830,  2915,  3162,  3490,  3488,  2011,
     791,   791,  3492,  -931,   516,  4191,   517,  2006,  4143,   791,
     791,   791,   791,   791,   791,   791,  2012,  4193,  4150,  4194,
    4024,  2665,  2129,   791,   791,  3963,   791,   791,  4148,  2578,
    3017,   791,   791,  1918,   933,   791,   791,   791,   791,  1916,
     791,   791,  3809,  3593,  2360,  4386,  2820,  2097,   791,   791,
    2060,   791,   791,   791,   791,   791,  2801,  3220,   791,   791,
     791,   791,   791,   791,   791,   791,   791,   791,   791,  1673,
     791,  3517,   949,   791,   791,  2014,  2843,  2754,   791,  2010,
    1337,  2385,   791,   791,   791,  3499,  2011,  3185,  2698,   616,
    2908,  4190,  3563,  2015,  4090,   791,   791,   791,  1627,  2753,
    4396,  3674,  3599,  2012,   791,  4265,  4397,  2770,  3933,  4308,
    4470,   791,   791,   791,  1934,   791,  2655,  3925,  2850,  4416,
    2669,  1578,   791,   791,   791,  1734,   791,   791,   791,   791,
     791,  1791,   791,   791,   791,   791,   791,   791,   791,   791,
    1818,  1444,  2826,   791,   791,  1241,  1242,  2019,  1445,  2799,
     616,  3760,  3533,  3532,  1446,  2021,  3573,  4323,   937,  1447,
    2138,  1045,  2014,  2434,  1884,   918,  3049,  3049,  4448,  2435,
    3603,  3519,  1825,   821,  1906,  2293,  4406,  4450,  4345,  4469,
    2015,  4395,  4524,  4414,  4527,  3536,  3837,  4308,  1838,  4308,
    3555,  2869,   882,  2255,  2413,  3556,  4467,   883,  2867,  2859,
    2866,  2383,  4334,  4335,  1326,  1828,  4308,  2339,  3504,  2314,
    4152,  4158,  2119,   852,  1329,  4127,   647,   648,  1031,  1032,
    4518,  3862,     0,  1033,     0,     0,  2027,  1243,     0,     0,
       0,     0,     0,     0,  2019,     0,  4308,  4308,     0,     0,
       0,  4504,  2021,     0,     0,     0,     0,     0,     0,     0,
       0,  4458,     0,     0,     0,     0,  4463,     0,  1244,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1245,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2028,  2029,  2030,     0,     0,     0,     0,  2031,
     791,  4497,     0,     0,     0,  1246,  1053,     0,  1247,     0,
     791,     0,     0,     0,     0,  2032,     0,     0,  2033,     0,
       0,  1248,     0,  2027,     0,  1673,     0,  4497,   791,     0,
       0,     0,     0,     0,     0,   616,     0,  1085,     0,  1673,
       0,     0,     0,  1249,  1673,     0,     0,     0,     0,  1673,
       0,     0,     0,  1102,  2035,     0,  1589,  1590,  1591,  1592,
    1593,     0,     0,     0,     0,     0,     0,     0,  1250,     0,
       0,     0,     0,     0,  1251,     0,     0,     0,     0,  2028,
    2029,  2030,     0,     0,     0,     0,  2031,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1147,     0,  2032,     0,     1,  2033,     2,     0,     0,     0,
       0,     0,     0,     0,     0,  1252,     0,     0,     0,     0,
       0,     3,     0,     0,     0,     4,     0,     0,  1323,  1242,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       6,  2035,     0,     0,     0,     0,     0,     7,     0,     0,
       0,     8,     9,     0,     0,     0,     0,     0,  1594,  1595,
    1596,  1597,     0,     0,     0,     0,     0,    10,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2656,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
    1243,     0,     0,     0,     0,     0,    13,    14,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
      17,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1244,    18,     0,     0,     0,     0,  1253,     0,     0,
       0,  1254,     0,     0,     0,  1245,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1598,  1255,  1599,  1600,
    1601,     0,     0,     0,    20,  1256,     0,  1602,  1246,     0,
       0,  1247,     0,  1257,     0,     0,     0,     0,     0,    21,
       0,    22,     0,     0,  1248,     0,    23,     0,     0,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1258,     0,     0,     0,  1249,     0,     0,     0,
       0,     0,    25,     0,    26,  1259,  1260,  1487,     0,   791,
     791,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1250,    27,     0,   791,     0,     0,  1251,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,  1261,   791,     0,     0,   791,
       0,   791,  1558,  1559,     0,     0,     0,   791,  1252,   791,
     791,  1569,  1570,     0,     0,  1573,  1574,  1575,     0,     0,
       0,     0,     0,     0,  1262,  1583,  1584,     0,  1585,  1586,
       0,  1604,  1605,  1611,     0,     0,     0,  1620,  1621,  1622,
    1623,     0,  1625,     0,     0,     0,  1263,     0,  1264,     0,
    1633,  1634,     0,  1637,  1638,     0,     0,     0,     0,     0,
    1642,  1643,  1644,     0,     0,  1647,  1648,  1649,  1650,  1651,
    1652,     0,  1654,     0,     0,  1657,  1658,     0,     0,    30,
    1661,     0,     0,     0,  1664,  1668,  1669,     0,     0,     0,
       0,     0,     0,     0,   791,     0,    31,  1676,  1677,  1678,
       0,     0,     0,     0,     0,     0,  1686,     0,     0,    32,
       0,  1242,     0,  1691,  1692,  1693,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1253,     0,    34,   791,  1324,    35,  1729,    36,     0,     0,
      37,   791,     0,    38,    39,     0,     0,     0,     0,     0,
    1255,     0,     0,    40,     0,    41,     0,     0,  1256,  1606,
       0,     0,     0,     0,    42,     0,  1257,     0,     0,     0,
      43,     0,     0,     0,  1607,  1608,     0,     0,    44,     0,
       0,     0,  1243,    45,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1259,  1260,
       0,     0,     0,  1244,     0,    47,     0,     0,     0,     0,
       0,     0,    48,     0,     0,     0,     0,  1245,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1246,     0,     0,  1247,     0,     0,     0,     0,  1261,     0,
       0,     0,     0,     0,     0,    49,  1248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,     0,     0,
       0,    51,  1837,     0,    52,     0,     0,  1262,  1249,    53,
       0,     0,  1843,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1488,  1263,
    1871,  1264,     0,  1250,     0,     0,     0,    54,     0,  1251,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1252,     0,     0,     0,     0,     0,     0,     0,  1489,  1490,
    1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,     0,  1499,
    1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,     0,  1508,
    1509,     0,     0,     0,     0,     0,     1,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   791,     4,     0,     0,
     791,     0,     0,     0,     0,   791,   791,     0,     0,     0,
       0,     5,     6,     0,   791,     0,     0,   791,     0,     7,
       0,     0,     0,     8,     9,     0,     0,   791,   791,     0,
     791,   791,     0,   791,   791,   791,   791,   791,     0,    10,
     791,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,     0,     0,     0,     0,     0,   791,    11,   791,     0,
     791,   791,     0,   791,   791,     0,     0,     0,   791,   791,
     791,     0,  1253,     0,   791,   791,   791,     0,   791,    12,
     791,     0,   791,     0,   791,     0,   791,     0,    13,    14,
      15,   791,  1255,  2150,  1510,  1511,     0,     0,     0,     0,
    1256,    16,    17,     0,     0,     0,     0,     0,  1257,     0,
     791,     0,     0,     0,     0,     0,     0,   791,     0,     0,
     791,     0,     0,     0,     0,     0,   791,     0,    19,   791,
       0,     0,     0,   791,     0,     0,     0,  1258,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
    1259,  1260,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    21,     0,    22,     0,     0,     0,     0,    23,     0,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2225,  2227,  2229,    25,   791,    26,     0,     0,     0,
    1261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1262,
       0,    28,  2264,     0,     0,    29,     0,     0,     0,     0,
       0,  2269,     0,  2270,     0,     0,     0,     0,     0,     0,
       0,  1263,     0,  1264,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3346,  3347,
       0,     0,     0,     0,  3348,     0,  3349,     0,  3350,  3351,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3352,     0,     0,     0,     0,
       0,    30,     0,     0,  2927,     0,  2356,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,  2927,  2927,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    33,  3353,     0,     0,  3354,     0,     0,     0,
       0,     0,     0,     0,  3355,  2412,     0,     0,     0,     0,
       0,     0,     0,  2422,    34,     0,     0,    35,     0,    36,
       0,     0,    37,  3356,     0,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,    41,     0,     0,
    3357,     0,     0,     0,     0,     0,    42,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,    45,  3358,    46,  3359,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3360,  3361,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
    2927,  2927,     0,     0,    48,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3362,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    49,     0,     0,
       0,   791,  3363,     0,     0,   791,     0,     0,     0,    50,
       0,  3364,  3365,    51,  3366,     0,    52,     0,     0,     0,
       0,    53,     0,     0,     0,   791,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   791,     0,     0,    54,
    3367,  3368,  3369,     0,     0,   791,     0,   791,     0,   791,
       0,     0,     0,     0,    55,  2592,     0,     0,     0,  3370,
    3371,  3372,     0,     0,     0,     0,  3373,     0,     0,  3374,
       0,     0,     0,     0,     0,     0,   791,     0,     0,     0,
       0,   791,     0,     0,     0,     0,  3375,  3376,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,  3377,
    3378,     0,     0,     0,     0,     0,     0,     0,  2678,     0,
       0,     0,  2680,     0,     0,     0,     0,  2682,  2683,     0,
       0,     0,     0,     0,  3379,     0,  2696,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2703,
    2704,     0,  2705,     0,     0,  2707,  2708,  2709,  2710,  2711,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2715,   791,     0,     0,     0,     0,     0,  2716,     0,
    2717,     0,  2718,  2719,     0,  2720,     0,     0,     0,  3380,
    2723,  2724,  2725,  3381,     0,     0,  2727,  2728,  2729,     0,
    2730,     0,  2732,     0,  2734,  3382,  2736,     0,  2737,     0,
       0,     0,     0,  2738,     0,     0,     0,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3015,     0,  2758,     0,     0,  1988,     0,  1989,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2768,  1991,
    1992,  2771,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3383,     0,     0,  3384,   829,   885,  3385,
    3386,  3387,  3388,     0,     0,     0,     0,     0,     0,     0,
    1993,     0,     0,     0,  1994,     0,     0,     0,     0,     0,
       0,     0,   886,   870,     0,     0,     0,     0,  1997,     0,
       0,     0,     0,   887,     0,     0,  1998,     0,     0,     0,
       0,  3389,  3390,     0,     0,  1999,  1991,  1992,     0,     0,
       0,     0,     0,     0,     0,     0,   888,     0,   889,     0,
    2000,     0,     0,     0,     0,     0,  3391,     0,   890,   791,
     791,     0,     0,     0,  1452,     0,     0,     0,  2001,  -791,
    -791,  1994,     0,     0,     0,     0,  2002,     0,     0,  -791,
       0,     0,     0,  3016,  2927,  1997,     0,     0,     0,     0,
       0,  2005,     0,  1998,     0,     0,     0,  2006,     0,     0,
       0,     0,     0,     0,     0,     0, -1794,   891,     0,     0,
       0,  2422,   892,     0,     0,   893,     0,  2000,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,  2008,     0,
       0,  1452,     0,     0,     0,  2001,     0,     0,     0,     0,
       0,     0,     0,     0,   894,     0,   895,   791,     0,     0,
       0,   791,   791,   896,   791,   897,     0,     0,     0,     0,
       0,     0,     0,   791,  2006,     0,     0,     0,   791,  2010,
       0,   791,     0,   791,   791,     0,  2011,     0,   898,   899,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2012,     0,     0,     0,     0,     0,     0,
       0,     0,   900,     0,     0,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2013,     0,     0,     0,
       0,     0,     0,   901,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2010,     0,     0,     0,
     791,     0,     0,  2011,     0,     0,     0,     0,     0,     0,
       0,     0,  2014,     0,     0,     0,   902,     0,     0,     0,
    2012,     0,     0,     0,   791,     0,     0,     0,     0,     0,
    2015,     0,     0,     0,  2016,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2018,     0,  2014,
       0,   903,     0,     0,  2019,     0,   791,     0,     0,     0,
       0,     0,  2021,     0,   791,     0,     0,  2015,     0,     0,
       0,     0,     0,     0,     0,     0,   904,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   905,   906,     0,     0,
     907,   908,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3095,     0,     0,     0,  3097,  2024,     0,
       0,   909,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2019,     0,     0,     0,     0,     0,  3119,  3120,  2021,
       0,     0,     0,  2027,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3142,     0,
       0,     0,     0,     0,     0,     0,     0,  3152,   910,  3154,
       0,  3156,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   911,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2028,
    2029,  2030,     0,     0,     0,     0,  2031,     0,     0,     0,
    2027,     0, -2362,     0,     0,     0,   912,     0,     0,     0,
       0,     0,  2032,     0,     0,  2033,     0,     0,     0,     0,
       0,     0,  3217,     0,   913,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2035,     0,     0,     0,     0,  2028,  2029,  2030,     0,
       0,     0,     0,  2031,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2032,
       0, -2362,  2033,     0,   791,     0,     0,   914,     0,     0,
       0,     0,     0,     0,  2422,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2035,     0,
       0,     0,     0,     0,   791,   791,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
    3305,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3402,  3403,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,   791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   791,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,     0,     0,     0,  3447,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3465,
       0,     0,     0,  3469,  3470,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3477,     0,     0,     0,     0,
    3479,     0,     0,  3480,     0,  3481,  3482,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3995,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3513,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3513,   791,     0,     0,
       0,     0,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,   791,     0,   791,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,  3995,  3995,  3513,     0,
       0,     0,     0,     0,     0,     0,  3584,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   791,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   791,     0,  3995,  3995,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3513,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   791,     0,  3995,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3995,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3781,  3782,  3995,     0,
       0,     0,     0,     0,     0,  3305,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   791,  3995,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3995,  3995,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   791,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3995,     0,     0,     0,     0,     0,
       0,   791,     0,     0,  3995,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3305,     0,     0,     0,  3890,
       0,     0,     0,     0,   791,     0,     0,     0,     0,     0,
       0,  3995,     0,  3995,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3995,     0,     0,  3513,   791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3995,  3305,  3995,     0,  3995,     0,     0,     0,     0,     0,
       0,  3995,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3995,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3995,  3995,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3995,  3995,     0,     0,     0,  3995,     0,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4078,     0,     0,
       0,     0,     0,     0,  4083,     0,  4085,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4104,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3305,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3305,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4205,     0,  4206,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4214,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4311,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3513,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4359,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4408,     0,     0,     0,     0,     0,     0,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,  4434,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,  1665,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,  4506,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,  3513,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
    1666,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,  1667,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,  2418,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,  2419,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
    2420,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,   701,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,   717,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,  2421,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,  2224,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,  2226,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,   701,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,   717,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,  2228,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,   701,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,   717,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,  1084,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,  1700,     0,   143,     0,     0,     0,  1701,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,   701,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,     0,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,  2677,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,  2722,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,   717,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,  3512,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,   717,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,   701,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,  4381,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,     0,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,   701,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,     0,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   662,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   663,     0,   146,   147,   148,   149,   664,   151,     0,
     152,     0,     0,   665,   153,   666,   667,   668,   154,   669,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   670,   671,   162,   163,     0,   164,   672,   673,
     166,     0,   167,   168,   169,   170,   674,   172,     0,   675,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   676,   190,
       0,   677,   678,   191,     0,     0,   192,   679,   193,   680,
       0,   194,   681,   682,     0,   195,   196,   197,   683,   684,
     685,     0,     0,     0,     0,   686,   200,   687,     0,     0,
     688,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,   689,     0,   228,   229,
     230,   231,   232,   690,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   693,   240,     0,
     241,     0,   242,     0,   243,   694,   245,   695,     0,   247,
       0,   248,     0,   696,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   698,   255,   256,   257,
     699,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,   700,   262,   263,  1715,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,   702,   273,
     274,     0,     0,     0,     0,     0,   703,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,   705,   302,   303,   304,   305,
     706,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   707,   313,     0,     0,   708,   315,   709,   316,     0,
     317,   710,   711,   712,   713,   714,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,   716,     0,   718,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   721,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,   722,   346,   347,     0,   348,   349,   723,   351,
     352,   353,   354,   724,   725,   357,   726,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     727,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,   728,   729,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   730,     0,   731,   394,   395,     0,   396,   397,   398,
     732,   733,   401,   402,   403,   404,     0,   734,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,   735,
     736,   435,   436,     0,   437,   438,   737,   440,   441,   442,
     738,   739,   443,   444,   445,   446,   740,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
     742,   743,   744,   745,     0,     0,     0,     0,     0,   459,
     460,     0,   746,   747,   748,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   751,   475,     0,     0,
     752,   753,   754,   755,   476,     0,     0,   477,   756,     0,
     757,   478,   479,   480,   758,   759,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     760,     0,     0,     0,   761,   762,     0,     0,     0,     0,
     763,   764,     0,     0,   765,   766,     0,     0,   767,   768,
     137,     0,   662,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   663,     0,   146,   147,
     148,   149,   664,   151,     0,   152,     0,     0,   665,   153,
     666,   667,   668,   154,   669,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   670,   671,   162,
     163,     0,   164,   672,   673,   166,     0,   167,   168,   169,
     170,   674,   172,     0,   675,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   676,   190,     0,   677,   678,   191,     0,
       0,   192,   679,   193,   680,     0,   194,   681,   682,     0,
     195,   196,   197,   683,   684,   685,     0,     0,     0,     0,
     686,   200,   687,     0,     0,   688,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,   689,     0,   228,   229,   230,   231,   232,   690,   691,
     233,   234,     0,   235,   236,   237,   692,     0,   238,     0,
       0,     0,   693,   240,     0,   241,     0,   242,     0,   243,
     694,   245,   695,     0,   247,     0,   248,     0,   696,     0,
     249,   250,     0,   251,   697,     0,   252,   253,     0,     0,
       0,   698,   255,   256,   257,   699,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,   700,   262,   263,  1717,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,   702,   273,   274,     0,     0,     0,     0,
       0,   703,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,   704,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
     705,   302,   303,   304,   305,   706,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   707,   313,     0,     0,
     708,   315,   709,   316,     0,   317,   710,   711,   712,   713,
     714,   322,   323,   324,   325,   326,     0,   715,   327,   328,
       0,     0,   329,   330,   331,   332,   716,     0,   718,   333,
     334,     0,   719,   720,   335,     0,   336,   337,   721,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   723,   351,   352,   353,   354,   724,   725,
     357,   726,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   727,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,   728,   729,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   730,     0,   731,   394,
     395,     0,   396,   397,   398,   732,   733,   401,   402,   403,
     404,     0,   734,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,   735,   736,   435,   436,     0,   437,
     438,   737,   440,   441,   442,   738,   739,   443,   444,   445,
     446,   740,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   741,   453,   454,     0,   742,   743,   744,   745,     0,
       0,     0,     0,     0,   459,   460,     0,   746,   747,   748,
     462,   463,   464,   749,   465,   466,   750,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   751,   475,     0,     0,   752,   753,   754,   755,   476,
       0,     0,   477,   756,     0,   757,   478,   479,   480,   758,
     759,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   760,     0,     0,     0,   761,
     762,     0,     0,     0,     0,   763,   764,     0,     0,   765,
     766,     0,     0,   767,   768,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,   666,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   189,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
    1753,     0,     0,     0,     0,   199,   200,   687,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   228,   229,
     230,   231,   232,     0,   691,   233,   234,     0,   235,   236,
     237,   692,     0,   238,     0,     0,     0,   239,   240,     0,
     241,     0,   242,     0,   243,   244,   245,   246,     0,   247,
       0,   248,     0,     0,     0,   249,   250,     0,   251,   697,
       0,   252,   253,     0,     0,     0,   254,   255,   256,   257,
       0,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,     0,   262,   263,     0,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,     0,   273,
     274,     0,     0,     0,     0,     0,   275,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,   704,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,     0,   302,   303,   304,   305,
       0,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,   316,     0,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   715,   327,   328,     0,     0,   329,   330,   331,
     332,     0,     0,     0,   333,   334,     0,   719,   720,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     367,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   405,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   741,   453,   454,     0,
    1754,   456,   457,  1755,     0,     0,     0,     0,     0,   459,
     460,     0,     0,   747,   461,   462,   463,   464,   749,   465,
     466,   750,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     488,     0,     0,     0,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,   767,   768,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,  2509,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
     502,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,  2064,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,  2065,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,  3079,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,  2020,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,  -478,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   505,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,     0,   488,
       0,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   145,  2580,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,   185,
    2509,   186,   187,   188,   189,   190,     0,     0,     0,   191,
       0,     0,   192,     0,   193,     0,     0,   194,     0,     0,
       0,   195,   196,   197,     0,     0,   198,     0,     0,     0,
       0,   199,   200,     0,     0,     0,     0,   201,   202,     0,
     203,     0,     0,     0,   204,     0,   205,   206,   207,   208,
     209,     0,     0,     0,   210,     0,     0,   211,   212,   213,
       0,     0,     0,   214,     0,   215,   216,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,   225,
     226,   227,     0,     0,   228,   229,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,     0,     0,   238,
       0,     0,     0,   239,   240,     0,   241,   502,   242,     0,
     243,   244,   245,   246,     0,   247,     0,   248,     0,     0,
       0,   249,   250,     0,   251,     0,     0,   252,   253,     0,
       0,     0,   254,   255,   256,   257,     0,     0,   258,   259,
     260,  2064,     0,   261,     0,     0,     0,     0,   262,   263,
       0,     0,     0,   264,     0,     0,     0,   265,   266,     0,
     267,   268,     0,     0,     0,   269,  2065,     0,   270,   271,
       0,     0,   272,     0,     0,   273,   274,     0,     0,     0,
       0,     0,   275,   276,     0,   277,     0,   278,     0,   279,
     280,     0,     0,     0,     0,     0,     0,     0,   281,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,     0,   299,   300,
     301,     0,   302,   303,   304,   305,     0,   306,   307,     0,
       0,     0,     0,   308,   309,   310,   311,   312,   313,     0,
       0,   314,   315,     0,   316,     0,   317,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,     0,   327,
     328,     0,     0,   329,   330,   331,   332,     0,     0,     0,
     333,   334,     0,     0,     0,   335,     0,   336,   337,   338,
       0,   339,   340,   341,     0,   342,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   343,   344,   345,     0,   346,
     347,     0,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,     0,     0,   358,   359,   360,     0,   361,     0,
     362,   363,   364,   365,   366,     0,   367,   368,   369,     0,
       0,   370,     0,     0,     0,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,   387,     0,
     388,   389,     0,   390,   391,   392,     0,   393,     0,     0,
     394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
     403,   404,     0,   405,   406,     0,     0,     0,   407,   408,
     409,   410,     0,     0,     0,   411,     0,     0,     0,   412,
       0,   413,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   505,     0,     0,     0,     0,   422,   423,   424,     0,
     425,   426,     0,   427,     0,     0,   428,     0,     0,   429,
     430,   431,   432,   433,   434,     0,     0,   435,   436,     0,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,     0,   447,   448,     0,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,     0,     0,     0,
     461,   462,   463,   464,     0,   465,   466,     0,   467,   468,
       0,   469,   470,     0,     0,   471,     0,     0,   472,     0,
     473,     0,   474,   475,     0,     0,     0,     0,     0,     0,
     476,     0,     0,   477,     0,     0,     0,   478,   479,   480,
     481,   482,     0,     0,     0,     0,     0,     0,   483,   484,
       0,   485,   486,   487,     0,     0,   488,     0,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,  2580,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,  2368,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,     0,   488,     0,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,  2827,     0,     0,   144,     0,
       0,   145,   768,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   189,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   228,   229,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,     0,     0,   238,     0,     0,     0,   239,   240,     0,
     241,     0,   242,     0,   243,   244,   245,   246,     0,   247,
       0,   248,     0,     0,     0,   249,   250,     0,   251,     0,
       0,   252,   253,     0,     0,     0,   254,   255,   256,   257,
       0,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,     0,   262,   263,     0,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,     0,   273,
     274,     0,     0,     0,     0,     0,   275,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,     0,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,     0,   302,   303,   304,   305,
       0,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,   316,     0,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,     0,   327,   328,     0,     0,   329,   330,   331,
     332,     0,     0,     0,   333,   334,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     367,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   405,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,     0,     0,     0,   461,   462,   463,   464,     0,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     488,     0,     0,     0,   137,     0,   138,   139,   140,   141,
     142,     0,  4510,   143,     0,     0,     0,   144,  4511,   768,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,     0,   488,
       0,     0,     0,   137,     0,   138,   139,   140,   141,   142,
    1088,     0,   143,     0,     0,     0,   144,     0,   768,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,   185,     0,   186,   187,   188,   189,   190,     0,     0,
       0,   191,     0,     0,   192,     0,   193,     0,     0,   194,
       0,     0,     0,   195,   196,   197,     0,     0,   198,     0,
       0,     0,     0,   199,   200,     0,     0,     0,     0,   201,
     202,     0,   203,     0,     0,     0,   204,     0,   205,   206,
     207,   208,   209,     0,     0,     0,   210,     0,     0,   211,
     212,   213,     0,     0,     0,   214,     0,   215,   216,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,   225,   226,   227,     0,     0,   228,   229,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,     0,
       0,   238,     0,     0,     0,   239,   240,     0,   241,     0,
     242,     0,   243,   244,   245,   246,     0,   247,     0,   248,
       0,     0,     0,   249,   250,     0,   251,     0,     0,   252,
     253,     0,     0,     0,   254,   255,   256,   257,     0,     0,
     258,   259,   260,     0,     0,   261,     0,     0,     0,     0,
     262,   263,     0,  1300,     0,   264,     0,     0,     0,   265,
     266,     0,   267,   268,     0,     0,     0,   269,     0,     0,
     270,   271,     0,     0,   272,     0,     0,   273,   274,     0,
       0,     0,     0,     0,   275,   276,     0,   277,     0,   278,
       0,   279,   280,     0,     0,     0,     0,     0,     0,     0,
     281,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,     0,
     299,   300,   301,     0,   302,   303,   304,   305,     0,   306,
     307,     0,     0,     0,     0,   308,   309,   310,   311,   312,
     313,     0,     0,   314,   315,     0,   316,     0,   317,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
       0,   327,   328,     0,     0,   329,   330,   331,   332,     0,
       0,     0,   333,   334,     0,     0,     0,   335,     0,   336,
     337,   338,     0,   339,   340,   341,     0,   342,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   343,   344,   345,
       0,   346,   347,     0,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,     0,     0,   358,   359,   360,     0,
     361,     0,   362,   363,   364,   365,   366,     0,   367,   368,
     369,     0,     0,   370,     0,     0,     0,   371,   372,   373,
     374,   375,     0,     0,   376,   377,   378,   379,   380,     0,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
     387,     0,   388,   389,     0,   390,   391,   392,     0,   393,
       0,     0,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,     0,   405,   406,     0,     0,     0,
     407,   408,   409,   410,     0,     0,     0,   411,     0,     0,
       0,   412,     0,   413,   414,   415,   416,     0,   417,   418,
     419,   420,   421,     0,     0,     0,     0,     0,   422,   423,
     424,     0,   425,   426,     0,   427,     0,     0,   428,     0,
       0,   429,   430,   431,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,     0,
       0,     0,   461,   462,   463,   464,     0,   465,   466,     0,
     467,   468,     0,   469,   470,     0,     0,   471,     0,     0,
     472,     0,   473,     0,   474,   475,     0,     0,     0,     0,
       0,     0,   476,     0,     0,   477,     0,     0,     0,   478,
     479,   480,   481,   482,     0,     0,     0,     0,     0,     0,
     483,   484,     0,   485,   486,   487,     0,     0,   488,     0,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,   538,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   488,     0,     0,     0,   137,
       0,   138,   139,   140,   141,   142,  2579,     0,   143,     0,
       0,     0,   144,     0,  2580,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   189,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,     0,     0,   238,     0,     0,
       0,   239,   240,     0,   241,     0,   242,     0,   243,   244,
     245,   246,     0,   247,     0,   248,     0,     0,     0,   249,
     250,     0,   251,     0,     0,   252,   253,     0,     0,     0,
     254,   255,   256,   257,     0,     0,   258,   259,   260,     0,
       0,   261,     0,     0,     0,     0,   262,   263,     0,     0,
       0,   264,     0,     0,     0,   265,   266,     0,   267,   268,
       0,     0,     0,   269,     0,     0,   270,   271,     0,     0,
     272,     0,     0,   273,   274,     0,     0,     0,     0,     0,
     275,   276,     0,   277,     0,   278,     0,   279,   280,     0,
       0,     0,     0,     0,     0,     0,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,     0,   299,   300,   301,     0,
     302,   303,   304,   305,     0,   306,   307,     0,     0,     0,
       0,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,   316,     0,   317,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,     0,   327,   328,     0,
       0,   329,   330,   331,   332,     0,     0,     0,   333,   334,
       0,     0,     0,   335,     0,   336,   337,   338,     0,   339,
     340,   341,     0,   342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   343,   344,   345,     0,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,     0,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,     0,     0,     0,   461,   462,
     463,   464,     0,   465,   466,     0,   467,   468,     0,   469,
     470,     0,     0,   471,     0,     0,   472,     0,   473,     0,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
       0,     0,     0,     0,     0,     0,   483,   484,     0,   485,
     486,   487,     0,     0,   488,     0,     0,     0,     0,   137,
    2789,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,   538,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   189,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,     0,     0,   238,     0,     0,
       0,   239,   240,     0,   241,     0,   242,     0,   243,   244,
     245,   246,     0,   247,     0,   248,     0,     0,     0,   249,
     250,     0,   251,     0,     0,   252,   253,     0,     0,     0,
     254,   255,   256,   257,     0,     0,   258,   259,   260,     0,
       0,   261,     0,     0,     0,     0,   262,   263,     0,     0,
       0,   264,     0,     0,     0,   265,   266,     0,   267,   268,
       0,     0,     0,   269,     0,     0,   270,   271,     0,     0,
     272,     0,     0,   273,   274,     0,     0,     0,     0,     0,
     275,   276,     0,   277,     0,   278,     0,   279,   280,     0,
       0,     0,     0,     0,     0,     0,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,     0,   299,   300,   301,     0,
     302,   303,   304,   305,     0,   306,   307,     0,     0,     0,
       0,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,   316,     0,   317,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,     0,   327,   328,     0,
       0,   329,   330,   331,   332,     0,     0,     0,   333,   334,
       0,     0,     0,   335,     0,   336,   337,   338,     0,   339,
     340,   341,     0,   342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   343,   344,   345,     0,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,     0,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,     0,     0,     0,   461,   462,
     463,   464,     0,   465,   466,     0,   467,   468,     0,   469,
     470,     0,     0,   471,     0,     0,   472,     0,   473,     0,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
       0,     0,     0,     0,     0,     0,   483,   484,     0,   485,
     486,   487,     0,     0,   488,     0,     0,     0,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,  4511,   768,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,     0,   488,     0,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   145,   538,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,   185,     0,   186,   187,   188,   189,   190,
       0,     0,     0,   191,     0,     0,   192,     0,   193,     0,
       0,   194,     0,     0,     0,   195,   196,   197,     0,     0,
     198,     0,     0,     0,     0,   199,   200,     0,     0,     0,
       0,   201,   202,     0,   203,     0,     0,     0,   204,     0,
     205,   206,   207,   208,   209,     0,     0,     0,   210,     0,
       0,   211,   212,   213,     0,     0,     0,   214,     0,   215,
     216,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,   225,   226,   227,     0,     0,   228,   229,
     230,   601,   232,     0,     0,   233,   234,     0,   235,   236,
     237,     0,     0,   238,     0,     0,     0,   602,   240,     0,
     241,     0,   242,     0,   243,   244,   245,   246,     0,   247,
       0,   248,     0,     0,     0,   249,   250,     0,   251,     0,
       0,   252,   253,     0,     0,     0,   254,   255,   256,   257,
       0,     0,   258,   259,   260,     0,     0,   261,     0,     0,
       0,     0,   262,   263,     0,     0,     0,   264,     0,     0,
       0,   265,   266,     0,   267,   268,     0,     0,     0,   269,
       0,     0,   270,   271,     0,     0,   272,     0,     0,   273,
     274,     0,     0,     0,     0,     0,   275,   276,     0,   277,
       0,   278,     0,   279,   280,     0,     0,     0,     0,     0,
       0,     0,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,     0,   299,   300,   301,     0,   302,   303,   304,   305,
       0,   306,   307,     0,     0,     0,     0,   308,   309,   310,
     311,   312,   313,     0,     0,   314,   315,     0,   316,     0,
     317,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,     0,   327,   328,     0,     0,   329,   330,   331,
     332,     0,     0,     0,   333,   334,     0,     0,     0,   335,
       0,   336,   337,   338,     0,   339,   340,   341,     0,   342,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
     344,   345,     0,   346,   347,     0,   603,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,     0,   358,   359,
     360,     0,   361,     0,   362,   363,   364,   365,   366,     0,
     367,   368,   369,     0,     0,   370,     0,     0,     0,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,   387,     0,   388,   389,     0,   390,   391,   392,
       0,   393,     0,     0,   394,   395,     0,   396,   397,   398,
     399,   400,   401,   402,   403,   404,     0,   405,   406,     0,
       0,     0,   407,   408,   409,   410,     0,     0,     0,   411,
       0,     0,     0,   412,     0,   413,   414,   415,   416,     0,
     417,   418,   419,   420,   421,     0,     0,     0,     0,     0,
     422,   423,   424,     0,   425,   426,     0,   427,     0,     0,
     428,     0,     0,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,     0,     0,     0,   461,   462,   463,   464,     0,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,   471,
       0,     0,   472,     0,   473,     0,   474,   475,     0,     0,
       0,     0,     0,     0,   476,     0,     0,   477,     0,     0,
       0,   478,   479,   480,   481,   482,     0,     0,     0,     0,
       0,     0,   483,   484,     0,   485,   486,   487,     0,     0,
     488,     0,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,   538,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,     0,   488,     0,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,   768,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,   185,     0,   186,
     187,   188,   189,   190,     0,     0,     0,   191,     0,     0,
     192,     0,   193,     0,     0,   194,     0,     0,     0,   195,
     196,   197,     0,     0,   198,     0,     0,     0,     0,   199,
     200,     0,     0,     0,     0,   201,   202,     0,   203,     0,
       0,     0,   204,     0,   205,   206,   207,   208,   209,     0,
       0,     0,   210,     0,     0,   211,   212,   213,     0,     0,
       0,   214,     0,   215,   216,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,   225,   226,   227,
       0,     0,   228,   229,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,     0,     0,   238,     0,     0,
       0,   239,   240,     0,   241,     0,   242,     0,   243,   244,
     245,   246,     0,   247,     0,   248,     0,     0,     0,   249,
     250,     0,   251,     0,     0,   252,   253,     0,     0,     0,
     254,   255,   256,   257,     0,     0,   258,   259,   260,     0,
       0,   261,     0,     0,     0,     0,   262,   263,     0,     0,
       0,   264,     0,     0,     0,   265,   266,     0,   267,   268,
       0,     0,     0,   269,     0,     0,   270,   271,     0,     0,
     272,     0,     0,   273,   274,     0,     0,     0,     0,     0,
     275,   276,     0,   277,     0,   278,     0,   279,   280,     0,
       0,     0,     0,     0,     0,     0,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,     0,   299,   300,   301,     0,
     302,   303,   304,   305,     0,   306,   307,     0,     0,     0,
       0,   308,   309,   310,   311,   312,   313,     0,     0,   314,
     315,     0,   316,     0,   317,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,     0,   327,   328,     0,
       0,   329,   330,   331,   332,     0,     0,     0,   333,   334,
       0,     0,     0,   335,     0,   336,   337,   338,     0,   339,
     340,   341,     0,   342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   343,   344,   345,     0,   346,   347,     0,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
       0,     0,   358,   359,   360,     0,   361,     0,   362,   363,
     364,   365,   366,     0,   367,   368,   369,     0,     0,   370,
       0,     0,     0,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,   387,     0,   388,   389,
       0,   390,   391,   392,     0,   393,     0,     0,   394,   395,
       0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
       0,   405,   406,     0,     0,     0,   407,   408,   409,   410,
       0,     0,     0,   411,     0,     0,     0,   412,     0,   413,
     414,   415,   416,     0,   417,   418,   419,   420,   421,     0,
       0,     0,     0,     0,   422,   423,   424,     0,   425,   426,
       0,   427,     0,     0,   428,     0,     0,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,     0,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,     0,     0,     0,   461,   462,
     463,   464,     0,   465,   466,     0,   467,   468,     0,   469,
     470,     0,     0,   471,     0,     0,   472,     0,   473,     0,
     474,   475,     0,     0,     0,     0,     0,     0,   476,     0,
       0,   477,     0,     0,     0,   478,   479,   480,   481,   482,
       0,     0,     0,     0,     0,     0,   483,   484,     0,   485,
     486,   487,     0,     0,   488,     0,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,  2580,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   869,
     870,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,   871,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     872,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     873,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   874,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   875,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   876,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     877,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
       0,   488,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,   878,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,   614,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   134,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,     0,   488,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,  1351,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   614,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   134,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,     0,   488,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,  1687,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   869,   870,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,   871,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   872,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   873,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   874,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   875,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   876,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,     0,   488,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,   878,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,   614,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   134,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,     0,   488,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,  3549,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,  1234,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
       0,   488,   137,     0,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,  1235,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,     0,   488,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,     0,  1235,   146,   147,   148,   149,
     150,     0,     0,  -366,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
       0,     0,     0,     0,   161,  3968,     0,   162,   163,     0,
     164,     0,     0,     0,     0,   167,   168,   169,  3969,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   178,     0,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,     0,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,     0,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,     0,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
    3970,   235,   236,   237,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,  3971,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,  3972,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
    3973,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,  -321,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
    3974,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   344,   345,     0,     0,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,  -321,     0,   386,     0,     0,     0,   388,     0,     0,
     390,   391,   392,  3975,   393,     0,     0,     0,   395,     0,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,     0,   431,   432,
     433,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,     0,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,     0,     0,
       0,     0,   471,     0,     0,   472,     0,     0,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,  -321,     0,     0,     0,   483,     0,     0,   485,     0,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,  4503,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,  2140,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,  2857,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,  3508,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,  3554,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
    2487,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,  2488,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,  2489,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
    2490,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,  1004,  1005,     0,   333,   334,     0,
       0,  2491,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
    4490,   563,  4491,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,  2492,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
    1340,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,  1341,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,  1342,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,   614,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,  1343,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   134,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,  1353,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,  1354,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,   614,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   134,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,  1885,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,  1886,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,   722,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,  1887,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,  1340,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,  1341,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     614,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   134,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,   961,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   614,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   134,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,   137,   488,   138,   139,   140,   141,   142,  1375,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,   614,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   134,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,   938,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
     939,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   940,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,  2396,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,   614,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   134,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,  1340,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
     614,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   134,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,   614,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   134,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,  2853,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   134,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,  4410,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,  4411,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,   563,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,  1040,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,   871,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,  1861,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,  2057,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,   871,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,  2949,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,  2957,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,   189,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,   200,
       0,     0,     0,  2981,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,   210,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,   215,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,   227,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,   238,     0,     0,     0,
     239,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,   249,   250,
       0,   251,     0,     0,   252,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,   263,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,   270,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,   333,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
     341,     0,   342,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   343,   344,   345,     0,   346,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,     0,
       0,   358,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,   387,     0,   388,   389,     0,
     390,   391,   392,     0,   393,     0,     0,   394,   395,     0,
     396,   397,   398,   399,   400,   401,   402,   403,   404,     0,
     405,   406,     0,     0,     0,   407,   408,   409,   410,     0,
       0,     0,   411,     0,     0,     0,   412,     0,   413,   414,
     415,   416,     0,   417,   418,   419,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,   461,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,   469,   470,
       0,     0,   471,     0,     0,   472,     0,   473,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,   484,     0,   485,   486,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,   189,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,   200,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,   210,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,   215,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,   227,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,     0,     0,
     238,     0,     0,     0,   239,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,   249,   250,     0,   251,     0,     0,   252,   253,
       0,     0,     0,   254,   255,   256,   257,     0,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
     263,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,     0,     0,     0,   269,     0,     0,   270,
     271,     0,     0,   272,     0,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,     0,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,   333,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,   341,     0,   342,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   343,   344,   345,     0,
     346,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,     0,     0,   358,   359,   360,  3045,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,   387,
       0,   388,   389,     0,   390,   391,   392,     0,   393,     0,
       0,   394,   395,     0,   396,   397,   398,   399,   400,   401,
     402,   403,   404,     0,   405,   406,     0,     0,     0,   407,
     408,   409,   410,     0,     0,     0,   411,     0,     0,     0,
     412,     0,   413,   414,   415,   416,     0,   417,   418,   419,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,   461,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,   469,   470,     0,     0,   471,     0,     0,   472,
       0,   473,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,     0,     0,     0,     0,   483,
     484,     0,   485,   486,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,   189,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,   200,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,   210,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
     215,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,   227,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,     0,     0,   238,     0,     0,     0,   239,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,   249,   250,     0,   251,
       0,     0,   252,   253,     0,     0,     0,   254,   255,   256,
     257,     0,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,   263,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,     0,     0,     0,
     269,     0,     0,   270,   271,     0,     0,   272,     0,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
       0,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,   333,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,   341,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   344,   345,     0,   346,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,     0,     0,   358,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,   387,     0,   388,   389,     0,   390,   391,
     392,     0,   393,     0,     0,   394,   395,     0,   396,   397,
     398,   399,   400,   401,   402,   403,   404,     0,   405,   406,
       0,     0,     0,   407,   408,   409,   410,     0,     0,     0,
     411,     0,     0,     0,   412,     0,   413,   414,   415,   416,
       0,   417,   418,   419,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   134,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,   461,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,   469,   470,     0,     0,
     471,     0,     0,   472,     0,   473,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,     0,
       0,     0,     0,   483,   484,     0,   485,   486,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,   189,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,   200,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,   210,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,   215,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
     227,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,     0,     0,   238,     0,
       0,     0,   239,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
     249,   250,     0,   251,     0,     0,   252,   253,     0,     0,
       0,   254,   255,   256,   257,     0,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,   263,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,     0,     0,     0,   269,     0,     0,   270,   271,     0,
       0,   272,     0,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,     0,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,   333,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,   341,     0,   342,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   343,   344,   345,     0,   346,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,     0,     0,   358,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,   387,     0,   388,
     389,     0,   390,   391,   392,     0,   393,     0,     0,   394,
     395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,     0,   405,   406,     0,     0,     0,   407,   408,   409,
     410,     0,     0,     0,   411,     0,     0,     0,   412,     0,
     413,   414,   415,   416,     0,   417,   418,   419,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,   461,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
     469,   470,     0,     0,   471,     0,     0,   472,     0,   473,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,     0,     0,     0,     0,   483,   484,     0,
     485,   486,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,   189,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,   200,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,   210,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,   215,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,   227,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,     0,   235,  1786,   237,
       0,     0,   238,     0,     0,     0,   239,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,   249,   250,     0,   251,     0,     0,
     252,   253,     0,     0,     0,   254,   255,   256,   257,     0,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,   263,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,     0,     0,     0,   269,     0,
       0,   270,   271,     0,     0,   272,     0,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,     0,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,  1787,   331,   332,
       0,     0,     0,   333,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,   341,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   344,
     345,     0,   346,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,     0,   358,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,   387,     0,   388,   389,     0,   390,   391,   392,     0,
     393,     0,     0,   394,   395,     0,   396,   397,   398,   399,
     400,   401,   402,   403,   404,     0,   405,   406,     0,     0,
       0,   407,   408,   409,   410,     0,     0,     0,   411,     0,
       0,     0,   412,     0,   413,   414,   415,   416,     0,   417,
     418,   419,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,   461,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,   469,   470,     0,     0,   471,     0,
       0,   472,     0,   473,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,     0,     0,     0,
       0,   483,   484,     0,   485,   486,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,     0,     0,  -366,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
       0,     0,     0,     0,   161,  3968,     0,   162,   163,     0,
     164,     0,     0,     0,     0,   167,   168,   169,  3969,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   178,     0,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,     0,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,     0,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,     0,     0,     0,   211,   212,   213,     0,  -336,  -336,
     214,     0,  -336,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
    3970,   235,   236,   237,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,  3971,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,  3972,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
    3973,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,  -321,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
    3974,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   344,   345,     0,     0,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,  -321,     0,   386,     0,     0,     0,   388,     0,     0,
     390,   391,   392,  3975,   393,     0,     0,     0,   395,     0,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,     0,   431,   432,
     433,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,     0,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,     0,     0,
       0,     0,   471,     0,     0,   472,     0,     0,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,  -321,     0,     0,     0,   483,     0,     0,   485,     0,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,     0,     0,  -366,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,     0,     0,     0,     0,   161,  3968,
       0,   162,   163,     0,   164,     0,     0,     0,     0,   167,
     168,   169,  3969,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   178,     0,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,     0,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,     0,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,     0,     0,     0,   211,   212,
     213,     0,  -357,     0,   214,     0,  -357,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,  3970,   235,   236,   237,     0,     0,
       0,     0,     0,     0,     0,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,   253,
       0,     0,     0,   254,   255,   256,   257,  3971,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
       0,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,  3972,     0,     0,   269,     0,     0,     0,
     271,     0,     0,   272,  3973,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,  -321,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,     0,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,  3974,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   344,   345,     0,
       0,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
       0,     0,   383,     0,   385,  -321,     0,   386,     0,     0,
       0,   388,     0,     0,   390,   391,   392,  3975,   393,     0,
       0,     0,   395,     0,   396,   397,   398,   399,   400,   401,
       0,   403,   404,     0,   405,     0,     0,     0,     0,   407,
     408,   409,     0,     0,     0,     0,   411,     0,     0,     0,
     412,     0,     0,   414,     0,   416,     0,   417,     0,     0,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,     0,   431,   432,   433,   434,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,     0,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,     0,     0,     0,     0,   471,     0,     0,   472,
       0,     0,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,  -357,     0,  -321,     0,     0,     0,   483,
       0,     0,   485,     0,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,     0,
       0,  -366,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,     0,     0,
       0,     0,   161,  3968,     0,   162,   163,     0,   164,     0,
       0,     0,     0,   167,   168,   169,  3969,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   178,     0,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,     0,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,     0,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,     0,
       0,     0,   211,   212,   213,     0,  -354,     0,   214,     0,
    -354,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,  3970,   235,
     236,   237,     0,     0,     0,     0,     0,     0,     0,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,   253,     0,     0,     0,   254,   255,   256,
     257,  3971,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,     0,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,  3972,     0,     0,
     269,     0,     0,     0,   271,     0,     0,   272,  3973,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
    -321,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,     0,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,  3974,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   344,   345,     0,     0,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,     0,     0,   383,     0,   385,  -321,
       0,   386,     0,     0,     0,   388,     0,     0,   390,   391,
     392,  3975,   393,     0,     0,     0,   395,     0,   396,   397,
     398,   399,   400,   401,     0,   403,   404,     0,   405,     0,
       0,     0,     0,   407,   408,   409,     0,     0,     0,     0,
     411,     0,     0,     0,   412,     0,     0,   414,     0,   416,
       0,   417,     0,     0,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,     0,   431,   432,   433,   434,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,     0,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,     0,     0,     0,     0,
     471,     0,     0,   472,     0,     0,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,  -354,     0,  -321,
       0,     0,     0,   483,     0,     0,   485,     0,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,     0,     0,  -366,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,     0,     0,     0,     0,   161,  3968,     0,   162,
     163,     0,   164,     0,     0,     0,     0,   167,   168,   169,
    3969,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     178,     0,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,     0,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,     0,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,     0,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,  4307,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,  3970,   235,   236,   237,     0,     0,     0,     0,
       0,     0,     0,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,   253,     0,     0,
       0,   254,   255,   256,   257,  3971,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,     0,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,  3972,     0,     0,   269,     0,     0,     0,   271,     0,
       0,   272,  3973,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,  -321,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,     0,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,  3974,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   344,   345,     0,     0,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,     0,     0,     0,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,     0,     0,
     383,     0,   385,  -321,     0,   386,     0,     0,     0,   388,
       0,     0,   390,   391,   392,  3975,   393,     0,     0,     0,
     395,     0,   396,   397,   398,   399,   400,   401,     0,   403,
     404,     0,   405,     0,     0,     0,     0,   407,   408,   409,
       0,     0,     0,     0,   411,     0,     0,     0,   412,     0,
       0,   414,     0,   416,     0,   417,     0,     0,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,     0,
     431,   432,   433,   434,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,     0,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
       0,     0,     0,     0,   471,     0,     0,   472,     0,     0,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,  -321,     0,     0,     0,   483,     0,     0,
     485,     0,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -366,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  3968,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,   168,   169,  3969,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   178,     0,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,     0,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,     0,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,  -359,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,  3970,   235,   236,   237,
       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,   253,     0,     0,     0,   254,   255,   256,   257,  3971,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,     0,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,  3972,     0,     0,   269,     0,
       0,     0,   271,     0,     0,   272,  3973,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,  -321,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,     0,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,  3974,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   344,
     345,     0,     0,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,     0,     0,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,     0,     0,   383,     0,   385,  -321,     0,   386,
       0,     0,     0,   388,     0,     0,   390,   391,   392,  3975,
     393,     0,     0,     0,   395,     0,   396,   397,   398,   399,
     400,   401,     0,   403,   404,     0,   405,     0,     0,     0,
       0,   407,   408,   409,     0,     0,     0,     0,   411,     0,
       0,     0,   412,     0,     0,   414,     0,   416,     0,   417,
       0,     0,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,     0,   431,   432,   433,   434,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,     0,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,     0,     0,     0,     0,   471,     0,
       0,   472,     0,     0,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,  -321,     0,     0,
       0,   483,     0,     0,   485,     0,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,     0,     0,  -366,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
       0,     0,     0,     0,   161,  3968,     0,   162,   163,     0,
     164,     0,     0,     0,     0,   167,   168,   169,  3969,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   178,     0,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,     0,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,     0,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,     0,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,  4415,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
    3970,   235,   236,   237,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,  3971,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,  3972,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
    3973,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,  -321,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
    3974,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   344,   345,     0,     0,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,  -321,     0,   386,     0,     0,     0,   388,     0,     0,
     390,   391,   392,  3975,   393,     0,     0,     0,   395,     0,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,     0,   431,   432,
     433,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,     0,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,     0,     0,
       0,     0,   471,     0,     0,   472,     0,     0,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,  -321,     0,     0,     0,   483,     0,     0,   485,     0,
     487,     0,   137,   488,   138,   139,   140,   141,   142,     0,
       0,   143,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,     0,     0,  -366,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,     0,     0,     0,     0,   161,  3968,
       0,   162,   163,     0,   164,     0,     0,     0,     0,   167,
     168,   169,  3969,   171,   172,     0,   173,   174,     0,   175,
     176,     0,   178,     0,   180,   181,   182,   183,     0,   184,
     185,     0,   186,   187,   188,     0,   190,     0,     0,     0,
     191,     0,     0,   192,     0,   193,     0,     0,   194,     0,
       0,     0,   195,   196,   197,     0,     0,   198,     0,     0,
       0,     0,   199,     0,     0,     0,     0,     0,   201,   202,
       0,   203,     0,     0,     0,   204,     0,   205,   206,   207,
     208,   209,     0,     0,     0,     0,     0,     0,   211,   212,
     213,     0,     0,     0,   214,     0,  4461,   216,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
     225,   226,     0,     0,     0,   228,   229,   230,   231,   232,
       0,     0,   233,   234,  3970,   235,   236,   237,     0,     0,
       0,     0,     0,     0,     0,   240,     0,   241,     0,   242,
       0,   243,   244,   245,   246,     0,   247,     0,   248,     0,
       0,     0,     0,   250,     0,     0,     0,     0,     0,   253,
       0,     0,     0,   254,   255,   256,   257,  3971,     0,   258,
     259,   260,     0,     0,   261,     0,     0,     0,     0,   262,
       0,     0,     0,     0,   264,     0,     0,     0,   265,   266,
       0,   267,   268,  3972,     0,     0,   269,     0,     0,     0,
     271,     0,     0,   272,  3973,     0,   273,   274,     0,     0,
       0,     0,     0,   275,   276,     0,   277,     0,   278,     0,
     279,   280,     0,     0,     0,     0,  -321,     0,     0,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,     0,   299,
     300,   301,     0,   302,   303,   304,   305,     0,   306,   307,
       0,     0,     0,     0,   308,   309,   310,   311,   312,   313,
       0,     0,   314,   315,     0,   316,     0,   317,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,     0,
     327,   328,     0,     0,   329,   330,   331,   332,     0,     0,
       0,     0,   334,     0,     0,     0,   335,     0,   336,   337,
     338,     0,   339,   340,  3974,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   344,   345,     0,
       0,   347,     0,   348,   349,   350,   351,   352,   353,   354,
     355,   356,     0,     0,     0,     0,   359,   360,     0,   361,
       0,   362,   363,   364,   365,   366,     0,   367,   368,   369,
       0,     0,   370,     0,     0,     0,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
       0,     0,   383,     0,   385,  -321,     0,   386,     0,     0,
       0,   388,     0,     0,   390,   391,   392,  3975,   393,     0,
       0,     0,   395,     0,   396,   397,   398,   399,   400,   401,
       0,   403,   404,     0,   405,     0,     0,     0,     0,   407,
     408,   409,     0,     0,     0,     0,   411,     0,     0,     0,
     412,     0,     0,   414,     0,   416,     0,   417,     0,     0,
     420,   421,     0,     0,     0,     0,     0,   422,   423,   424,
       0,   425,   426,     0,   427,     0,     0,   428,     0,     0,
     429,     0,   431,   432,   433,   434,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,     0,     0,
       0,     0,   462,   463,   464,     0,   465,   466,     0,   467,
     468,     0,     0,     0,     0,     0,   471,     0,     0,   472,
       0,     0,     0,   474,   475,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   477,     0,     0,     0,   478,   479,
     480,   481,   482,     0,     0,  -321,     0,     0,     0,   483,
       0,     0,   485,     0,   487,     0,   137,   488,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,     0,
       0,  -366,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,     0,     0,
       0,     0,   161,  3968,     0,   162,   163,     0,   164,     0,
       0,     0,     0,   167,   168,   169,  3969,   171,   172,     0,
     173,   174,     0,   175,   176,     0,   178,     0,   180,   181,
     182,   183,     0,   184,   185,     0,   186,   187,   188,     0,
     190,     0,     0,     0,   191,     0,     0,   192,     0,   193,
       0,     0,   194,     0,     0,     0,   195,   196,   197,     0,
       0,   198,     0,     0,     0,     0,   199,     0,     0,     0,
       0,     0,   201,   202,     0,   203,     0,     0,     0,   204,
       0,   205,   206,   207,   208,   209,     0,     0,     0,     0,
       0,     0,   211,   212,   213,     0,     0,     0,   214,     0,
    -340,   216,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,   225,   226,     0,     0,     0,   228,
     229,   230,   231,   232,     0,     0,   233,   234,  3970,   235,
     236,   237,     0,     0,     0,     0,     0,     0,     0,   240,
       0,   241,     0,   242,     0,   243,   244,   245,   246,     0,
     247,     0,   248,     0,     0,     0,     0,   250,     0,     0,
       0,     0,     0,   253,     0,     0,     0,   254,   255,   256,
     257,  3971,     0,   258,   259,   260,     0,     0,   261,     0,
       0,     0,     0,   262,     0,     0,     0,     0,   264,     0,
       0,     0,   265,   266,     0,   267,   268,  3972,     0,     0,
     269,     0,     0,     0,   271,     0,     0,   272,  3973,     0,
     273,   274,     0,     0,     0,     0,     0,   275,   276,     0,
     277,     0,   278,     0,   279,   280,     0,     0,     0,     0,
    -321,     0,     0,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,     0,   299,   300,   301,     0,   302,   303,   304,
     305,     0,   306,   307,     0,     0,     0,     0,   308,   309,
     310,   311,   312,   313,     0,     0,   314,   315,     0,   316,
       0,   317,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,     0,   327,   328,     0,     0,   329,   330,
     331,   332,     0,     0,     0,     0,   334,     0,     0,     0,
     335,     0,   336,   337,   338,     0,   339,   340,  3974,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   344,   345,     0,     0,   347,     0,   348,   349,   350,
     351,   352,   353,   354,   355,   356,     0,     0,     0,     0,
     359,   360,     0,   361,     0,   362,   363,   364,   365,   366,
       0,   367,   368,   369,     0,     0,   370,     0,     0,     0,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,     0,     0,   383,     0,   385,  -321,
       0,   386,     0,     0,     0,   388,     0,     0,   390,   391,
     392,  3975,   393,     0,     0,     0,   395,     0,   396,   397,
     398,   399,   400,   401,     0,   403,   404,     0,   405,     0,
       0,     0,     0,   407,   408,   409,     0,     0,     0,     0,
     411,     0,     0,     0,   412,     0,     0,   414,     0,   416,
       0,   417,     0,     0,   420,   421,     0,     0,     0,     0,
       0,   422,   423,   424,     0,   425,   426,     0,   427,     0,
       0,   428,     0,     0,   429,     0,   431,   432,   433,   434,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,     0,     0,     0,     0,   462,   463,   464,     0,
     465,   466,     0,   467,   468,     0,     0,     0,     0,     0,
     471,     0,     0,   472,     0,     0,     0,   474,   475,     0,
       0,     0,     0,     0,     0,   476,     0,     0,   477,     0,
       0,     0,   478,   479,   480,   481,   482,     0,     0,  -321,
       0,     0,     0,   483,     0,     0,   485,     0,   487,     0,
     137,   488,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,     0,     0,  -366,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,     0,     0,     0,     0,   161,  3968,     0,   162,
     163,     0,   164,     0,     0,     0,     0,   167,   168,   169,
    3969,   171,   172,     0,   173,   174,     0,   175,   176,     0,
     178,     0,   180,   181,   182,   183,     0,   184,   185,     0,
     186,   187,   188,     0,   190,     0,     0,     0,   191,     0,
       0,   192,     0,   193,     0,     0,   194,     0,     0,     0,
     195,   196,   197,     0,     0,   198,     0,     0,     0,     0,
     199,     0,     0,     0,     0,     0,   201,   202,     0,   203,
       0,     0,     0,   204,     0,   205,   206,   207,   208,   209,
       0,     0,     0,     0,     0,     0,   211,   212,   213,     0,
       0,     0,   214,     0,     0,   216,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,   225,   226,
       0,     0,     0,   228,   229,   230,   231,   232,     0,     0,
     233,   234,  3970,   235,   236,   237,     0,     0,     0,     0,
       0,     0,     0,   240,     0,   241,     0,   242,     0,   243,
     244,   245,   246,     0,   247,     0,   248,     0,     0,     0,
       0,   250,     0,     0,     0,     0,     0,   253,     0,     0,
       0,   254,   255,   256,   257,  3971,     0,   258,   259,   260,
       0,     0,   261,     0,     0,     0,     0,   262,     0,     0,
       0,     0,   264,     0,     0,     0,   265,   266,     0,   267,
     268,  3972,     0,     0,   269,     0,     0,     0,   271,     0,
       0,   272,  3973,     0,   273,   274,     0,     0,     0,     0,
       0,   275,   276,     0,   277,     0,   278,     0,   279,   280,
       0,     0,     0,     0,  -321,     0,     0,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,     0,   299,   300,   301,
       0,   302,   303,   304,   305,     0,   306,   307,     0,     0,
       0,     0,   308,   309,   310,   311,   312,   313,     0,     0,
     314,   315,     0,   316,     0,   317,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,     0,   327,   328,
       0,     0,   329,   330,   331,   332,     0,     0,     0,     0,
     334,     0,     0,     0,   335,     0,   336,   337,   338,     0,
     339,   340,  3974,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   344,   345,     0,     0,   347,
       0,   348,   349,   350,   351,   352,   353,   354,   355,   356,
       0,     0,     0,     0,   359,   360,     0,   361,     0,   362,
     363,   364,   365,   366,     0,   367,   368,   369,     0,     0,
     370,     0,     0,     0,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,     0,     0,
     383,     0,   385,  -321,     0,   386,     0,     0,     0,   388,
       0,     0,   390,   391,   392,  3975,   393,     0,     0,     0,
     395,     0,   396,   397,   398,   399,   400,   401,     0,   403,
     404,     0,   405,     0,     0,     0,     0,   407,   408,   409,
       0,     0,     0,     0,   411,     0,     0,     0,   412,     0,
       0,   414,     0,   416,     0,   417,     0,     0,   420,   421,
       0,     0,     0,     0,     0,   422,   423,   424,     0,   425,
     426,     0,   427,     0,     0,   428,     0,     0,   429,     0,
     431,   432,   433,   434,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,     0,     0,     0,     0,
     462,   463,   464,     0,   465,   466,     0,   467,   468,     0,
       0,     0,     0,     0,   471,     0,     0,   472,     0,     0,
       0,   474,   475,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   477,     0,     0,     0,   478,   479,   480,   481,
     482,     0,     0,  -321,     0,     0,     0,   483,     0,     0,
     485,     0,   487,     0,   137,   488,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -366,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  3968,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,   168,   169,  3969,   171,   172,     0,   173,   174,
       0,   175,   176,     0,   178,     0,   180,   181,   182,   183,
       0,   184,   185,     0,   186,   187,   188,     0,   190,     0,
       0,     0,   191,     0,     0,   192,     0,   193,     0,     0,
     194,     0,     0,     0,   195,   196,   197,     0,     0,   198,
       0,     0,     0,     0,   199,     0,     0,     0,     0,     0,
     201,   202,     0,   203,     0,     0,     0,   204,     0,   205,
     206,   207,   208,   209,     0,     0,     0,     0,     0,     0,
     211,   212,   213,     0,     0,     0,   214,     0,     0,   216,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,   225,   226,     0,     0,     0,   228,   229,   230,
     231,   232,     0,     0,   233,   234,  3970,   235,   236,   237,
       0,     0,     0,     0,     0,     0,     0,   240,     0,   241,
       0,   242,     0,   243,   244,   245,   246,     0,   247,     0,
     248,     0,     0,     0,     0,   250,     0,     0,     0,     0,
       0,   253,     0,     0,     0,   254,   255,   256,   257,  3971,
       0,   258,   259,   260,     0,     0,   261,     0,     0,     0,
       0,   262,     0,     0,     0,     0,   264,     0,     0,     0,
     265,   266,     0,   267,   268,  3972,     0,     0,   269,     0,
       0,     0,   271,     0,     0,   272,  3973,     0,   273,   274,
       0,     0,     0,     0,     0,   275,   276,     0,   277,     0,
     278,     0,   279,   280,     0,     0,     0,     0,  -321,     0,
       0,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
       0,   299,   300,   301,     0,   302,   303,   304,   305,     0,
     306,   307,     0,     0,     0,     0,   308,   309,   310,   311,
     312,   313,     0,     0,   314,   315,     0,   316,     0,   317,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,     0,   327,   328,     0,     0,   329,   330,   331,   332,
       0,     0,     0,     0,   334,     0,     0,     0,   335,     0,
     336,   337,   338,     0,   339,   340,  3974,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   344,
     345,     0,     0,   347,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,     0,     0,     0,     0,   359,   360,
       0,   361,     0,   362,   363,   364,   365,   366,     0,   367,
     368,   369,     0,     0,   370,     0,     0,     0,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
       0,   381,     0,     0,   383,     0,   385,  -321,     0,   386,
       0,     0,     0,   388,     0,     0,   390,   391,   392,  3975,
     393,     0,     0,     0,   395,     0,   396,   397,   398,   399,
     400,   401,     0,   403,   404,     0,   405,     0,     0,     0,
       0,   407,   408,   409,     0,     0,     0,     0,   411,     0,
       0,     0,   412,     0,     0,   414,     0,   416,     0,   417,
       0,     0,   420,   421,     0,     0,     0,     0,     0,   422,
     423,   424,     0,   425,   426,     0,   427,     0,     0,   428,
       0,     0,   429,     0,   431,   432,   433,   434,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
       0,     0,     0,     0,   462,   463,   464,     0,   465,   466,
       0,   467,   468,     0,     0,     0,     0,     0,   471,     0,
       0,  4310,     0,     0,     0,   474,   475,     0,     0,     0,
       0,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     478,   479,   480,   481,   482,     0,     0,  -321,     0,     0,
       0,   483,     0,     0,   485,     0,   487,     0,   137,   488,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,     0,     0,     0,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
       0,     0,     0,     0,   161,     0,     0,   162,   163,     0,
     164,     0,     0,     0,     0,   167,   168,   169,     0,   171,
     172,     0,   173,   174,     0,   175,   176,     0,   178,     0,
     180,   181,   182,   183,     0,   184,   185,     0,   186,   187,
     188,     0,   190,     0,     0,     0,   191,     0,     0,   192,
       0,   193,     0,     0,   194,     0,     0,     0,   195,   196,
     197,     0,     0,   198,     0,     0,     0,     0,   199,     0,
       0,     0,     0,     0,   201,   202,     0,   203,     0,     0,
       0,   204,     0,   205,   206,   207,   208,   209,     0,     0,
       0,     0,     0,     0,   211,   212,   213,     0,     0,     0,
     214,     0,     0,   216,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,   225,   226,     0,     0,
       0,   228,   229,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,     0,     0,     0,     0,     0,     0,
       0,   240,     0,   241,     0,   242,     0,   243,   244,   245,
     246,     0,   247,     0,   248,     0,     0,     0,     0,   250,
       0,     0,     0,     0,     0,   253,     0,     0,     0,   254,
     255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
     261,     0,     0,     0,     0,   262,     0,     0,     0,     0,
     264,     0,     0,     0,   265,   266,     0,   267,   268,     0,
       0,     0,   269,     0,     0,     0,   271,     0,     0,   272,
       0,     0,   273,   274,     0,     0,     0,     0,     0,   275,
     276,     0,   277,     0,   278,     0,   279,   280,     0,     0,
       0,     0,     0,     0,     0,   281,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,     0,   299,   300,   301,     0,   302,
     303,   304,   305,     0,   306,   307,     0,     0,     0,     0,
     308,   309,   310,   311,   312,   313,     0,     0,   314,   315,
       0,   316,     0,   317,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,     0,   327,   328,     0,     0,
     329,   330,   331,   332,     0,     0,     0,     0,   334,     0,
       0,     0,   335,     0,   336,   337,   338,     0,   339,   340,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   344,   345,     0,     0,   347,     0,   348,
     349,   350,   351,   352,   353,   354,   355,   356,     0,     0,
       0,     0,   359,   360,     0,   361,     0,   362,   363,   364,
     365,   366,     0,   367,   368,   369,     0,     0,   370,     0,
       0,     0,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,     0,     0,   383,     0,
     385,     0,     0,   386,     0,     0,     0,   388,     0,     0,
     390,   391,   392,     0,   393,     0,     0,     0,   395,     0,
     396,   397,   398,   399,   400,   401,     0,   403,   404,     0,
     405,     0,     0,     0,     0,   407,   408,   409,     0,     0,
       0,     0,   411,     0,     0,     0,   412,     0,     0,   414,
       0,   416,     0,   417,     0,     0,   420,   421,     0,     0,
       0,     0,     0,   422,   423,   424,     0,   425,   426,     0,
     427,     0,     0,   428,     0,     0,   429,     0,   431,   432,
     433,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,     0,     0,     0,     0,   462,   463,
     464,     0,   465,   466,     0,   467,   468,     0,     0,     0,
       0,     0,   471,     0,     0,   472,     0,     0,     0,   474,
     475,     0,     0,     0,     0,     0,     0,   476,     0,     0,
     477,     0,     0,     0,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,   483,     0,     0,   485,     0,
     487,     0,     0,   488
};

static const yytype_int16 yycheck[] =
{
       6,   638,   954,   647,   648,   575,   574,   575,   594,    20,
    1138,   122,  1838,    19,   874,   875,   955,    23,  1044,    30,
     853,   519,  1551,  1484,   884,    36,    32,  1805,  1234,  1684,
    1281,  1085,  1378,    39,  1038,  1039,    42,   705,   892,  1482,
      46,  2020,   914,     6,   890,   665,  2541,    53,  1359,   610,
    1473,  2091,  1473,  1234,  2156,  3302,  1161,  1108,  2327,  2161,
     914,  2469,   623,  1168,  1138,  2480,  2372,  2429,  2430,   915,
    1463,  1463,  1287,  2892,  1467,  1467,  1469,  1469,  2834,   959,
     959,  2457,  2658,  2498,  2499,  2252,  1075,  1757,    94,  1827,
     634,   635,  1473,  1987,  1914,  3037,  1983,  1983,   652,  1989,
    2450,  2514,  2536,  1993,  2116,  2437,  2542,  2116,  2458,  3534,
     116,  1463,   118,  2692,  2004,   121,   122,   123,  1169,  1170,
       4,  2390,  1173,  1174,  1175,  1176,  2016,  1178,  1179,  1180,
    1181,  1182,  1183,  1184,  1185,  2290,   773,  1453,    23,  1532,
    1532,   761,   762,   763,  1389,  3365,  3366,    16,    17,  3369,
      16,    17,    17,    20,   774,   118,    59,     9,   121,    19,
    3092,    70,  1407,  2046,    46,  1836,    19,    24,  3388,    74,
    1415,  1416,  1938,  1939,  3394,   934,    21,    29,  3325,  2105,
    1532,   106,    19,    35,    33,  3582,    17,  3307,    24,  1955,
    1975,    70,  3175,  2246,  2686,   125,  2139,   104,  2690,   155,
     916,    29,    16,    17,   186,    19,  1972,  1973,  1207,    94,
     153,  2626,  2627,    58,    59,    50,    20,  2498,  2499,    82,
      62,   120,  1988,   117,    78,  1991,  1992,    50,  1994,  2116,
    2116,  1997,  1998,   279,   145,  2001,    16,    17,  2415,  2788,
    2006,    74,   803,  2945,  1966,  2011,  2012,  2013,  2014,  2015,
     192,  1929,   151,  2019,   262,  2021,    75,   367,   139,   126,
     373,  2027,  2028,  2029,  2030,  2689,    21,  2033,   155,  2035,
     358,  1957,   263,   834,   319,    68,    16,    17,    33,   129,
     132,   212,   313,  3530,    16,    17,   151,   181,    65,  4133,
    2839,   151,    47,   120,    80,   155,    35,  3031,   341,   186,
     225,    21,   155,    58,    59,   386,   221,   155,   416,     8,
      35,   247,   120,    33,  3592,   209,    10,   153,   155,  2634,
      61,   364,   126,    16,    17,   449,   134,    47,   469,  3639,
    2750,    16,    17,    57,  2100,  2101,  2102,  2103,    58,    59,
    2672,   546,  2674,   362,   249,  2626,  2627,   171,   151,  2071,
    3945,  2073,  2074,   120,   125,   140,   359,  2079,  2080,    12,
      16,    17,    23,    12,    12,   134,  2088,  2089,  3579,    20,
     227,  2093,  1016,  1017,  1018,   263,    16,    17,    16,    17,
     269,   546,   373,   277,   151,   784,  4007,   145,  2821,   189,
      40,   227,   438,   504,   546,    16,    17,    41,   120,   354,
    3620,   189,   151,   245,   518,    67,  1074,   352,   145,  3629,
      67,  3759,   355,   225,   631,   162,   249,   120,   221,   487,
    1088,     8,   639,   351,   352,    16,    17,   280,   631,   151,
      62,   542,  3652,   638,  2502,   162,   639,  3657,   250,  3787,
     143,   985,    29,  2386,   185,   192,   260,   171,   847,  3874,
     238,   175,   309,    64,   399,    16,    17,   189,   461,  2827,
     231,   403,   186,   263,   358,   192,   631,   356,  2456,  2660,
     209,    16,    17,   309,   124,   126,   431,   180,  2911,   631,
     179,   158,   135,   597,   209,   373,   135,   135,  1427,   133,
     631,   559,  1352,  2517,   280,    16,    17,  4092,   504,   544,
     506,   609,   163,  3750,    16,    17,   372,    19,  3719,   375,
     318,   447,  2844,  2845,   263,   639,  4137,   523,  2240,   355,
     633,   527,   478,  2899,   439,   570,   405,  1164,  3838,   639,
     357,  2944,   538,  4377,  2947,  2948,   542,  1383,   544,   155,
    1386,    16,    17,  2004,   632,  1391,   589,  1858,   411,   318,
     631,   557,  1172,   184,  3765,    16,    17,  2965,   372,  1057,
    1058,   375,   608,   416,  1957,  1957,  1234,   107,   574,  1189,
     110,  1417,  1418,  1453,  1453,    61,   582,  3697,  2557,   522,
    1078,   374,  1975,  1975,   451,  1439,   577,   518,   412,  1087,
     221,   478,   372,   317,   600,   375,   477,  3331,   540,   607,
     631,  1099,  1100,  1101,   610,  1957,   612,    16,    17,  1107,
     464,   446,  3314,   245,   633,  2502,  2502,   623,   624,   625,
     155,  1827,  2634,   446,   630,  2634,   632,   609,   634,   635,
     478,  1983,   372,   639,   640,   375,   439,  2520,   644,   416,
     372,  2524,  3574,   375,   189,  3060,  1827,   451,   654,   655,
     656,  1531,  1531,   583,   660,  2538,  2539,  2038,   537,   602,
     401,  1712,   625,  1908,  3213,  3214,  3215,  2550,  3788,  1213,
      16,    17,  1723,  3951,   568,  1726,  3495,   155,   171,   372,
     532,   560,   375,   639,   469,   527,   522,   372,   412,   800,
     375,  2868,   617,   596,   601,   606,  2579,  1413,  2751,   705,
    4097,   553,  2628,  4128,   609,  3254,  3255,  3256,   560,   403,
      16,    17,  2105,  2105,   189,  2500,   372,  1706,   350,   375,
     557,  2392,   631,  2116,  2116,  3872,   557,   609,  2671,   557,
     575,   583,   372,   566,   372,   375,  1735,   375,   637,   624,
    1284,  2463,    16,    17,   609,   630,  3061,  2634,  2634,   618,
     569,   372,   618,  2105,   375,  1299,   589,   624,  1517,  3091,
     766,   614,   768,   874,  2116,  2531,   602,   878,   879,  3889,
     636,  2449,   637,  2656,  3353,  3081,   633,   637,  2544,  3060,
     891,   372,   631,  2099,   375,    16,    17,  1348,   794,   795,
     796,  3774,   798,   799,   800,  2481,   802,   803,   633,   649,
    3920,  2523,   808,  2525,   618,  3384,  3385,   546,   814,   633,
    2532,   372,   583,  1367,   375,   509,  3236,  2972,   824,   633,
     575,   546,  4443,  4248,  2546,  4036,  1387,   372,   834,   835,
     375,  2553,   795,   839,   637,  3767,   799,   578,   618,   802,
     595,   596,   953,  2565,  2566,  2567,   631,  2625,   606,  2571,
     635,   372,   632,   633,   375,   575,   518,  3349,   607,   509,
     372,   518,   478,   375,  4075,  2933,  2632,   561,   874,   606,
     637,  2593,   878,   879,    16,    17,   487,  3245,   618,   511,
     530,  4101,    45,  4103,  3304,   891,   618,  3323,   637,  1457,
    2333,  3383,   632,   633,  3085,   527,   589,   372,  3311,  3391,
     375,   633,    16,    17,  4024,  3339,  3398,   601,   558,   633,
    1471,   372,  2900,  2901,   375,   637,  3292,   280,  2942,   412,
    3296,    16,    17,  3347,  3348,   618,   603,  3869,   934,    16,
      17,  3355,  2461,   618,  3358,  3359,  3242,   184,   424,   824,
     633,    42,  3292,   478,   828,  2771,  3296,   953,   633,   955,
     835,  3375,    16,    17,   839,   807,   174,   588,    16,    17,
     510,  1629,   618,   372,    24,  3389,   375,   151,   190,  3301,
    3394,  3395,  3396,  3397,   221,   192,   632,   633,   618,   985,
     618,    16,    17,   615,  1844,  2811,  1540,    55,  3257,   141,
     125,  3540,   632,   633,   632,   633,   430,   618,   680,   506,
     478,    16,    17,   148,  1864,    11,  3783,    24,   136,  4256,
     550,   632,   633,   553,   159,    16,    17,    16,    17,   441,
     527,   174,    33,   639,    16,    17,   372,   618,   546,   375,
    1036,  4151,  1904,   302,  1040,    16,    17,    16,    17,  2817,
    1151,   632,   633,   206,    30,   265,  2933,  2933,   171,  3061,
    1904,  1897,  3061,   416,   263,  2516,  2517,   618,    16,    17,
    4180,  1907,  1934,   132,  1910,  1911,   372,  2887,  1074,   375,
     752,   632,   633,   618,    16,    17,   510,  1188,   147,   263,
    1934,   469,  1088,  2429,  2430,  2968,  1730,   632,  2481,  2481,
      76,    16,    17,   153,   587,    31,   231,   618,   372,  2837,
     650,   375,    16,    17,   639,  1725,   618,  2500,  2500,   469,
     225,   632,   633,   229,  2784,  2141,    50,  3693,    24,   221,
    3287,  3015,   238,    11,  1235,   609,  3016,   366,   186,  2481,
     355,   186,  1138,   351,   352,  2186,    16,    17,  2353,   357,
     633,   372,   411,   618,   375,  1151,   227,    16,    17,   633,
    2502,  1036,  2575,   125,  2575,  1040,  1800,   618,  2263,  1827,
     366,   639,   384,   149,   373,   421,   469,   227,    16,    17,
      16,    17,   633,   469,  3061,  3061,    74,  1738,   280,  1290,
     199,  4100,  1188,   566,  2962,   388,   403,  1193,    16,    17,
    3566,  3567,  1198,  2438,  2575,    51,  1740,   647,   648,   537,
      16,    17,   540,   331,   357,    61,   589,  1213,    68,   618,
     227,   633,    16,    17,  1775,  2269,  2270,   272,   487,  2099,
    2099,  3972,  3973,   125,   633,   377,   371,   385,  1234,  1235,
     372,    16,    17,   375,   122,  2628,  2628,  2892,   458,   117,
     341,  2634,  2634,   631,  2372,   302,    16,    17,  4004,   309,
     269,   614,  1813,  1814,    16,    17,    16,    17,   372,   231,
    4016,   375,   378,  4082,   486,  1271,   272,  1273,  1829,  1275,
    3249,   631,   618,  2262,   355,   433,  2628,   372,  1284,   961,
     375,  4528,  2634,  2272,  1290,   372,   354,   633,   375,   412,
    2341,   302,   309,  1299,  1300,   355,   612,   522,   189,   462,
     160,   469,   238,   181,   439,    16,    17,  4084,   372,  4086,
     412,   375,   618,  1198,   372,    71,   572,   375,    16,    17,
     469,   227,  1328,   540,    16,    17,   262,   633,   631,   231,
    1336,  2459,   635,  1339,   469,   631,   103,   372,   355,  3701,
     375,   588,  1348,   546,   618,   563,    98,    16,    17,  1460,
     244,   249,  1358,  1359,  3456,    16,    17,   372,  2801,   633,
     375,   579,  1368,  1369,  1370,  1371,  1372,  1373,    16,    17,
     153,   372,  1378,   372,   375,   614,   375,   602,  1384,  1385,
     372,  1387,  3160,   375,  1390,  2459,   391,   618,   206,  3695,
    1275,   372,  1276,   372,   375,   162,   375,   463,   122,   277,
     545,   136,   633,   309,  1410,  1368,  1369,  1370,   614,  1372,
     563,   179,   398,   269,   372,  1300,    12,   375,    16,    17,
     354,   244,  1385,   607,  2552,   192,   579,  1390,   487,   185,
     372,   118,   250,   375,   420,  4354,  4355,   117,  3321,   469,
      33,   522,    16,    17,   227,   247,   153,   372,   583,  3171,
     375,   123,   363,   637,  1460,   474,   258,   348,   372,   391,
    3343,   375,   522,   631,   587,  1471,    59,   439,   454,   225,
    1476,    16,    17,  1479,  1480,   633,   618,   388,  2552,  1363,
     358,  2942,   631,    16,    17,   253,  1371,   375,  1373,   425,
     540,   633,   372,   469,   250,   375,   631,   469,   626,   627,
     628,   629,    12,   372,   618,   522,   375,    16,    17,    16,
      17,  1517,   446,   237,   374,  3923,   632,    16,    17,   633,
     227,   602,   416,   618,   372,  1410,   372,   375,   514,   375,
    1536,   618,  1538,  1539,   984,  1541,  1542,   439,   633,   135,
      16,    17,   602,   477,   372,   274,   633,   375,  1554,   236,
    1556,  2411,   640,     0,   618,  3016,   372,    16,    17,   375,
     618,   485,  4313,  4314,   403,   632,   633,   469,   372,   633,
    3876,   375,   355,   633,   632,  1538,  1539,    16,    17,    16,
      17,  2933,  1466,   618,  1034,   602,   354,   372,    16,    17,
     375,  1476,    24,   416,    74,  1480,   331,   277,   633,   206,
      12,   631,   372,   618,   117,   375,    74,   336,   280,  3711,
     372,   583,   372,   375,   217,   375,   219,   618,   633,   618,
     546,    16,    17,  1629,  1630,   135,   618,    16,    17,   385,
    1741,  2837,   633,   103,   633,   546,   403,   618,   122,   618,
     189,   633,    74,   250,   155,   401,  2266,  2673,   355,    16,
      17,   453,   633,  3922,   633,   631,  2837,   581,  2909,   631,
     618,   372,  2767,   123,   375,  2163,   238,   398,  3061,  3061,
     509,    16,    17,   153,   372,   633,   618,   375,   358,  2177,
     372,   583,   189,   375,  1690,   153,   235,   259,   202,   264,
     568,   633,   267,   618,  2822,  3417,    81,   621,   416,   819,
     210,    16,    17,   372,   618,   631,   375,   151,   633,  3061,
     798,   372,  2210,   155,   375,   100,    16,    17,   632,   437,
      12,   153,   561,   135,   372,   596,  1732,   375,   599,   631,
    1841,   418,  1738,   247,  1740,  1741,    16,    17,   618,   522,
     172,   211,    16,    17,    16,    17,  1752,   227,  2822,   618,
     210,  1757,   632,   237,   472,   162,  1762,  4172,  4173,   227,
    3800,  3801,   601,   632,   277,   540,  3189,  3188,   117,  1775,
     618,   120,   618,   540,   372,  3166,   577,   375,  3221,  3170,
    4275,  2279,    16,    17,   632,   512,   632,  1793,   229,   518,
     618,  1797,    16,    17,   561,   227,   202,   238,   372,  2419,
     122,   375,   618,  3581,   632,    16,    17,  1813,  1814,  1815,
    1816,   557,    16,    17,   618,   522,   632,   937,   545,   602,
     280,  1827,    74,  1829,   373,   639,  3805,   372,   632,    17,
     375,   632,   181,   618,   601,  1841,    88,   524,   413,   372,
    3495,    17,   375,   135,   469,   358,  4142,   632,   618,  2417,
     633,  4147,  1858,  4149,    16,    17,   618,   220,   618,   373,
     209,  3655,   632,   372,  3658,   372,   375,  1873,   375,   349,
     632,   625,   632,   372,   202,   355,   375,   309,   632,    16,
      17,   349,   632,   633,   540,    16,    17,   355,   568,   624,
     625,   626,   627,   628,   629,   602,   372,    71,   543,   375,
     225,   549,   537,  1909,   225,   540,   589,   618,  1793,   379,
      16,    17,  1797,   372,   589,  1921,   375,   349,   388,  3713,
     618,   632,  1928,   355,   225,   395,   618,  1811,   277,    21,
    1815,  1816,   625,   372,   632,   372,   375,   378,   375,   632,
     632,    33,   422,   220,   372,   202,   456,   375,   136,   618,
     633,   586,    16,    17,   422,    47,   639,   618,   633,   971,
     972,   130,  2530,   632,   639,  3276,    58,    59,   593,   594,
     618,   632,    39,  2425,    16,    17,   367,   372,   594,    46,
     375,    16,    17,   372,  1868,   189,   375,   235,  4261,    16,
      17,  4264,   117,   503,   504,   505,   506,   507,   508,  1011,
     252,  2834,    46,  2114,  2876,   372,   631,  2118,   375,   358,
    2882,   185,   189,   523,  3736,   469,   287,   288,    57,   589,
     618,   491,  2876,   477,  1909,   477,  2032,   372,  2882,   637,
     375,   280,  2572,   632,   632,   155,    24,  3288,  2884,   639,
    2046,  3095,   522,  1928,   618,  2156,   584,  2907,   509,   117,
    2161,   225,   632,   633,   522,   568,   181,   372,  1942,   185,
     375,   369,   632,   633,   631,  3119,  3120,  1951,  1952,     6,
    2522,   439,   372,   618,   631,   375,   250,   329,  1962,  1963,
    1964,  1965,    11,  1967,  1968,   618,    74,   632,  3142,   631,
     522,   631,   372,   573,   631,   375,  2548,  2549,   372,   632,
     372,   375,   354,   375,   631,   573,  3857,  4380,  2114,   618,
     631,   618,  2118,   181,  2120,   631,   586,  2123,  3246,   618,
     632,   633,   602,   632,  2130,  2131,  2132,  2133,   631,  2773,
    2136,   631,   171,   632,   602,   631,   175,   631,   372,   593,
     594,   375,   618,   331,  2255,   632,   633,   186,   372,   631,
    2156,   375,   277,   633,   631,  2161,   632,   428,   429,   618,
    2123,   372,   414,   166,   375,    58,    59,   631,   372,  2837,
     602,   375,  3300,   632,  2285,    68,   631,   631,   631,   618,
      24,   618,   631,  2311,   172,  2313,   632,   633,  2072,   718,
     618,  2075,  2076,   632,  2078,   632,   631,  2081,  2082,  2083,
    2084,  2085,  2086,  2087,   632,  3333,  2090,   631,  2092,   277,
     372,   740,  3355,   375,   631,  3358,  3359,    17,   631,   568,
     631,  3972,  3973,   618,   753,   754,  3300,   401,  4054,   618,
      74,   631,  3375,   358,   631,   372,   639,   632,   375,   227,
     633,   372,   546,   632,   375,  2130,  2131,  2132,   631,  2255,
     631,   618,  4018,  2381,  2382,  2383,   631,   509,  2819,  3333,
     631,    11,   632,   633,  2762,   632,   372,    25,   364,   375,
     631,   610,   611,   618,  2280,   549,   631,  4055,   317,  2285,
     631,   521,   522,    16,    17,   525,   526,   632,   631,   529,
     358,   531,   480,   481,   633,   631,  4062,   631,  2304,  4065,
    4066,  4067,  4068,   618,  2310,  2311,    74,  2313,   372,   153,
      68,   375,  3316,  3317,    72,    95,    74,   632,   618,   632,
     633,   309,   632,   633,  4046,  4047,  4048,  4049,   172,   631,
     372,   589,   632,   375,  2340,   631,   136,   372,   618,   492,
     375,   632,   633,   631,   618,   372,   618,   631,   375,  3403,
      58,    59,   632,   103,   274,  3701,   631,  2468,  2469,   221,
     632,   349,   120,    77,   631,    79,  2372,   355,  4119,  4120,
    2376,   631,   122,   412,    48,  2381,  2382,  2383,   631,  3239,
      48,   632,   633,   227,   618,  3591,   631,  2393,   631,  2395,
     631,    12,   145,   146,   618,   631,  4174,  1776,   632,   631,
    1779,  3529,   631,  1782,  4170,  4171,   120,   618,   632,   632,
     633,  2417,  2952,  4179,   618,    95,   631,  3443,   631,  4141,
      41,   632,   631,  2429,  2430,  2310,  2311,  4082,  2313,   143,
    2541,   632,   633,  3639,   622,   623,   624,   625,   626,   627,
     628,   629,   192,   568,   588,   589,  2986,   591,   228,   593,
     632,   633,   631,  2459,  2994,  3529,   618,   463,  2998,   227,
     632,   633,  2468,  2469,  4215,   309,   180,   247,    89,   633,
     632,   221,    93,   632,   633,  3936,  3937,   631,   258,  4230,
     631,   618,   631,   575,   631,   115,   631,   618,   577,   632,
     633,   457,   250,  4244,   626,   632,  2381,  2382,  2383,  2510,
     568,   632,   631,  2509,  3044,   349,   200,   599,  2514,  2393,
    2521,   355,   618,  2519,  2520,   631,  2527,   631,  2524,   631,
    2526,   632,   633,   273,  4053,   477,   632,   631,  3467,   631,
    2536,   331,  2538,  2539,   522,  2541,  2542,   631,   117,   631,
    2551,  2547,  3737,  3738,  2550,  2556,  2552,    19,   228,   631,
    4301,  2562,  2563,   631,   618,  2561,    33,   631,  1050,  1051,
    1052,   341,  4313,  4314,   639,   805,  2572,   247,   632,   631,
    1062,   631,   538,  2579,  2580,   631,   618,   543,   258,   632,
     633,   349,    59,   618,     6,  2591,   216,   355,  4120,   639,
     632,   618,   161,   351,   352,   632,   633,   632,   631,   357,
      35,  1093,   181,   631,  1096,   632,   364,   263,   117,  4360,
     186,   120,   306,   307,   602,   632,   633,   311,   312,  4370,
     586,   242,   518,    95,   537,  1117,  1118,   632,   633,  1121,
     107,   161,  3130,   110,    56,   601,   274,    31,   217,   518,
     219,   118,   152,   401,  2528,  2529,   633,  1139,  1140,  2655,
    2656,   632,   633,   403,   422,    83,  4407,   633,  4409,   632,
     633,   341,    12,   632,   633,   632,   633,   365,  4419,   633,
     117,  2555,   181,   453,   533,   110,  2561,   632,   522,   151,
     480,   481,   117,   155,  3182,  4436,   151,  4438,   120,  4440,
     106,   321,   632,   633,   638,   325,  4447,   318,   277,     6,
     209,   631,   332,  4529,   632,   633,  4457,  3275,   105,   423,
     632,   633,   184,     4,   186,   473,   633,   139,   632,   633,
    4471,  4472,   632,   633,   388,   475,   632,   633,   632,   633,
     202,   632,   633,   468,   181,   207,  4487,  4488,    19,   174,
    2624,  4492,   136,   523,   632,   633,   181,   632,   633,   221,
     632,   633,  3882,  3883,   522,   601,   228,   238,   602,   633,
     381,   385,   209,   235,   522,   632,   633,    55,   277,  4301,
    2655,    35,   431,   453,   209,   247,   632,   633,  2784,   358,
     410,  3425,  2788,   632,   633,   135,   258,   166,   538,   633,
     540,   263,   632,   633,  2800,   632,   633,   632,   633,   218,
     272,   117,   632,   633,   120,   573,  1125,  1126,   117,   287,
     288,   120,  2818,  2819,    95,   633,  2822,  4172,  4173,   106,
     578,   633,   622,   623,   624,   625,   626,   627,   628,   629,
     277,  2837,   136,  2839,   602,   639,   586,   467,    68,  3614,
    3615,    12,   277,   523,   238,   606,   110,  2853,   632,   358,
    3441,  3442,  3627,   117,  2965,   632,   636,   155,   135,  3634,
     210,     9,  3913,  3259,  3260,   181,   343,   633,   262,   341,
     151,   631,   181,   494,   155,  4407,    61,  4409,    95,   117,
     639,   179,  3821,   632,  3659,  3453,    71,  3662,  3827,  3510,
    3511,   632,   364,   209,   632,   193,  3747,  3748,  4028,    84,
     209,   373,  4032,   639,  4436,   186,   204,   342,   262,   639,
     174,   358,   633,   534,   153,  2800,   633,   181,   353,   638,
      48,   202,   357,   358,  4052,   274,   207,   274,   274,   274,
     352,   403,   274,   274,   238,   155,   633,   331,  2944,  4471,
    4472,  2947,  2948,   181,   633,   209,  2952,   228,   402,   457,
     428,   429,   370,   537,   235,   253,   254,   351,   352,  2965,
     364,   277,  2968,   364,  4094,  4095,   247,   633,   277,  2853,
     269,   209,   633,   386,   604,   633,   557,   258,  4052,   633,
    2986,   453,   263,   281,   557,   103,   385,   136,  2994,   568,
     620,   272,  2998,   415,    12,   417,  3587,   136,   633,   155,
     185,  2885,  2886,   364,  2888,   477,   191,   364,   485,    68,
      61,   228,   238,   277,   633,   633,   626,   241,  3024,   136,
      71,  3027,   500,   501,   502,   176,  3032,   331,   535,   186,
     247,   425,  3038,    84,   633,   582,  3042,   490,  3044,   277,
     225,   258,   358,   131,   162,   389,   169,   364,   633,   358,
     348,   523,   632,  3059,   155,   633,   155,   103,   155,   568,
     341,   155,   155,   155,   155,   250,  3072,   633,   155,  1561,
     155,   155,   155,  3079,   192,  3038,   553,   155,   342,   155,
     155,   155,  2966,   364,  3090,   155,   480,   481,   155,   238,
     155,  2975,   373,   357,   358,   155,   584,   155,   155,   493,
     155,   155,   400,   136,   581,   577,   456,   225,   155,  3753,
     613,   546,   588,   192,    74,   550,   588,   589,   553,   364,
     358,   568,   403,   364,   341,   189,   632,  4255,   563,   364,
     626,   633,   632,   568,   185,   607,   571,   609,   632,  1631,
     191,   632,  3027,  1635,   189,   191,   106,   364,   632,   632,
     632,  3262,   632,   503,   504,   273,   506,   625,   508,   633,
     632,   633,   631,  4102,   636,   637,   632,  1659,   632,   632,
    3176,  4004,   453,   523,   225,   632,   480,   481,  3184,   225,
    3064,  4255,   331,  4016,   632,   577,   478,   633,   633,   624,
     625,   632,   331,   153,  3079,   632,   477,   633,   632,   250,
    3768,  3792,  3793,  3209,  3795,  3796,  3212,  3213,  3214,  3215,
     631,   631,   629,   546,   331,   546,   401,   631,   546,   537,
     632,  3227,   631,   607,   226,   631,   529,   273,   622,   623,
     624,   625,   626,   627,   628,   629,   453,    11,   631,   639,
    3246,  3247,   523,   633,  3250,   631,   631,   260,  3254,  3255,
    3256,   633,   568,   633,   189,   632,  3262,   411,    33,   568,
     498,   639,  3268,   639,   639,   225,   586,   477,   633,  3275,
    3276,   633,   186,    46,   468,   509,   339,   509,   509,  4330,
     398,   509,   546,   388,   509,   403,   550,    71,   557,   553,
     385,   155,   156,   131,  3300,   385,   577,   248,   331,   563,
    3184,  4161,   538,   385,   568,  3311,   523,   571,   589,   248,
     495,   538,   385,   131,   385,  3321,    46,  3323,   622,   623,
     624,   625,   626,   627,   628,   629,   607,  3333,   609,   193,
     568,   480,   481,  3339,   385,  3341,   385,  3343,   434,   387,
     204,   480,   481,   385,   385,  3456,   385,  3917,   308,   631,
     401,   632,   633,   128,   273,   636,   637,   475,   631,   631,
     624,   625,   632,   480,   481,   639,   326,   589,   149,   632,
      95,   234,  4423,  4501,   234,   632,   632,   639,   153,   243,
     632,   632,   157,   632,   632,   632,   155,  4515,   557,   349,
     254,   633,  4520,   578,   546,   614,   633,  4525,   269,    46,
    3284,   155,  4341,  4342,   633,  4344,   155,   557,   631,  3415,
      74,   200,  3998,   631,   235,   631,   631,   281,   189,   194,
     538,   189,   546,   416,    88,   543,   546,  4501,   244,   475,
     633,   358,   155,   155,  3440,  3441,  3442,   212,  3549,   155,
     633,  4515,   388,   561,   495,   247,  4520,   480,   481,   495,
    3456,  4525,  4391,   247,  4393,  4394,   376,   322,   106,   169,
     106,   639,   250,   250,   631,   129,   631,   369,   586,   202,
      19,   557,   449,   622,   623,   624,   625,   626,   627,   628,
     629,   345,   385,   601,   623,   624,   625,   626,   627,   628,
     629,  4135,   538,   546,   540,   631,  4133,   543,   639,   274,
    4070,   626,   631,   228,   631,   622,   623,   624,   625,   626,
     627,   628,   629,   632,   557,   631,   236,   236,  3524,   632,
      25,    26,   247,  3529,  3408,  3636,   632,   578,   632,  4468,
     633,  4483,   578,   258,  3540,   633,   557,   639,   557,   639,
     586,   364,   631,  3549,   221,   385,   264,  3431,    16,    17,
     370,    54,     6,    58,    59,    60,   633,    11,   639,    13,
      63,    15,   522,    68,   632,   189,   632,   639,   189,    74,
      73,    25,    26,   189,   583,   238,   632,    82,   538,   416,
     632,  3587,    85,    86,    87,   155,   121,  3598,   252,   633,
    3596,   624,   625,   626,   627,   628,   629,    33,   101,  3605,
    3711,   106,    56,   631,   247,   632,    60,    61,   632,   632,
     632,   247,    66,   364,   631,   120,   341,   633,   250,   124,
      74,   250,   633,   609,   631,   633,   632,   402,    82,   633,
    3636,    74,   399,   364,    19,   364,   411,    91,   632,   364,
     631,   633,   492,   111,   112,   113,   114,   115,   153,   364,
     364,   426,   106,   519,   469,   358,   632,  3663,   631,  3770,
     631,   631,   373,  4523,  3670,   329,   120,   632,    46,   444,
     124,   471,   609,   632,  3558,    54,   632,   260,   132,   133,
     272,   547,  3688,    11,    63,   139,   451,   351,   352,  4257,
     354,   142,   128,   147,    73,  3701,   626,   151,   256,   153,
     632,   632,   189,   416,   633,  3711,    85,    86,    87,   202,
     164,  3596,   390,   488,   155,   479,   247,   153,   247,   631,
     225,   157,   101,   633,   120,   120,   540,   232,   453,   397,
     184,   631,   631,   639,    78,   487,   138,   632,   464,   492,
    4377,   632,   632,   518,   249,   213,   214,   215,   216,   633,
     414,   632,    19,   263,  3638,   632,   632,   632,   194,   632,
      33,    33,   537,   632,  3770,   540,   328,   252,   272,   223,
     632,   225,   411,   632,   632,   632,   212,  3783,   232,   633,
     170,   200,   235,   631,   633,   632,  3792,  3793,   639,  3795,
    3796,    46,   207,  3677,   633,   249,   328,   155,   523,   665,
     631,   631,   631,   308,   670,   631,   589,   589,   632,   631,
     305,   583,  3923,   599,   631,  4385,   120,   320,   272,   599,
     631,   326,   250,   250,   357,    33,   632,   328,   358,   633,
     631,   358,   168,   632,   337,   701,   370,   250,   274,   609,
    4477,   540,   589,   593,   589,   509,   631,   235,   364,   609,
     594,   717,   513,   321,   308,   323,   324,   325,   449,   353,
     358,  3867,  3868,   546,   332,   546,  4503,   633,   528,   632,
     546,   633,   326,  3879,   632,   380,   330,   583,   606,   150,
      30,   640,  4526,   388,   632,   631,   186,   383,   631,  3773,
     631,   370,   632,   632,   548,   761,   762,   763,   764,   131,
     131,   153,    70,   403,   372,   186,  3912,   375,   774,  3915,
     631,   424,   606,   189,   368,    30,    61,  3923,   370,   373,
     632,    61,   529,   631,   633,   632,   380,    14,   265,     5,
     364,   385,   364,   235,   388,   149,   637,   370,   129,   370,
     138,   320,   410,   631,    46,   448,    46,   148,  3954,    46,
      46,    46,   631,   583,   459,   125,   631,   606,   337,   149,
     220,   279,   465,  3969,   637,   419,   402,   119,  3974,   640,
     144,    46,    25,    26,   631,   411,    46,    46,    52,   433,
     434,   435,   436,  3868,   549,  2075,  2076,   138,  2078,   460,
     426,  2081,  2082,  2083,  2084,  2085,  2086,  2087,   466,   467,
    2090,   458,  2092,   637,   358,   459,   633,    60,   444,   632,
     515,   516,   517,   149,   633,   633,   205,   522,   218,   632,
     637,    74,   525,   549,   632,    52,   149,  3912,   633,    82,
     186,   186,   186,   538,    46,   549,   541,   438,   120,   542,
     608,   221,   358,   631,   188,  3979,  4052,   477,   633,  2094,
    2292,  3417,   488,   106,  3418,   648,  3686,  2497,  4009,    25,
      26,   515,   516,   517,  4175,  4320,  4136,   120,   522,  4321,
     968,   124,   577,  3688,  3684,  3866,  4503,  4465,  4084,    46,
    4086,  1826,   518,  1762,   538,   576,   465,   541,  2784,  3857,
    4473,  3857,    58,    59,    60,  3857,  3857,  3857,  3857,  4357,
     153,  3857,    68,  3857,  3857,  3857,  4112,  4208,    74,  4357,
     564,  3857,  4314,  3857,  3857,  4234,    82,  4233,  1469,  2045,
    1009,  1473,  2992,   577,  3875,   991,  3523,  2813,   633,  2818,
    3227,  4166,  1287,  4017,  3913,  3526,   604,  4259,  4423,  4338,
     106,  4385,  1531,  4070,  4215,   514,   525,  3434,  2038,  3065,
     618,   619,   620,  3343,   120,  2656,  2582,  2046,   124,  4230,
    4166,  3321,  3366,   542,  4275,  3366,  3399,  3819,  3597,  4175,
    3647,  4257,   225,  4244,  3636,  2468,  2740,  3167,  3162,   232,
    1046,  1047,  3170,   637,    11,  4091,    11,   153,  4020,  1055,
    1056,  1057,  1058,  1059,  1060,  1061,   249,  4094,  4032,  4095,
    3879,  2128,  1545,  1069,  1070,  3827,  1072,  1073,  4028,  2045,
    2575,  1077,  1078,  1424,   579,  1081,  1082,  1083,  1084,  1420,
    1086,  1087,  3602,  3322,  1815,  4336,  2367,  1527,  1094,  1095,
    1480,  1097,  1098,  1099,  1100,  1101,  2333,  2800,  1104,  1105,
    1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  4255,
    1116,  3222,   595,  1119,  1120,   308,  2384,  2248,  1124,   225,
     866,  1835,  1128,  1129,  1130,  3184,   232,  2773,  2162,  4275,
    2460,  4089,  3290,   326,  3939,  1141,  1142,  1143,  1088,  2247,
    4352,  3415,  3333,   249,  1150,  4169,  4353,  2273,  3784,  4360,
    4454,  1157,  1158,  1159,  1439,  1161,   262,  3770,  2389,  4370,
    2133,  1062,  1168,  1169,  1170,  1199,  1172,  1173,  1174,  1175,
    1176,  1275,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,
    1300,   954,  2371,  1189,  1190,    12,    13,   380,   954,  2328,
    4336,  3529,  3241,  3240,   954,   388,  3300,  4255,   584,   954,
    1554,   661,   308,  1905,  1376,   575,  4352,  4353,  4419,  1906,
    3341,  3225,  1307,   547,  1404,  1751,  4362,  4421,  4282,  4450,
     326,  4348,  4520,  4369,  4525,  3246,  3639,  4438,  1336,  4440,
    3275,  2414,   574,  1687,  1861,  3276,  4447,   574,  2407,  2400,
    2406,  1830,  4266,  4267,   850,  1323,  4457,  1797,  3209,  1784,
    4044,  4050,  1536,   569,   852,  3999,   510,   510,   648,   648,
    4511,  3672,    -1,   648,    -1,    -1,   459,    94,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,  4487,  4488,    -1,    -1,
      -1,  4492,   388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4437,    -1,    -1,    -1,    -1,  4442,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,   516,   517,    -1,    -1,    -1,    -1,   522,
    1336,  4477,    -1,    -1,    -1,   162,   670,    -1,   165,    -1,
    1346,    -1,    -1,    -1,    -1,   538,    -1,    -1,   541,    -1,
      -1,   178,    -1,   459,    -1,  4501,    -1,  4503,  1364,    -1,
      -1,    -1,    -1,    -1,    -1,  4511,    -1,   701,    -1,  4515,
      -1,    -1,    -1,   200,  4520,    -1,    -1,    -1,    -1,  4525,
      -1,    -1,    -1,   717,   577,    -1,   111,   112,   113,   114,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,   515,
     516,   517,    -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     764,    -1,   538,    -1,    13,   541,    15,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    12,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
      49,   577,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,   213,   214,
     215,   216,    -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   631,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,
      94,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
     139,  1567,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   151,    -1,    -1,    -1,    -1,   404,    -1,    -1,
      -1,   408,    -1,    -1,    -1,   139,   165,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   321,   424,   323,   324,
     325,    -1,    -1,    -1,   183,   432,    -1,   332,   162,    -1,
      -1,   165,    -1,   440,    -1,    -1,    -1,    -1,    -1,   198,
      -1,   200,    -1,    -1,   178,    -1,   205,    -1,    -1,   208,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,   200,    -1,    -1,    -1,
      -1,    -1,   231,    -1,   233,   482,   483,   991,    -1,  1665,
    1666,  1667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   225,   251,    -1,  1680,    -1,    -1,   231,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   410,    -1,    -1,    -1,   268,
      -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
    1706,    -1,    -1,    -1,    -1,   532,  1712,    -1,    -1,  1715,
      -1,  1717,  1046,  1047,    -1,    -1,    -1,  1723,   272,  1725,
    1726,  1055,  1056,    -1,    -1,  1059,  1060,  1061,    -1,    -1,
      -1,    -1,    -1,    -1,   561,  1069,  1070,    -1,  1072,  1073,
      -1,   466,   467,  1077,    -1,    -1,    -1,  1081,  1082,  1083,
    1084,    -1,  1086,    -1,    -1,    -1,   583,    -1,   585,    -1,
    1094,  1095,    -1,  1097,  1098,    -1,    -1,    -1,    -1,    -1,
    1104,  1105,  1106,    -1,    -1,  1109,  1110,  1111,  1112,  1113,
    1114,    -1,  1116,    -1,    -1,  1119,  1120,    -1,    -1,   368,
    1124,    -1,    -1,    -1,  1128,  1129,  1130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1810,    -1,   385,  1141,  1142,  1143,
      -1,    -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,   398,
      -1,    13,    -1,  1157,  1158,  1159,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     404,    -1,   431,  1859,   408,   434,  1190,   436,    -1,    -1,
     439,  1867,    -1,   442,   443,    -1,    -1,    -1,    -1,    -1,
     424,    -1,    -1,   452,    -1,   454,    -1,    -1,   432,   604,
      -1,    -1,    -1,    -1,   463,    -1,   440,    -1,    -1,    -1,
     469,    -1,    -1,    -1,   619,   620,    -1,    -1,   477,    -1,
      -1,    -1,    94,   482,    -1,   484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,   483,
      -1,    -1,    -1,   125,    -1,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     162,    -1,    -1,   165,    -1,    -1,    -1,    -1,   532,    -1,
      -1,    -1,    -1,    -1,    -1,   564,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,
      -1,   580,  1336,    -1,   583,    -1,    -1,   561,   200,   588,
      -1,    -1,  1346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   583,
    1364,   585,    -1,   225,    -1,    -1,    -1,   616,    -1,   231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   631,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2069,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,    -1,    -1,    -1,    -1,    -1,    13,    -1,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2142,    34,    -1,    -1,
    2146,    -1,    -1,    -1,    -1,  2151,  2152,    -1,    -1,    -1,
      -1,    48,    49,    -1,  2160,    -1,    -1,  2163,    -1,    56,
      -1,    -1,    -1,    60,    61,    -1,    -1,  2173,  2174,    -1,
    2176,  2177,    -1,  2179,  2180,  2181,  2182,  2183,    -1,    76,
    2186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2195,
      -1,    -1,    -1,    -1,    -1,    -1,  2202,    94,  2204,    -1,
    2206,  2207,    -1,  2209,  2210,    -1,    -1,    -1,  2214,  2215,
    2216,    -1,   404,    -1,  2220,  2221,  2222,    -1,  2224,   116,
    2226,    -1,  2228,    -1,  2230,    -1,  2232,    -1,   125,   126,
     127,  2237,   424,  1567,   428,   429,    -1,    -1,    -1,    -1,
     432,   138,   139,    -1,    -1,    -1,    -1,    -1,   440,    -1,
    2256,    -1,    -1,    -1,    -1,    -1,    -1,  2263,    -1,    -1,
    2266,    -1,    -1,    -1,    -1,    -1,  2272,    -1,   165,  2275,
      -1,    -1,    -1,  2279,    -1,    -1,    -1,   469,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   198,    -1,   200,    -1,    -1,    -1,    -1,   205,    -1,
      -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1665,  1666,  1667,   231,  2341,   233,    -1,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   561,
      -1,   268,  1706,    -1,    -1,   272,    -1,    -1,    -1,    -1,
      -1,  1715,    -1,  1717,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   583,    -1,   585,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2415,
      -1,    -1,    -1,  2419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    33,
      -1,    -1,    -1,    -1,    38,    -1,    40,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,   368,    -1,    -1,  2480,    -1,  1810,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,
      -1,    -1,  2498,  2499,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,  1859,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1867,   431,    -1,    -1,   434,    -1,   436,
      -1,    -1,   439,   137,    -1,   442,   443,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   452,    -1,   454,    -1,    -1,
     154,    -1,    -1,    -1,    -1,    -1,   463,    -1,    -1,    -1,
      -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,   482,   180,   484,   182,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
    2626,  2627,    -1,    -1,   521,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   564,    -1,    -1,
      -1,  2677,   266,    -1,    -1,  2681,    -1,    -1,    -1,   576,
      -1,   275,   276,   580,   278,    -1,   583,    -1,    -1,    -1,
      -1,   588,    -1,    -1,    -1,  2701,  2702,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2722,    -1,    -1,   616,
     314,   315,   316,    -1,    -1,  2731,    -1,  2733,    -1,  2735,
      -1,    -1,    -1,    -1,   631,  2069,    -1,    -1,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,    -1,    -1,   343,
      -1,    -1,    -1,    -1,    -1,    -1,  2762,    -1,    -1,    -1,
      -1,  2767,    -1,    -1,    -1,    -1,   360,   361,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2796,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2142,    -1,
      -1,    -1,  2146,    -1,    -1,    -1,    -1,  2151,  2152,    -1,
      -1,    -1,    -1,    -1,   418,    -1,  2160,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2173,
    2174,    -1,  2176,    -1,    -1,  2179,  2180,  2181,  2182,  2183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2195,  2868,    -1,    -1,    -1,    -1,    -1,  2202,    -1,
    2204,    -1,  2206,  2207,    -1,  2209,    -1,    -1,    -1,   473,
    2214,  2215,  2216,   477,    -1,    -1,  2220,  2221,  2222,    -1,
    2224,    -1,  2226,    -1,  2228,   489,  2230,    -1,  2232,    -1,
      -1,    -1,    -1,  2237,    -1,    -1,    -1,    -1,  2914,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       6,    -1,  2256,    -1,    -1,    11,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2272,    25,
      26,  2275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   547,    -1,    -1,   550,    33,    34,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    69,    -1,    -1,    82,    -1,    -1,    -1,
      -1,   595,   596,    -1,    -1,    91,    25,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    -1,
     106,    -1,    -1,    -1,    -1,    -1,   620,    -1,   104,  3035,
    3036,    -1,    -1,    -1,   120,    -1,    -1,    -1,   124,    58,
      59,    60,    -1,    -1,    -1,    -1,   132,    -1,    -1,    68,
      -1,    -1,    -1,   139,  3060,    74,    -1,    -1,    -1,    -1,
      -1,   147,    -1,    82,    -1,    -1,    -1,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,    -1,    -1,
      -1,  2415,   158,    -1,    -1,   161,    -1,   106,    -1,    -1,
      -1,    -1,  3098,    -1,    -1,    -1,    -1,    -1,   184,    -1,
      -1,   120,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,   192,  3123,    -1,    -1,
      -1,  3127,  3128,   199,  3130,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3139,   153,    -1,    -1,    -1,  3144,   225,
      -1,  3147,    -1,  3149,  3150,    -1,   232,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   249,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,  3182,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,    -1,
      -1,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
    3216,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   308,    -1,    -1,    -1,   302,    -1,    -1,    -1,
     249,    -1,    -1,    -1,  3240,    -1,    -1,    -1,    -1,    -1,
     326,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,    -1,   308,
      -1,   367,    -1,    -1,   380,    -1,  3302,    -1,    -1,    -1,
      -1,    -1,   388,    -1,  3310,    -1,    -1,   326,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,
     406,   407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2677,    -1,    -1,    -1,  2681,   434,    -1,
      -1,   427,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,    -1,    -1,  2701,  2702,   388,
      -1,    -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2722,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2731,   474,  2733,
      -1,  2735,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
     516,   517,    -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,
     459,    -1,   518,    -1,    -1,    -1,   522,    -1,    -1,    -1,
      -1,    -1,   538,    -1,    -1,   541,    -1,    -1,    -1,    -1,
      -1,    -1,  2796,    -1,   540,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   577,    -1,    -1,    -1,    -1,   515,   516,   517,    -1,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,
      -1,   597,   541,    -1,  3530,    -1,    -1,   603,    -1,    -1,
      -1,    -1,    -1,    -1,  2868,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   577,    -1,
      -1,    -1,    -1,    -1,  3570,  3571,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3579,    -1,    -1,    -1,    -1,    -1,    -1,
    2914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3035,  3036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3719,    -1,    -1,    -1,  3723,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3750,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3765,
      -1,    -1,    -1,    -1,  3098,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3123,
      -1,    -1,    -1,  3127,  3128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3139,    -1,    -1,    -1,    -1,
    3144,    -1,    -1,  3147,    -1,  3149,  3150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3857,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3240,  3913,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3921,    -1,    -1,    -1,    -1,
      -1,    -1,  3928,    -1,  3930,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3966,    -1,    -1,    -1,    -1,    -1,  3972,  3973,  3302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3310,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4075,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4105,
      -1,  4107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4117,    -1,  4119,  4120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3530,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4213,    -1,  4215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4230,  4231,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3570,  3571,  4244,    -1,
      -1,    -1,    -1,    -1,    -1,  3579,    -1,    -1,    -1,    -1,
    4256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4300,  4301,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4313,  4314,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4360,    -1,    -1,    -1,    -1,    -1,
      -1,  4367,    -1,    -1,  4370,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3719,    -1,    -1,    -1,  3723,
      -1,    -1,    -1,    -1,  4400,    -1,    -1,    -1,    -1,    -1,
      -1,  4407,    -1,  4409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4419,    -1,    -1,  3750,  4423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4436,  3765,  4438,    -1,  4440,    -1,    -1,    -1,    -1,    -1,
      -1,  4447,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4471,  4472,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4487,  4488,    -1,    -1,    -1,  4492,    -1,    -1,    -1,
      -1,    -1,  4498,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3921,    -1,    -1,
      -1,    -1,    -1,    -1,  3928,    -1,  3930,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4075,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4105,    -1,  4107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4231,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4300,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4367,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,  4400,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,  4498,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,  4528,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
     255,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,   558,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,   189,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,   189,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,   189,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    -1,    -1,    96,    97,    98,    99,
      -1,   101,   102,   103,    -1,   105,   106,   107,   108,   109,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,   203,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,   231,   232,   233,   234,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,   258,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,   438,   439,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,   562,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
     590,   591,   592,   593,   594,    -1,    -1,   597,   598,    -1,
     600,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,    -1,
     630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    -1,
      -1,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,   203,    -1,
     205,   206,    -1,   208,   209,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,   231,   232,   233,   234,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,   258,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,   590,   591,   592,   593,   594,
      -1,    -1,   597,   598,    -1,   600,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,   624,
     625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,   174,   175,   176,    -1,   178,   179,
     180,   181,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,   209,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
      -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,   277,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
      -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   638,   639,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,   250,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,   262,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,   469,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,   620,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,
     134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,
     154,    -1,    -1,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,    -1,    -1,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,   183,
      -1,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
     194,   195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,
      -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,
      -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,
     244,   245,    -1,    -1,    -1,   249,   250,    -1,   252,   253,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,
      -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,
     274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,    -1,   306,   307,   308,   309,    -1,   311,   312,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,    -1,
      -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
      -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
      -1,    -1,   426,   427,   428,   429,   430,    -1,   432,   433,
      -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,
     444,   445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,
     474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,
      -1,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,
     504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,
     514,   515,   516,   517,   518,    -1,    -1,   521,   522,    -1,
     524,   525,   526,   527,   528,   529,    -1,    -1,   532,   533,
     534,   535,    -1,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
     564,   565,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,
     584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,
      -1,   615,   616,   617,    -1,    -1,   620,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   639,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,   469,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,   632,    -1,    -1,    18,    -1,
      -1,    21,   639,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
      -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
      -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,   632,    14,    -1,    -1,    -1,    18,   638,   639,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,   620,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     631,    -1,    14,    -1,    -1,    -1,    18,    -1,   639,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,
     152,   153,   154,    -1,    -1,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,    -1,    -1,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,
      -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,
     192,    -1,   194,   195,   196,   197,    -1,   199,    -1,   201,
      -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,
     212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,
     222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,    -1,   235,    -1,   237,    -1,    -1,    -1,   241,
     242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,
     252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,
      -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,    -1,   306,   307,   308,   309,    -1,   311,
     312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,
     362,   363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,   398,   399,   400,    -1,
     402,    -1,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,    -1,    -1,   426,   427,   428,   429,   430,    -1,
     432,   433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,
     442,    -1,   444,   445,    -1,   447,   448,   449,    -1,   451,
      -1,    -1,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,
     472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,
      -1,   483,    -1,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,
     502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,
      -1,   513,   514,   515,   516,   517,   518,    -1,    -1,   521,
     522,    -1,   524,   525,   526,   527,   528,   529,    -1,    -1,
     532,   533,   534,   535,    -1,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,
     582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,
      -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,
     602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,   613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,   631,    -1,    14,    -1,
      -1,    -1,    18,    -1,   639,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,   195,
     196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,
     216,   217,   218,   219,    -1,    -1,   222,   223,   224,    -1,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,
      -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,
     266,   267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,    -1,    -1,    -1,    -1,     5,
     626,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   639,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,   195,
     196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,
     216,   217,   218,   219,    -1,    -1,   222,   223,   224,    -1,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,
      -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,
     266,   267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   638,   639,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   639,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,
      -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,    -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,    -1,    -1,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,    -1,   178,   179,
     180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,
     190,    -1,   192,    -1,   194,   195,   196,   197,    -1,   199,
      -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,
      -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,   219,
      -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,
      -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,
      -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,
      -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   282,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
      -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,   398,   399,
     400,    -1,   402,    -1,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,    -1,    -1,   426,   427,   428,   429,
     430,    -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,
     440,    -1,   442,    -1,   444,   445,    -1,   447,   448,   449,
      -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,    -1,   467,   468,    -1,
      -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,
      -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
     500,   501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,
     510,    -1,    -1,   513,   514,   515,   516,   517,   518,    -1,
      -1,   521,   522,    -1,   524,   525,   526,   527,   528,   529,
      -1,    -1,   532,   533,   534,   535,    -1,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,
      -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,
      -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,
     620,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,    -1,   620,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,   133,   134,    -1,
      -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
      -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,
      -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,   195,
     196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,
     206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,
     216,   217,   218,   219,    -1,    -1,   222,   223,   224,    -1,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,
      -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,
      -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,
     266,   267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,    -1,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,
     426,   427,   428,   429,   430,    -1,   432,   433,    -1,   435,
     436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,
      -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,   475,
      -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,
      -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,
     516,   517,   518,    -1,    -1,   521,   522,    -1,   524,   525,
     526,   527,   528,   529,    -1,    -1,   532,   533,   534,   535,
      -1,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,   575,
     576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,
     586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,
     616,   617,    -1,    -1,   620,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   639,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
      -1,   620,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,   261,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,    -1,   620,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   638,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,    -1,   620,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   638,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,    -1,   620,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   638,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,   261,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,    -1,   620,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   638,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
      -1,   620,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,    -1,   620,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,   638,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,   246,
      -1,    -1,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,   279,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,
     437,   438,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,    -1,    -1,   455,    -1,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
     467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,
      -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,
     517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,   608,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,   633,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,   626,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,   626,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,   626,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,   626,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,   181,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,   209,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
     277,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,    -1,
      -1,   358,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
     497,   498,   499,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,   568,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,   155,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,   261,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,   478,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,   261,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,   277,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,   568,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    99,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,   261,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
     209,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,   261,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
     261,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,   261,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    19,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,   189,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,   120,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,   138,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,   183,    -1,    -1,    -1,
     187,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
      -1,   208,    -1,    -1,   211,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,   252,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,   398,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,   433,    -1,   435,   436,
     437,    -1,    -1,   440,    -1,   442,    -1,   444,   445,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,    -1,    -1,   472,   473,   474,   475,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,   514,   515,   516,
     517,   518,    -1,    -1,   521,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,   575,   576,
      -1,    -1,   579,    -1,    -1,   582,    -1,   584,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,   613,    -1,   615,   616,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,   138,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,    -1,   178,   179,   180,    -1,    -1,
     183,    -1,    -1,    -1,   187,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,   205,   206,    -1,   208,    -1,    -1,   211,   212,
      -1,    -1,    -1,   216,   217,   218,   219,    -1,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,    -1,    -1,    -1,   249,    -1,    -1,   252,
     253,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
     433,    -1,   435,   436,   437,    -1,    -1,   440,    -1,   442,
      -1,   444,   445,    -1,   447,   448,   449,    -1,   451,    -1,
      -1,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,    -1,    -1,   472,
     473,   474,   475,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,   514,   515,   516,   517,   518,    -1,    -1,   521,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,   564,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,   575,   576,    -1,    -1,   579,    -1,    -1,   582,
      -1,   584,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
     613,    -1,   615,   616,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,   138,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,    -1,   178,
     179,   180,    -1,    -1,   183,    -1,    -1,    -1,   187,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,    -1,   208,
      -1,    -1,   211,   212,    -1,    -1,    -1,   216,   217,   218,
     219,    -1,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,    -1,    -1,    -1,
     249,    -1,    -1,   252,   253,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,   398,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,   433,    -1,   435,   436,   437,    -1,
      -1,   440,    -1,   442,    -1,   444,   445,    -1,   447,   448,
     449,    -1,   451,    -1,    -1,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,    -1,    -1,   472,   473,   474,   475,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,   514,   515,   516,   517,   518,
      -1,    -1,   521,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,   575,   576,    -1,    -1,
     579,    -1,    -1,   582,    -1,   584,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,   613,    -1,   615,   616,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,   138,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,    -1,   178,   179,   180,    -1,    -1,   183,    -1,
      -1,    -1,   187,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
     205,   206,    -1,   208,    -1,    -1,   211,   212,    -1,    -1,
      -1,   216,   217,   218,   219,    -1,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,    -1,    -1,    -1,   249,    -1,    -1,   252,   253,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,   398,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,   433,    -1,
     435,   436,   437,    -1,    -1,   440,    -1,   442,    -1,   444,
     445,    -1,   447,   448,   449,    -1,   451,    -1,    -1,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,    -1,    -1,   472,   473,   474,
     475,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,   514,
     515,   516,   517,   518,    -1,    -1,   521,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
     575,   576,    -1,    -1,   579,    -1,    -1,   582,    -1,   584,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,   613,    -1,
     615,   616,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,   138,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,    -1,   178,   179,   180,
      -1,    -1,   183,    -1,    -1,    -1,   187,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,   205,   206,    -1,   208,    -1,    -1,
     211,   212,    -1,    -1,    -1,   216,   217,   218,   219,    -1,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,    -1,    -1,    -1,   249,    -1,
      -1,   252,   253,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,   398,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,   433,    -1,   435,   436,   437,    -1,    -1,   440,
      -1,   442,    -1,   444,   445,    -1,   447,   448,   449,    -1,
     451,    -1,    -1,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,    -1,
      -1,   472,   473,   474,   475,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,   514,   515,   516,   517,   518,    -1,    -1,
     521,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,   575,   576,    -1,    -1,   579,    -1,
      -1,   582,    -1,   584,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,   613,    -1,   615,   616,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,   145,   146,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,   246,
      -1,    -1,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,   279,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,
     437,   438,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,    -1,    -1,   455,    -1,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
     467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,
      -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,
     517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,   608,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
     143,    -1,   145,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,    -1,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,   246,    -1,    -1,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,   279,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,    -1,    -1,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
      -1,    -1,   435,    -1,   437,   438,    -1,   440,    -1,    -1,
      -1,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
      -1,    -1,   455,    -1,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,
     473,   474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,    -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,    -1,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,
      -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,   606,    -1,   608,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,    -1,   145,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
     219,   220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,   246,    -1,    -1,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
     279,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,    -1,    -1,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,   438,
      -1,   440,    -1,    -1,    -1,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,    -1,    -1,   455,    -1,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,   467,    -1,
      -1,    -1,    -1,   472,   473,   474,    -1,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,
      -1,   490,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,    -1,   515,   516,   517,   518,
      -1,    -1,    -1,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,    -1,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,   606,    -1,   608,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
      -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,   246,    -1,    -1,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,   279,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,    -1,    -1,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,    -1,    -1,
     435,    -1,   437,   438,    -1,   440,    -1,    -1,    -1,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,    -1,    -1,
     455,    -1,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,   474,
      -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
      -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,    -1,
     515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,   608,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,    -1,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,   246,    -1,    -1,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,   279,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,    -1,    -1,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,    -1,    -1,   435,    -1,   437,   438,    -1,   440,
      -1,    -1,    -1,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,    -1,    -1,   455,    -1,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,   467,    -1,    -1,    -1,
      -1,   472,   473,   474,    -1,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,
      -1,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,    -1,   515,   516,   517,   518,    -1,    -1,
      -1,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,    -1,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,    -1,
      -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,   608,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,   246,
      -1,    -1,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,   279,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,
     437,   438,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,    -1,    -1,   455,    -1,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
     467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,
      -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,
     517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,   608,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
     617,    -1,     5,   620,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
     133,   134,    -1,    -1,    -1,    -1,    -1,    -1,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,   157,   158,    -1,   160,   161,   162,
     163,   164,    -1,    -1,    -1,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,   178,   179,   180,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,   190,    -1,   192,
      -1,   194,   195,   196,   197,    -1,   199,    -1,   201,    -1,
      -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,   212,
      -1,    -1,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,   224,    -1,    -1,   227,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,   241,   242,
      -1,   244,   245,   246,    -1,    -1,   249,    -1,    -1,    -1,
     253,    -1,    -1,   256,   257,    -1,   259,   260,    -1,    -1,
      -1,    -1,    -1,   266,   267,    -1,   269,    -1,   271,    -1,
     273,   274,    -1,    -1,    -1,    -1,   279,    -1,    -1,   282,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,    -1,    -1,    -1,    -1,   399,   400,    -1,   402,
      -1,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,    -1,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,    -1,    -1,   426,   427,   428,   429,   430,    -1,   432,
      -1,    -1,   435,    -1,   437,   438,    -1,   440,    -1,    -1,
      -1,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
      -1,    -1,   455,    -1,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,   467,    -1,    -1,    -1,    -1,   472,
     473,   474,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,
     483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,    -1,
     493,   494,    -1,    -1,    -1,    -1,    -1,   500,   501,   502,
      -1,   504,   505,    -1,   507,    -1,    -1,   510,    -1,    -1,
     513,    -1,   515,   516,   517,   518,    -1,    -1,    -1,   522,
      -1,   524,   525,   526,   527,   528,   529,    -1,    -1,   532,
     533,   534,   535,    -1,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,    -1,    -1,
      -1,    -1,   565,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,   582,
      -1,    -1,    -1,   586,   587,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,   597,    -1,    -1,    -1,   601,   602,
     603,   604,   605,    -1,    -1,   608,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,   617,    -1,     5,   620,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,   133,   134,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,   157,   158,
      -1,   160,   161,   162,   163,   164,    -1,    -1,    -1,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,   178,
     179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,   190,    -1,   192,    -1,   194,   195,   196,   197,    -1,
     199,    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,   216,   217,   218,
     219,   220,    -1,   222,   223,   224,    -1,    -1,   227,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   241,   242,    -1,   244,   245,   246,    -1,    -1,
     249,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,    -1,
     259,   260,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,
     269,    -1,   271,    -1,   273,   274,    -1,    -1,    -1,    -1,
     279,    -1,    -1,   282,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,    -1,    -1,    -1,    -1,
     399,   400,    -1,   402,    -1,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,    -1,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,    -1,    -1,   426,   427,   428,
     429,   430,    -1,   432,    -1,    -1,   435,    -1,   437,   438,
      -1,   440,    -1,    -1,    -1,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,    -1,    -1,   455,    -1,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,   467,    -1,
      -1,    -1,    -1,   472,   473,   474,    -1,    -1,    -1,    -1,
     479,    -1,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,
      -1,   490,    -1,    -1,   493,   494,    -1,    -1,    -1,    -1,
      -1,   500,   501,   502,    -1,   504,   505,    -1,   507,    -1,
      -1,   510,    -1,    -1,   513,    -1,   515,   516,   517,   518,
      -1,    -1,    -1,   522,    -1,   524,   525,   526,   527,   528,
     529,    -1,    -1,   532,   533,   534,   535,    -1,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,    -1,    -1,    -1,    -1,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,    -1,    -1,   582,    -1,    -1,    -1,   586,   587,    -1,
      -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   597,    -1,
      -1,    -1,   601,   602,   603,   604,   605,    -1,    -1,   608,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,   617,    -1,
       5,   620,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,    -1,   152,   153,   154,
      -1,    -1,   157,   158,    -1,   160,   161,   162,   163,   164,
      -1,    -1,    -1,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,   178,   179,   180,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,   190,    -1,   192,    -1,   194,
     195,   196,   197,    -1,   199,    -1,   201,    -1,    -1,    -1,
      -1,   206,    -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
      -1,    -1,   227,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,   241,   242,    -1,   244,
     245,   246,    -1,    -1,   249,    -1,    -1,    -1,   253,    -1,
      -1,   256,   257,    -1,   259,   260,    -1,    -1,    -1,    -1,
      -1,   266,   267,    -1,   269,    -1,   271,    -1,   273,   274,
      -1,    -1,    -1,    -1,   279,    -1,    -1,   282,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
      -1,    -1,    -1,    -1,   399,   400,    -1,   402,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,    -1,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,    -1,
      -1,   426,   427,   428,   429,   430,    -1,   432,    -1,    -1,
     435,    -1,   437,   438,    -1,   440,    -1,    -1,    -1,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,    -1,    -1,
     455,    -1,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,   467,    -1,    -1,    -1,    -1,   472,   473,   474,
      -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,   483,    -1,
      -1,   486,    -1,   488,    -1,   490,    -1,    -1,   493,   494,
      -1,    -1,    -1,    -1,    -1,   500,   501,   502,    -1,   504,
     505,    -1,   507,    -1,    -1,   510,    -1,    -1,   513,    -1,
     515,   516,   517,   518,    -1,    -1,    -1,   522,    -1,   524,
     525,   526,   527,   528,   529,    -1,    -1,   532,   533,   534,
     535,    -1,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,    -1,    -1,   582,    -1,    -1,
      -1,   586,   587,    -1,    -1,    -1,    -1,    -1,    -1,   594,
      -1,    -1,   597,    -1,    -1,    -1,   601,   602,   603,   604,
     605,    -1,    -1,   608,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,   617,    -1,     5,   620,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
      -1,   152,   153,   154,    -1,    -1,   157,   158,    -1,   160,
     161,   162,   163,   164,    -1,    -1,    -1,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,   178,   179,   180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,   190,
      -1,   192,    -1,   194,   195,   196,   197,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,   206,    -1,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,   224,    -1,    -1,   227,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
     241,   242,    -1,   244,   245,   246,    -1,    -1,   249,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,    -1,   259,   260,
      -1,    -1,    -1,    -1,    -1,   266,   267,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,    -1,    -1,    -1,   279,    -1,
      -1,   282,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,    -1,    -1,    -1,   399,   400,
      -1,   402,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,    -1,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,    -1,    -1,   426,   427,   428,   429,   430,
      -1,   432,    -1,    -1,   435,    -1,   437,   438,    -1,   440,
      -1,    -1,    -1,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,    -1,    -1,   455,    -1,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,   467,    -1,    -1,    -1,
      -1,   472,   473,   474,    -1,    -1,    -1,    -1,   479,    -1,
      -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,
      -1,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,   502,    -1,   504,   505,    -1,   507,    -1,    -1,   510,
      -1,    -1,   513,    -1,   515,   516,   517,   518,    -1,    -1,
      -1,   522,    -1,   524,   525,   526,   527,   528,   529,    -1,
      -1,   532,   533,   534,   535,    -1,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
      -1,    -1,    -1,    -1,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,    -1,
      -1,   582,    -1,    -1,    -1,   586,   587,    -1,    -1,    -1,
      -1,    -1,    -1,   594,    -1,    -1,   597,    -1,    -1,    -1,
     601,   602,   603,   604,   605,    -1,    -1,   608,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,   617,    -1,     5,   620,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,    -1,
      -1,   128,    -1,   130,   131,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,    -1,   152,   153,   154,    -1,    -1,
     157,   158,    -1,   160,   161,   162,   163,   164,    -1,    -1,
      -1,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
      -1,   178,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,   190,    -1,   192,    -1,   194,   195,   196,
     197,    -1,   199,    -1,   201,    -1,    -1,    -1,    -1,   206,
      -1,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,   216,
     217,   218,   219,    -1,    -1,   222,   223,   224,    -1,    -1,
     227,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,   241,   242,    -1,   244,   245,    -1,
      -1,    -1,   249,    -1,    -1,    -1,   253,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,    -1,    -1,    -1,   266,
     267,    -1,   269,    -1,   271,    -1,   273,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    -1,    -1,
      -1,    -1,   399,   400,    -1,   402,    -1,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,    -1,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,    -1,    -1,   426,
     427,   428,   429,   430,    -1,   432,    -1,    -1,   435,    -1,
     437,    -1,    -1,   440,    -1,    -1,    -1,   444,    -1,    -1,
     447,   448,   449,    -1,   451,    -1,    -1,    -1,   455,    -1,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
     467,    -1,    -1,    -1,    -1,   472,   473,   474,    -1,    -1,
      -1,    -1,   479,    -1,    -1,    -1,   483,    -1,    -1,   486,
      -1,   488,    -1,   490,    -1,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,   500,   501,   502,    -1,   504,   505,    -1,
     507,    -1,    -1,   510,    -1,    -1,   513,    -1,   515,   516,
     517,   518,    -1,    -1,    -1,   522,    -1,   524,   525,   526,
     527,   528,   529,    -1,    -1,   532,   533,   534,   535,    -1,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,    -1,    -1,    -1,    -1,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,    -1,    -1,   582,    -1,    -1,    -1,   586,
     587,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,
     597,    -1,    -1,    -1,   601,   602,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
     617,    -1,    -1,   620
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    30,    34,    48,    49,    56,    60,    61,
      76,    94,   116,   125,   126,   127,   138,   139,   151,   165,
     183,   198,   200,   205,   208,   231,   233,   251,   268,   272,
     368,   385,   398,   409,   431,   434,   436,   439,   442,   443,
     452,   454,   463,   469,   477,   482,   484,   514,   521,   564,
     576,   580,   583,   588,   616,   631,   642,   645,   646,   647,
     648,   649,   651,   656,   658,   665,   698,   725,   732,   733,
     852,  1017,  1059,  1061,  1075,  1078,  1083,  1085,  1086,  1091,
    1094,  1099,  1106,  1118,  1119,  1277,  1279,  1294,  1297,  1322,
    1330,  1341,  1348,  1362,  1366,  1369,  1379,  1385,  1389,  1391,
    1392,  1444,  1472,  1478,  1480,  1487,  1490,  1517,  1523,  1524,
    1525,  1526,  1583,  1591,  1592,    11,   103,   122,   192,   221,
     273,   403,   475,   538,   586,  1055,  1548,  1549,  1550,  1553,
     269,   356,  1093,  1518,   546,  1435,   225,     5,     7,     8,
       9,    10,    11,    14,    18,    21,    23,    24,    25,    26,
      27,    28,    30,    34,    38,    41,    42,    43,    45,    47,
      48,    51,    54,    55,    57,    58,    60,    62,    63,    64,
      65,    66,    67,    69,    70,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    82,    83,    85,    86,    87,    88,
      89,    93,    96,    98,   101,   105,   106,   107,   110,   115,
     116,   121,   122,   124,   128,   130,   131,   132,   133,   134,
     138,   141,   142,   143,   147,   149,   150,   152,   153,   154,
     157,   158,   160,   161,   162,   163,   164,   165,   168,   169,
     170,   171,   172,   175,   176,   178,   179,   180,   183,   187,
     188,   190,   192,   194,   195,   196,   197,   199,   201,   205,
     206,   208,   211,   212,   216,   217,   218,   219,   222,   223,
     224,   227,   232,   233,   237,   241,   242,   244,   245,   249,
     252,   253,   256,   259,   260,   266,   267,   269,   271,   273,
     274,   282,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   302,
     303,   304,   306,   307,   308,   309,   311,   312,   317,   318,
     319,   320,   321,   322,   325,   326,   328,   330,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   343,   344,   347,
     348,   349,   350,   354,   355,   359,   361,   362,   363,   365,
     366,   367,   369,   379,   380,   381,   383,   384,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   398,   399,
     400,   402,   404,   405,   406,   407,   408,   410,   411,   412,
     415,   419,   420,   421,   422,   423,   426,   427,   428,   429,
     430,   432,   433,   435,   436,   437,   440,   442,   444,   445,
     447,   448,   449,   451,   454,   455,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   467,   468,   472,   473,   474,
     475,   479,   483,   485,   486,   487,   488,   490,   491,   492,
     493,   494,   500,   501,   502,   504,   505,   507,   510,   513,
     514,   515,   516,   517,   518,   521,   522,   524,   525,   526,
     527,   528,   529,   532,   533,   534,   535,   537,   538,   541,
     542,   543,   544,   547,   548,   550,   551,   552,   553,   559,
     560,   564,   565,   566,   567,   569,   570,   572,   573,   575,
     576,   579,   582,   584,   586,   587,   594,   597,   601,   602,
     603,   604,   605,   612,   613,   615,   616,   617,   620,   692,
    1433,  1438,  1442,  1443,   302,   537,   540,  1474,  1474,   612,
    1519,   103,   191,   273,   475,   495,   538,   543,   578,   586,
     674,   675,   904,   905,   906,   995,   996,   997,  1331,  1278,
     103,   162,   192,   225,   273,   403,   475,   538,   543,   561,
     586,   601,  1290,  1438,  1093,    98,   734,   691,   639,  1430,
    1432,  1438,   657,  1295,   391,    82,   411,  1390,   106,   225,
     617,  1397,  1474,  1093,   853,  1438,  1386,   463,   586,  1474,
    1093,  1298,  1380,   498,   722,   726,   727,  1438,   691,  1519,
    1438,  1122,  1124,  1125,  1445,  1349,   726,   487,   559,   487,
     540,  1343,   391,  1479,  1323,  1438,    30,    76,   149,   398,
     420,   454,   514,  1585,   469,   631,  1120,     0,   151,   643,
     398,   171,   187,   386,  1367,  1430,  1438,   155,  1029,  1438,
     155,   692,   202,   692,   261,  1435,  1438,  1440,   800,   801,
     804,   827,  1438,   691,   540,   162,  1023,  1548,  1474,  1519,
    1100,   699,   639,   557,  1076,  1087,    17,  1520,   220,   907,
     202,  1440,   802,   827,   691,   375,  1545,  1549,  1550,  1551,
    1552,  1553,   540,   905,   225,   225,   225,   221,   280,   412,
    1339,  1340,     7,    21,    27,    33,    35,    36,    37,    39,
      52,    53,    58,    59,    66,    69,    88,    91,    92,    97,
      99,   102,   103,   108,   109,   110,   115,   117,   120,   166,
     173,   174,   181,   187,   195,   197,   203,   209,   216,   220,
     231,   234,   258,   266,   277,   305,   310,   321,   325,   327,
     331,   332,   333,   334,   335,   342,   351,   352,   353,   357,
     358,   363,   382,   388,   393,   394,   396,   410,   438,   439,
     451,   453,   460,   461,   467,   519,   520,   526,   530,   531,
     536,   546,   550,   551,   552,   553,   562,   563,   564,   568,
     571,   586,   590,   591,   592,   593,   598,   600,   604,   605,
     620,   624,   625,   630,   631,   634,   635,   638,   639,   956,
    1139,  1140,  1141,  1142,  1146,  1149,  1150,  1151,  1152,  1153,
    1154,  1162,  1166,  1178,  1416,  1418,  1420,  1421,  1422,  1426,
    1428,  1433,  1438,   220,  1289,  1289,  1289,  1438,   202,  1289,
    1289,   827,  1289,   691,  1289,  1474,   652,  1370,   130,  1491,
    1438,   367,    65,   416,   639,  1440,   123,   210,   280,  1300,
    1438,  1139,   235,  1393,  1473,  1474,    46,   854,   189,    33,
     302,  1354,  1387,  1438,   691,  1095,  1474,   123,   280,  1301,
    1329,   302,   411,   487,  1381,  1382,   594,   723,   477,   728,
    1488,   557,  1520,  1123,    12,   135,   210,   456,   503,   504,
     505,   506,   507,   508,   523,  1129,  1130,  1131,  1544,    58,
      59,   120,   199,   269,   338,   388,   474,   559,   638,   958,
    1438,  1446,  1458,  1462,  1464,    34,    58,    69,    92,    94,
     104,   153,   158,   161,   190,   192,   199,   201,   224,   225,
     248,   269,   302,   367,   392,   402,   403,   406,   407,   427,
     474,   487,   522,   540,   603,   958,   994,  1350,  1354,  1355,
    1357,  1459,   728,   430,   510,  1070,  1071,  1072,   416,   609,
    1062,  1063,  1064,  1070,  1342,  1438,  1474,  1329,    35,   209,
     546,  1417,  1436,  1584,  1584,  1584,  1584,  1584,  1124,  1120,
     632,   637,  1438,   155,  1364,  1363,   319,   544,   570,  1019,
     584,    99,  1440,  1441,  1021,   806,   828,  1438,  1020,   369,
       6,    56,   139,   352,   415,   417,   829,  1025,  1441,  1430,
     692,   509,  1554,  1555,  1022,  1084,  1101,  1102,  1103,  1104,
    1430,   631,   700,  1438,   659,  1284,  1285,  1430,  1284,    55,
     354,   354,   431,  1521,   351,   352,  1145,  1438,   805,   828,
     185,     6,  1441,  1507,  1508,   439,    10,   403,   561,   678,
    1135,  1547,  1555,  1567,  1571,  1572,  1578,   678,  1135,  1546,
    1555,  1567,  1572,  1578,  1548,  1553,   907,  1438,  1438,  1438,
     189,  1332,  1336,  1337,  1438,  1339,   631,   631,   631,  1149,
     631,   631,   631,  1139,  1181,   631,   631,   631,   631,   631,
     631,   631,   631,   631,  1138,  1138,   631,   945,   631,   631,
     631,   546,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,  1139,   631,   631,   631,  1179,
    1180,  1426,  1438,   631,   631,   631,   631,   631,   631,   631,
     631,   631,  1139,   945,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   945,   546,   631,   631,   631,   546,   631,   631,
     631,    35,   209,   546,   631,  1138,   945,   945,   631,   631,
     631,   631,   631,   631,  1149,  1149,  1149,  1139,  1539,  1540,
    1438,  1167,  1438,    16,    17,   372,   375,   618,  1143,  1144,
     155,   156,   193,   204,   243,   254,   281,   345,  1147,    31,
     136,   238,   262,   331,   425,   480,   481,   493,   622,   623,
     624,   625,   626,   627,   628,   629,  1145,  1149,    68,   374,
     633,  1436,   631,   639,   166,  1438,   692,  1438,   364,   828,
     692,  1440,   355,   602,   838,   839,  1291,  1292,  1293,  1355,
     692,  1441,  1506,  1283,  1289,   589,   653,    33,   128,   153,
     157,   194,   212,   274,   402,   411,   426,   444,   488,   518,
    1371,  1376,  1377,  1474,    81,   638,   735,   736,   737,   738,
    1438,    12,    13,    94,   125,   139,   162,   165,   178,   200,
     225,   231,   272,   404,   408,   424,   432,   440,   469,   482,
     483,   532,   561,   583,   585,  1492,  1494,  1496,  1497,    19,
     155,  1233,  1234,  1481,  1438,  1055,   492,    48,    80,   280,
    1399,  1430,  1475,  1476,  1092,   264,   267,   413,   855,   857,
     638,   650,  1435,   274,  1096,  1441,  1097,  1098,  1430,  1079,
     235,  1286,  1302,  1303,  1430,    48,  1383,   633,  1436,    54,
      63,    73,    85,    86,    87,   101,   320,   337,   465,   525,
     542,   729,   731,    12,   408,  1489,  1494,   463,  1522,  1521,
     577,  1527,  1528,   626,  1133,  1134,  1135,  1131,   477,   639,
      33,   120,   155,   478,   959,   960,  1313,  1440,   186,  1313,
    1448,   638,  1440,    33,   120,   962,   963,  1440,   639,  1449,
    1447,  1313,   161,   262,   607,  1361,   631,   103,   162,   192,
     403,   540,   561,   601,  1361,    12,   916,  1440,   263,  1252,
    1254,   189,   238,  1356,  1358,    67,   518,   186,   518,   537,
      67,   518,    12,    41,    89,    93,   242,   318,   381,   494,
     534,  1344,  1345,  1346,   161,   212,   518,   518,  1252,  1361,
    1358,   274,   152,    70,   405,   537,   560,   518,   597,  1060,
     633,   366,   614,    83,   633,  1285,  1055,   633,   365,  1587,
     533,  1588,   247,   447,  1586,   632,  1528,  1530,  1532,  1533,
     151,   644,  1440,  1118,  1294,  1297,  1322,  1330,  1365,  1368,
    1417,  1438,   120,   902,   903,   913,   914,   967,   106,  1138,
     638,   693,     6,   807,   693,   631,   105,   824,   824,   824,
       4,   633,   388,  1018,  1024,   468,   601,  1555,  1284,   238,
     633,   385,  1112,  1114,  1115,   701,   702,  1139,   222,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   303,   304,
     428,   429,   660,   661,   664,   171,   412,   633,  1077,    57,
     171,   175,   186,   317,   412,  1088,  1089,  1090,    55,   431,
     166,   673,   807,   106,   824,   218,   633,  1135,  1135,  1135,
     162,   192,   192,  1555,  1430,   998,   999,   998,   998,  1287,
    1288,  1430,  1431,  1438,   633,  1334,   639,  1338,  1139,  1139,
      12,   135,  1174,  1235,  1174,  1174,  1174,   606,  1183,  1139,
    1139,  1178,  1178,  1139,  1139,  1139,   135,  1174,  1235,   632,
     358,   632,   632,  1139,  1139,  1139,  1139,  1426,  1539,   111,
     112,   113,   114,   115,   213,   214,   215,   216,   321,   323,
     324,   325,   332,   410,   466,   467,   604,   619,   620,  1230,
    1231,  1139,  1178,   107,   110,   550,   553,  1232,   135,  1169,
    1139,  1139,  1139,  1139,  1230,  1139,  1178,  1180,     9,   633,
     639,   135,  1174,  1139,  1139,   135,  1174,  1139,  1139,  1178,
    1178,  1178,  1139,  1139,  1139,  1178,  1142,  1139,  1139,  1139,
    1139,  1139,  1139,   632,  1139,  1174,  1174,  1139,  1139,   135,
    1174,  1139,  1231,  1231,  1139,    44,   255,   558,  1139,  1139,
     632,  1427,  1428,  1438,  1174,  1174,  1139,  1139,  1139,   632,
     633,   632,   469,   631,  1536,  1537,  1139,   638,  1168,  1440,
     639,  1139,  1139,  1139,  1141,   174,   357,   563,   579,  1145,
      12,    18,  1141,  1148,  1142,  1142,   631,  1149,  1142,  1142,
    1142,  1142,   262,  1142,  1142,   234,  1142,   234,  1142,  1142,
    1142,  1142,  1142,    31,   238,   262,   425,  1440,  1149,  1139,
    1155,  1438,   639,  1430,  1291,   633,  1293,   153,   633,  1284,
    1280,   638,   654,   655,   274,   274,   274,   274,    48,   274,
     274,   633,  1372,   110,   550,   553,   730,   740,  1166,  1420,
    1426,  1440,   633,   155,   402,  1495,   457,   457,   538,   543,
     586,   601,   370,  1499,   537,   364,  1501,    64,   487,  1498,
     104,   601,  1500,   364,   633,  1438,   179,   348,  1438,  1482,
    1483,  1302,  1435,  1107,   269,  1398,  1234,   633,  1284,    70,
     631,   862,   863,   862,   863,   386,   865,   206,   250,  1440,
      29,   557,  1388,   633,   557,   633,   557,  1284,  1303,  1299,
     385,  1197,  1198,    12,  1384,  1382,   633,   155,  1495,   364,
     364,  1438,    12,   135,  1535,   633,  1126,  1139,  1424,  1438,
    1438,    68,   965,  1139,  1441,   363,   388,   546,  1470,   244,
     416,  1465,  1466,  1467,  1468,   199,   269,   474,  1460,  1313,
    1438,   559,  1450,  1461,  1464,   633,  1452,  1463,   238,  1359,
    1435,  1139,   626,   907,   692,   692,   692,  1430,   692,  1430,
     274,   336,   518,  1353,  1353,   277,   358,   568,  1255,  1256,
    1418,  1438,  1361,  1438,   692,  1361,  1441,  1356,   692,  1361,
     241,   535,   176,   186,  1347,   633,  1359,  1356,  1430,  1358,
    1356,  1356,  1361,  1361,   582,  1073,  1072,   490,  1064,   469,
     631,   635,  1184,  1185,  1186,  1187,  1188,  1199,  1200,  1214,
    1417,   389,  1589,   373,  1248,  1254,  1534,   903,    68,   958,
     131,  1440,    74,    88,   252,   329,   354,   414,   509,   695,
     697,   421,   572,   825,   826,   227,   821,   822,   823,   830,
     838,   839,   103,   211,   379,   388,   395,   491,   586,   676,
     677,  1435,    24,   309,   815,   816,   817,   830,   831,   832,
     838,   839,   808,   809,   815,  1441,   169,     6,    11,    13,
      15,    25,    26,    56,    60,    61,    66,    74,    82,    91,
     106,   124,   132,   133,   139,   147,   153,   164,   184,   223,
     225,   232,   249,   272,   308,   326,   330,   368,   373,   380,
     385,   388,   419,   433,   434,   435,   436,   459,   515,   516,
     517,   522,   538,   541,   564,   577,   849,   909,   911,   913,
     914,  1030,  1034,  1036,  1039,  1045,  1046,  1047,  1052,  1053,
    1244,   364,   686,  1026,   122,   237,  1430,   120,  1105,  1438,
    1103,  1430,   851,  1114,   225,   250,   992,  1116,   632,   633,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   633,  1285,   584,  1089,   901,   902,
      74,   349,   422,   573,   818,   819,   820,   830,   834,   835,
     836,   837,   838,   839,   613,   588,   803,    46,   609,  1508,
     192,   692,   692,   907,   692,  1438,   666,   566,   589,  1006,
     364,   364,   364,   633,  1335,  1197,   639,  1338,  1337,   189,
     626,  1438,   633,   632,  1174,   632,  1175,   632,   632,   632,
    1139,   145,   606,  1182,    19,   632,   589,   632,   632,   632,
     633,   589,   633,  1163,   632,   626,   632,   633,   633,   632,
     632,   632,   632,   189,   633,   632,   633,  1165,   632,   633,
     633,   633,   625,   633,   632,   632,   631,  1426,  1438,  1174,
     632,   632,   632,  1174,   632,   633,   632,   632,   632,   632,
     632,   632,   633,   632,   238,   632,   633,   633,   632,   633,
     633,   632,   632,   632,   633,   189,   633,  1174,   632,   632,
     633,   633,   633,   632,   189,  1139,   189,  1139,   189,  1139,
     189,   632,   633,   632,   632,   632,   632,   633,    19,   260,
     633,   982,   632,  1178,  1204,  1205,  1206,   469,   631,  1121,
    1531,  1532,   577,  1541,   636,  1460,   478,  1438,   174,   357,
     563,   579,   631,    17,  1139,  1539,   160,  1240,  1142,  1139,
    1139,  1142,   631,  1149,  1142,  1135,  1159,  1160,  1161,   631,
     639,  1438,  1281,  1293,  1313,  1314,  1441,    50,   446,  1056,
    1284,  1440,   633,  1377,  1284,  1378,   738,   741,   742,   737,
     359,   461,   739,   537,   631,  1509,  1441,  1509,  1509,  1509,
     192,   403,   540,  1493,  1497,   155,   179,   193,   204,   253,
     254,   281,   348,   400,  1484,  1486,   607,  1236,  1296,  1108,
    1109,  1110,  1111,  1430,   226,   280,   416,   614,  1477,  1476,
     631,  1135,   117,   181,   209,   277,   358,   568,  1259,  1262,
    1263,   529,   866,   856,    11,   858,  1139,  1435,  1441,  1441,
    1098,  1430,   171,   412,   587,  1080,  1081,  1082,   469,   477,
     593,   594,   631,   897,  1304,  1307,   631,   731,   730,   633,
    1441,   192,   403,  1493,  1529,  1134,   189,   235,  1127,  1128,
    1247,  1248,  1272,  1136,  1136,   639,   120,   964,   966,  1440,
    1313,   631,   631,   260,   366,   614,   633,   633,   639,   639,
     639,  1464,  1139,  1465,  1451,  1313,  1453,  1454,    12,    33,
     120,   364,  1139,  1471,  1435,   189,  1360,   632,  1438,   362,
     633,  1361,   411,  1252,  1346,  1360,  1361,  1356,  1430,  1361,
    1361,   500,   501,   502,   664,  1074,   586,  1065,  1066,  1213,
    1438,    95,   228,   247,   258,   341,   453,   523,  1196,   477,
     633,  1430,  1213,   633,   186,  1590,    46,  1252,  1314,  1314,
     339,  1435,   509,   509,   509,   509,   509,   468,  1435,  1435,
    1314,   633,   823,  1435,  1435,  1435,  1435,   117,   181,   209,
     277,   358,   568,  1258,  1435,  1435,   632,   633,  1314,  1314,
     633,   817,   810,   811,   830,   831,   832,   388,    71,    84,
     385,   925,   928,   929,   990,   992,   996,   997,  1054,  1314,
    1054,   385,  1314,  1314,  1054,  1314,   385,   385,  1314,  1314,
     557,   131,  1314,   248,   538,   185,   385,   401,   992,  1054,
     248,  1314,   385,   538,   131,  1314,  1314,  1314,  1314,  1314,
    1054,   385,    46,  1314,   851,  1314,   385,   387,    19,   155,
     557,  1058,   385,   385,  1314,  1314,  1314,  1314,   134,   318,
    1438,  1314,   385,  1314,   909,   633,   848,   849,  1034,   631,
     639,   924,   930,  1429,  1438,    78,   464,   434,  1027,  1556,
    1113,   631,  1139,   631,  1258,  1434,  1435,  1258,  1258,  1434,
    1434,   117,   181,   277,   358,   568,  1260,  1434,  1258,  1258,
    1434,  1434,  1434,  1434,  1434,  1434,  1434,  1258,  1258,  1434,
    1421,  1434,  1258,   661,  1314,  1314,  1314,  1314,   633,   820,
    1440,   273,   172,   812,   813,   814,   830,   831,   832,   833,
     836,   837,   838,   839,   388,   546,  1440,  1438,  1579,     8,
      29,   798,   692,   631,   449,   262,   631,   841,   908,   910,
     911,    45,   206,   462,  1011,  1011,  1430,  1430,  1430,  1288,
    1438,   589,  1333,  1438,  1185,   639,  1338,   234,  1139,   632,
    1139,   549,  1139,  1139,   149,    33,    59,   107,   110,   118,
     343,   485,   553,   581,  1176,   959,  1139,   959,  1176,  1178,
     632,   234,   234,  1139,  1139,  1139,  1178,  1139,  1139,  1139,
    1139,  1139,  1142,   632,   632,  1139,  1139,  1139,  1139,  1139,
    1139,  1178,   234,  1139,  1139,  1139,   632,  1139,  1139,  1139,
    1139,   189,  1139,   189,  1139,   189,  1139,  1139,  1139,    33,
      59,   977,   978,   979,   980,   981,  1259,  1258,   632,   632,
    1542,  1543,  1544,  1205,  1121,   632,  1535,  1440,  1139,  1539,
    1141,   632,   633,   632,  1149,  1230,  1230,    17,  1139,  1539,
    1240,  1139,   632,   633,  1177,  1178,  1438,  1282,   915,  1440,
    1056,   655,  1373,   155,   633,  1438,  1510,  1511,   557,   626,
    1430,  1438,  1505,  1505,  1505,  1485,  1237,  1253,  1254,  1304,
     633,  1112,  1114,   546,  1437,   614,   269,   859,   860,   861,
    1438,   871,  1142,    46,   631,   873,   863,   155,   631,   557,
    1081,   898,  1305,   631,  1310,  1315,  1310,   632,   897,  1306,
    1423,  1424,  1427,  1438,  1308,  1229,  1438,   155,   200,   189,
    1505,  1505,  1505,  1119,   140,  1185,  1273,   186,   272,  1132,
    1272,  1253,  1128,    19,  1137,  1435,  1438,   626,  1438,  1470,
     546,   546,   416,   437,   472,  1469,  1467,  1466,  1313,  1452,
    1471,   633,  1456,  1458,  1462,  1260,  1351,   158,   603,  1256,
    1256,   358,  1352,  1236,  1356,   155,   155,   633,   155,   388,
    1067,  1201,  1208,  1213,  1184,   247,   247,   376,  1215,   247,
     258,   453,  1215,  1199,  1184,  1325,  1326,  1427,  1186,  1197,
    1210,  1211,  1258,   322,  1249,   966,   960,   106,   106,   122,
     237,   277,   358,   568,   840,  1261,  1262,  1433,   823,   677,
     840,   840,   817,   633,   811,   169,  1014,  1429,  1093,    61,
     185,   401,   578,   927,   991,  1014,   992,   993,   993,   120,
    1438,  1429,  1093,  1260,  1258,  1429,  1258,    12,  1035,  1043,
    1044,  1438,  1093,  1435,  1435,   958,  1314,  1258,   250,  1043,
     250,  1429,  1429,   915,  1044,  1314,   179,   253,   354,   918,
    1258,   120,  1438,  1260,  1260,  1429,  1093,  1245,  1246,  1427,
     120,  1258,   850,  1435,  1093,   851,  1430,  1093,  1093,    77,
      79,   120,   143,   180,   423,   917,   120,  1258,   120,  1258,
     120,  1258,  1258,  1035,   912,     6,   139,  1047,   921,   922,
     923,   924,   925,  1438,     8,   179,  1057,   424,   926,   927,
     984,   931,   639,   352,   399,    23,   163,   680,   557,   132,
     147,   682,   631,  1557,   631,   401,  1226,  1227,  1228,  1438,
     662,   663,  1258,  1435,  1259,   840,   840,   820,   369,   202,
    1314,   633,   814,   546,    19,   449,   631,   125,   231,   583,
     799,   679,  1573,   118,   236,   418,   524,   920,  1430,   262,
     842,   847,   848,   921,   847,   633,   910,   667,   669,   671,
     639,  1185,  1236,  1338,  1236,  1139,   632,  1139,   549,   631,
     949,   950,   950,   631,   944,   631,   942,   943,   949,   950,
     236,   944,   236,   632,   632,   632,   632,   632,  1164,  1139,
    1139,   632,   632,   633,   632,   373,  1171,   633,   633,   632,
     633,   632,   238,  1156,  1157,   632,   632,   632,   632,   633,
     632,   632,  1139,   632,   186,   632,   632,   633,   632,   633,
     633,   632,  1139,   632,  1139,   632,  1139,   632,   632,   632,
     631,   972,   972,    20,   126,   451,   624,   974,   975,   976,
     633,   633,  1133,  1544,   632,  1538,   639,  1015,   632,  1178,
    1141,   632,   633,   632,  1136,  1161,   632,  1051,  1052,  1053,
     186,   609,  1374,    54,    63,    73,    85,    86,    87,   101,
     320,   337,   448,   465,   525,   542,   743,   742,   632,   633,
    1507,   639,   639,   557,   557,   557,   631,  1139,   364,  1320,
    1110,  1430,  1114,   221,  1117,  1394,   632,   633,  1136,   857,
     385,   874,   875,  1259,   859,  1441,  1129,  1311,  1312,  1427,
    1316,   633,   631,  1307,   632,   632,   633,   639,  1527,   632,
     633,   730,   370,  1507,   189,   189,   189,  1236,  1236,   141,
     377,  1268,  1269,  1274,   583,   238,  1435,  1438,   639,   632,
     632,    75,   569,   416,  1471,  1455,  1457,  1252,  1252,  1361,
    1435,  1435,   664,  1435,   155,   121,  1068,   577,   632,  1531,
    1209,   636,   247,  1199,  1215,  1215,   247,   364,   364,   589,
     633,  1324,  1313,  1234,  1129,  1139,  1250,  1425,   811,  1037,
     631,   250,   250,   993,  1014,   999,  1014,  1014,   139,   477,
    1035,  1048,  1032,   633,  1259,   960,  1435,  1429,  1056,   609,
    1435,  1049,  1035,   633,    20,   126,  1251,   854,  1035,  1040,
    1035,   631,   632,   633,  1438,  1430,    32,    33,    38,    40,
      42,    43,    59,   107,   110,   118,   137,   154,   180,   182,
     195,   196,   236,   266,   275,   276,   278,   314,   315,   316,
     333,   334,   335,   340,   343,   360,   361,   393,   394,   418,
     473,   477,   489,   547,   550,   553,   554,   555,   556,   595,
     596,   620,   932,   935,   936,   937,   938,   939,   940,   941,
    1438,   399,  1139,  1139,   364,   686,   692,   364,    74,   687,
    1438,  1558,    19,  1035,   632,   633,   632,   633,   631,  1438,
     840,   814,  1435,   920,  1580,   364,   364,   703,   704,   706,
    1438,   492,  1430,   897,   632,   221,   439,   844,  1400,   910,
     631,   631,   631,  1438,  1236,  1247,  1230,  1139,   117,   277,
     358,   568,    21,    33,    47,   575,   958,   968,   969,   970,
     358,   358,   632,  1230,  1230,  1139,    46,   471,  1170,  1139,
    1139,  1178,    42,   341,   632,   609,  1158,  1139,  1230,  1139,
    1139,  1139,  1139,   632,   632,   632,  1259,   632,   982,   977,
     975,   977,   978,  1258,  1207,  1536,  1438,   632,  1178,  1137,
    1053,  1052,  1375,   416,  1511,   609,  1514,   626,   626,  1507,
    1507,  1507,   120,  1139,  1318,  1319,   142,  1117,   256,  1400,
     861,   632,   206,   250,   876,   632,   633,   632,  1133,   633,
    1313,  1317,  1318,  1315,  1309,  1307,  1423,  1438,   851,  1438,
     189,  1507,  1507,  1507,  1253,   202,  1241,  1437,  1437,   638,
    1270,  1271,  1440,   479,   626,  1456,  1461,  1435,   155,   390,
    1069,  1535,  1234,  1187,  1184,  1199,   247,   247,  1184,  1199,
    1190,  1189,  1191,  1326,  1236,  1319,  1224,  1225,  1133,   633,
    1251,   386,   631,  1038,  1139,  1014,   999,   631,   998,   998,
     120,   120,   930,  1088,  1044,   965,   540,   932,  1031,  1246,
    1041,  1043,  1033,  1378,   923,   631,   985,   949,   949,   950,
     944,   942,   397,   933,   942,   942,   970,    59,   595,   936,
     938,   970,   970,    59,   596,   596,   599,   942,   934,   950,
     944,   944,   970,   949,   950,    25,    68,    72,    74,   120,
     357,   364,   401,   473,   522,   578,   952,   953,   954,   983,
    1145,   599,   949,   970,    33,   949,   971,   949,   949,   950,
     631,   943,   951,   639,  1230,   487,  1435,   138,  1028,   632,
     633,  1559,  1560,   632,  1227,   663,   676,   492,   229,   238,
     378,   707,   708,   709,   710,  1135,   464,   632,   633,   705,
    1435,   632,   632,   908,    19,   900,  1012,  1013,  1438,  1012,
    1012,   263,  1257,   632,   632,   632,   632,   632,    33,    21,
     575,   958,    33,   959,   632,   633,   632,   632,   632,  1172,
    1417,   632,   632,   633,   632,   328,   252,   411,   632,   632,
     632,   632,   632,   632,   973,   632,   633,   919,  1128,  1253,
    1531,   632,   170,   272,   200,   441,  1512,  1512,  1512,   632,
     633,  1321,   235,   631,   864,   858,   877,  1438,   875,   899,
    1312,  1319,   632,  1530,  1507,    46,   207,  1238,  1275,  1440,
     633,   328,  1435,   155,  1202,   364,  1193,  1199,  1199,   364,
    1195,  1139,  1139,   631,  1247,  1222,  1223,  1212,  1425,  1259,
     874,   632,   631,   631,  1012,   631,   631,   110,   550,   553,
     624,   625,  1419,  1420,  1057,  1430,   952,  1093,  1042,  1080,
     632,   986,  1438,   305,   987,   485,   581,   621,   946,   947,
     948,   631,   946,   946,   970,   599,   946,   631,   970,   946,
     964,   120,   143,   180,  1435,   956,   957,  1419,   583,   120,
     120,   134,   318,   250,   954,   250,   357,   970,   971,   970,
     971,   946,   358,   946,  1438,   681,   688,   689,  1438,   469,
     631,  1561,  1564,   632,  1435,   632,   633,   705,  1568,   680,
    1574,   706,   932,   955,   843,   847,   631,   897,   632,   633,
    1251,   631,   632,   632,  1256,   959,   971,   358,  1173,  1425,
    1139,   328,   168,   632,  1258,  1132,  1132,   370,    62,   245,
     350,   511,   527,   615,  1503,  1504,   609,  1513,  1513,  1513,
    1319,   250,   540,  1135,   867,   631,   593,   878,   919,  1242,
    1425,  1239,  1247,   958,   961,  1271,  1435,  1536,  1192,   589,
    1194,   589,  1229,  1257,   184,   221,   588,  1217,  1218,  1221,
     919,  1251,   632,  1012,  1012,   632,  1012,  1012,  1421,  1421,
     851,  1050,   235,   632,   633,   190,   384,   486,   364,   988,
     948,  1016,  1417,  1016,   956,   594,   513,   683,    52,    65,
     177,   220,   246,   257,   367,   450,   690,   748,   750,   751,
     752,   754,   755,   756,   757,   758,   759,   761,   769,   770,
     773,   784,   787,   789,   790,  1433,  1439,  1443,  1565,   631,
    1563,  1564,   609,  1566,  1562,  1581,   709,  1438,  1430,   685,
     686,   449,   965,  1530,   844,   897,   845,    74,   249,  1000,
    1003,  1006,  1007,  1008,  1013,   358,   609,  1001,  1005,  1007,
    1010,  1002,  1004,  1007,  1009,   632,   633,  1251,   632,   632,
     546,   546,   546,    17,  1502,   200,   306,   307,   311,   312,
    1515,  1516,   583,  1430,   871,   528,   872,   869,   870,  1438,
     238,   259,    74,   106,   225,   308,   326,   349,   538,   894,
     895,   896,  1355,   610,   611,   633,  1243,  1251,  1139,  1253,
     960,  1276,  1203,  1139,   631,  1139,   631,   632,   992,   992,
    1218,   632,   632,  1000,   632,   632,  1057,   631,  1438,   125,
     583,   632,   633,   632,  1139,   150,   684,   771,   774,  1438,
     189,   348,   762,   749,  1439,  1439,  1438,   753,   646,   279,
     438,   608,   793,    30,   791,   640,  1124,  1563,   632,    51,
      61,   269,  1527,   694,   955,   186,   682,  1575,   632,  1527,
    1435,  1314,   668,  1008,  1251,   632,   383,   670,  1010,   672,
    1009,  1425,  1503,   370,  1258,  1258,  1258,  1258,  1516,  1327,
    1328,  1427,  1197,  1136,  1259,   632,   633,   880,   548,  1314,
     131,   131,  1314,  1314,  1314,  1314,   631,   889,   896,   153,
    1425,   403,  1264,    70,  1401,  1531,  1229,  1229,   186,  1216,
    1216,   984,  1000,  1001,  1002,   874,    50,   354,   446,   477,
     989,   989,   970,  1417,   970,  1139,  1139,   606,   776,   780,
     189,  1438,   764,   765,  1139,   712,   747,   748,   750,   752,
     754,   756,   757,   758,   759,   761,   769,   784,   787,   789,
     712,   794,   792,   785,   788,   632,  1530,    61,   370,    61,
     129,   695,   696,  1145,  1582,  1135,   687,   955,   846,  1258,
    1051,  1433,  1051,  1051,  1251,   633,  1313,  1395,   632,   868,
     870,   631,   882,   884,   879,  1435,  1314,  1314,  1261,  1261,
    1259,  1440,   529,   890,   891,  1314,  1251,    14,   148,   159,
     371,   545,  1402,  1403,   265,  1404,   632,   632,   202,   247,
     373,  1220,  1219,   632,     5,   120,   357,   364,   364,   772,
     781,   145,   780,   783,   235,   149,  1139,   149,   747,   637,
     582,  1139,   713,   793,   791,   370,   370,   129,   747,  1569,
     138,  1576,  1530,  1328,  1319,   961,   872,   631,   883,   884,
     885,   313,   881,   884,  1435,  1435,   892,   632,   633,   915,
    1265,    46,    46,   148,    46,  1403,   512,   545,  1405,  1406,
      46,    46,   631,   631,   583,   125,   606,   775,   777,  1139,
     712,   149,   760,   220,   766,   279,   637,   796,   795,   119,
     711,   714,   786,  1439,   786,   144,   688,   694,  1396,   632,
     633,   313,   887,   888,  1142,   893,  1440,   891,   631,  1417,
    1417,    46,  1417,    46,    46,  1406,  1226,  1228,   989,   989,
     778,   777,   783,   782,    52,   763,  1438,   549,  1139,   138,
      90,   167,   718,   744,  1438,   149,   747,   637,   460,  1577,
     458,  1407,   884,   633,   886,   894,   358,  1266,  1267,  1417,
    1417,  1417,   632,   632,  1139,   149,   549,   633,   712,   797,
     712,   205,   633,   715,    81,   100,   637,  1570,   747,   218,
    1401,   888,   632,   632,   633,   779,    52,   712,  1438,   767,
     149,   149,   186,  1438,   955,   186,   186,   747,    46,  1404,
    1267,   549,   145,   146,   768,   438,   608,   716,   120,   745,
     721,   722,  1258,   717,  1417,   221,  1408,   712,   712,   764,
     497,   499,   719,   720,   721,   724,  1145,  1438,   746,  1118,
     358,   631,  1410,   633,   747,   188,  1139,   265,   458,  1409,
     632,   638,  1411,  1412,  1427,   477,  1413,   720,  1440,   632,
     633,  1414,  1415,  1427,  1412,   633,  1313,  1415,  1135,  1319,
    1136
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1971 ""
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1983 ""
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 2008 ""
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:
#line 2082 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:
#line 2097 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 66:
#line 2117 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:
#line 2124 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:
#line 2134 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:
#line 2141 ""
    {}
    break;

  case 74:
#line 2156 ""
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:
#line 2168 ""
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:
#line 2176 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:
#line 2187 ""
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:
#line 2200 ""
    {}
    break;

  case 81:
#line 2210 ""
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
#line 2214 ""
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 2218 ""
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:
#line 2222 ""
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 85:
#line 2227 ""
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:
#line 2231 ""
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:
#line 2235 ""
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:
#line 2240 ""
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:
#line 2253 ""
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:
#line 2258 ""
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 2262 ""
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
#line 2266 ""
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:
#line 2270 ""
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 2274 ""
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:
#line 2278 ""
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:
#line 2283 ""
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:
#line 2287 ""
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:
#line 2292 ""
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:
#line 2323 ""
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:
#line 2328 ""
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:
#line 2345 ""
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:
#line 2359 ""
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:
#line 2363 ""
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:
#line 2379 ""
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:
#line 2383 ""
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:
#line 2395 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:
#line 2421 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:
#line 2440 ""
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:
#line 2445 ""
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:
#line 2449 ""
    { }
    break;

  case 115:
#line 2452 ""
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:
#line 2457 ""
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:
#line 2461 ""
    { }
    break;

  case 118:
#line 2464 ""
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:
#line 2469 ""
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 120:
#line 2473 ""
    { }
    break;

  case 121:
#line 2475 ""
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:
#line 2480 ""
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:
#line 2487 ""
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:
#line 2493 ""
    {}
    break;

  case 125:
#line 2495 ""
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:
#line 2499 ""
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:
#line 2503 ""
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:
#line 2507 ""
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:
#line 2518 ""
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 132:
#line 2532 ""
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:
#line 2536 ""
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:
#line 2540 ""
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:
#line 2544 ""
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:
#line 2548 ""
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 137:
#line 2553 ""
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:
#line 2557 ""
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 139:
#line 2564 ""
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 140:
#line 2584 ""
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 141:
#line 2595 ""
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 143:
#line 2602 ""
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:
#line 2608 ""
    { (yyval.num)= 0; }
    break;

  case 145:
#line 2610 ""
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:
#line 2616 ""
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 147:
#line 2622 ""
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 148:
#line 2631 ""
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 149:
#line 2638 ""
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 151:
#line 2646 ""
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:
#line 2652 ""
    { (yyval.num)= 0; }
    break;

  case 154:
#line 2658 ""
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 155:
#line 2664 ""
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 156:
#line 2672 ""
    { (yyval.num)= 0; }
    break;

  case 157:
#line 2674 ""
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 158:
#line 2681 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 159:
#line 2724 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 173:
#line 2753 ""
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 174:
#line 2768 ""
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 175:
#line 2782 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 176:
#line 2800 ""
    {}
    break;

  case 177:
#line 2801 ""
    {}
    break;

  case 178:
#line 2805 ""
    {}
    break;

  case 179:
#line 2806 ""
    {}
    break;

  case 180:
#line 2812 ""
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 181:
#line 2814 ""
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 182:
#line 2816 ""
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 183:
#line 2818 ""
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 184:
#line 2820 ""
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 185:
#line 2822 ""
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 186:
#line 2824 ""
    {}
    break;

  case 187:
#line 2829 ""
    { }
    break;

  case 188:
#line 2830 ""
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 189:
#line 2831 ""
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 190:
#line 2836 ""
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 191:
#line 2840 ""
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 192:
#line 2847 ""
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 193:
#line 2855 ""
    {}
    break;

  case 198:
#line 2871 ""
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 199:
#line 2875 ""
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 204:
#line 2893 ""
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 205:
#line 2913 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 210:
#line 2954 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:
#line 2982 ""
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 212:
#line 2983 ""
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 213:
#line 2984 ""
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 214:
#line 2985 ""
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 215:
#line 2989 ""
    {}
    break;

  case 217:
#line 2994 ""
    {}
    break;

  case 219:
#line 3000 ""
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:
#line 3004 ""
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 221:
#line 3030 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 222:
#line 3041 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:
#line 3114 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 224:
#line 3130 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 225:
#line 3170 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 226:
#line 3204 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 227:
#line 3213 ""
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 228:
#line 3276 ""
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 229:
#line 3277 ""
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 230:
#line 3283 ""
    { (yyval.num)= 1; }
    break;

  case 231:
#line 3285 ""
    { (yyval.num)+= 1; }
    break;

  case 232:
#line 3290 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 233:
#line 3313 ""
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:
#line 3328 ""
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:
#line 3349 ""
    {}
    break;

  case 237:
#line 3350 ""
    {}
    break;

  case 238:
#line 3355 ""
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 239:
#line 3359 ""
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 240:
#line 3372 ""
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 241:
#line 3378 ""
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:
#line 3384 ""
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:
#line 3393 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 244:
#line 3408 ""
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 245:
#line 3434 ""
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 246:
#line 3439 ""
    { (yyval.spcondvalue)= NULL; }
    break;

  case 247:
#line 3441 ""
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 248:
#line 3446 ""
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 250:
#line 3454 ""
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 251:
#line 3463 ""
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 252:
#line 3482 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:
#line 3484 ""
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 254:
#line 3502 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 255:
#line 3508 ""
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 256:
#line 3510 ""
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 257:
#line 3512 ""
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 258:
#line 3514 ""
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 259:
#line 3516 ""
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 260:
#line 3518 ""
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 261:
#line 3520 ""
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 262:
#line 3522 ""
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 263:
#line 3524 ""
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 264:
#line 3526 ""
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 265:
#line 3528 ""
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 266:
#line 3530 ""
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 267:
#line 3535 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 268:
#line 3551 ""
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:
#line 3566 ""
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 270:
#line 3568 ""
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 271:
#line 3573 ""
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 272:
#line 3579 ""
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 273:
#line 3588 ""
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 274:
#line 3594 ""
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 275:
#line 3603 ""
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:
#line 3611 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 277:
#line 3640 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:
#line 3649 ""
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 279:
#line 3651 ""
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 280:
#line 3660 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 281:
#line 3665 ""
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 282:
#line 3671 ""
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 283:
#line 3680 ""
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:
#line 3688 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 285:
#line 3690 ""
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 286:
#line 3692 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 287:
#line 3694 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 288:
#line 3696 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 289:
#line 3698 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 290:
#line 3700 ""
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 291:
#line 3702 ""
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 292:
#line 3704 ""
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 293:
#line 3706 ""
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 294:
#line 3708 ""
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 295:
#line 3710 ""
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 296:
#line 3712 ""
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 297:
#line 3717 ""
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 298:
#line 3737 ""
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 299:
#line 3760 ""
    { (yyval.item) = NULL; }
    break;

  case 300:
#line 3762 ""
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 301:
#line 3764 ""
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 315:
#line 3785 ""
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 316:
#line 3787 ""
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 317:
#line 3795 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 318:
#line 3805 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 319:
#line 3852 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 320:
#line 3862 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 321:
#line 3908 ""
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 322:
#line 3919 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 323:
#line 3931 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 324:
#line 3990 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 325:
#line 4040 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 326:
#line 4064 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 327:
#line 4085 ""
    {}
    break;

  case 328:
#line 4090 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 332:
#line 4120 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 333:
#line 4138 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 334:
#line 4158 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 335:
#line 4167 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 336:
#line 4203 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 337:
#line 4222 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 343:
#line 4245 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 344:
#line 4256 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 345:
#line 4300 ""
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 346:
#line 4307 ""
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 347:
#line 4314 ""
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 352:
#line 4331 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 353:
#line 4340 ""
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 354:
#line 4381 ""
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 355:
#line 4389 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 356:
#line 4398 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 357:
#line 4434 ""
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 358:
#line 4442 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 360:
#line 4460 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 361:
#line 4478 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 362:
#line 4497 ""
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 363:
#line 4498 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 364:
#line 4503 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 365:
#line 4519 ""
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 366:
#line 4536 ""
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 367:
#line 4547 ""
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 368:
#line 4555 ""
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 369:
#line 4570 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 370:
#line 4606 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 371:
#line 4621 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 372:
#line 4630 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 373:
#line 4668 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 374:
#line 4684 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 375:
#line 4693 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 377:
#line 4734 ""
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 378:
#line 4736 ""
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 379:
#line 4741 ""
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 380:
#line 4743 ""
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 381:
#line 4745 ""
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 385:
#line 4779 ""
    {}
    break;

  case 386:
#line 4781 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 387:
#line 4791 ""
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 388:
#line 4797 ""
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 393:
#line 4820 ""
    {}
    break;

  case 444:
#line 4918 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 445:
#line 4926 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:
#line 4934 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:
#line 4942 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 448:
#line 4954 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:
#line 4966 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 450:
#line 4971 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 451:
#line 4976 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 452:
#line 4984 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 453:
#line 4992 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:
#line 5000 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:
#line 5008 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:
#line 5016 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:
#line 5024 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:
#line 5032 ""
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 459:
#line 5045 ""
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 460:
#line 5058 ""
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 461:
#line 5072 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 462:
#line 5077 ""
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 463:
#line 5089 ""
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 464:
#line 5091 ""
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 465:
#line 5141 ""
    {}
    break;

  case 466:
#line 5144 ""
    {}
    break;

  case 467:
#line 5146 ""
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 468:
#line 5161 ""
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 469:
#line 5180 ""
    {}
    break;

  case 470:
#line 5183 ""
    { Select->set_braces(1);}
    break;

  case 471:
#line 5184 ""
    {}
    break;

  case 472:
#line 5188 ""
    {}
    break;

  case 473:
#line 5190 ""
    { Select->set_braces(0);}
    break;

  case 474:
#line 5191 ""
    {}
    break;

  case 475:
#line 5193 ""
    { Select->set_braces(1);}
    break;

  case 476:
#line 5194 ""
    {}
    break;

  case 477:
#line 5199 ""
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 478:
#line 5235 ""
    {}
    break;

  case 480:
#line 5241 ""
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 482:
#line 5259 ""
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 483:
#line 5278 ""
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 484:
#line 5290 ""
    {}
    break;

  case 486:
#line 5299 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 487:
#line 5306 ""
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 488:
#line 5307 ""
    {}
    break;

  case 489:
#line 5309 ""
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 490:
#line 5311 ""
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 491:
#line 5313 ""
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 492:
#line 5315 ""
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 493:
#line 5319 ""
    {}
    break;

  case 494:
#line 5321 ""
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 495:
#line 5326 ""
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 496:
#line 5328 ""
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 497:
#line 5344 ""
    {}
    break;

  case 498:
#line 5345 ""
    {}
    break;

  case 499:
#line 5349 ""
    {}
    break;

  case 500:
#line 5350 ""
    {}
    break;

  case 501:
#line 5355 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:
#line 5374 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 503:
#line 5384 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 504:
#line 5395 ""
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 505:
#line 5403 ""
    {}
    break;

  case 506:
#line 5405 ""
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 507:
#line 5420 ""
    {}
    break;

  case 508:
#line 5422 ""
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 509:
#line 5423 ""
    {}
    break;

  case 510:
#line 5426 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 511:
#line 5431 ""
    {}
    break;

  case 512:
#line 5435 ""
    {}
    break;

  case 513:
#line 5436 ""
    {}
    break;

  case 514:
#line 5441 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 515:
#line 5459 ""
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 516:
#line 5474 ""
    {}
    break;

  case 517:
#line 5476 ""
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 518:
#line 5491 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 519:
#line 5507 ""
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 520:
#line 5528 ""
    {}
    break;

  case 521:
#line 5529 ""
    {}
    break;

  case 522:
#line 5534 ""
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 523:
#line 5553 ""
    {}
    break;

  case 524:
#line 5558 ""
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 525:
#line 5567 ""
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 526:
#line 5589 ""
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 527:
#line 5604 ""
    {}
    break;

  case 528:
#line 5606 ""
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 529:
#line 5621 ""
    {}
    break;

  case 530:
#line 5626 ""
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 531:
#line 5647 ""
    {}
    break;

  case 532:
#line 5652 ""
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 533:
#line 5681 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 534:
#line 5692 ""
    {}
    break;

  case 535:
#line 5693 ""
    {}
    break;

  case 536:
#line 5698 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 537:
#line 5709 ""
    {}
    break;

  case 538:
#line 5711 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 539:
#line 5734 ""
    {}
    break;

  case 540:
#line 5735 ""
    {}
    break;

  case 541:
#line 5740 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:
#line 5753 ""
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:
#line 5773 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:
#line 5787 ""
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 545:
#line 5812 ""
    {}
    break;

  case 546:
#line 5813 ""
    {}
    break;

  case 547:
#line 5818 ""
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 548:
#line 5850 ""
    {}
    break;

  case 549:
#line 5855 ""
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 550:
#line 5859 ""
    {}
    break;

  case 551:
#line 5860 ""
    {}
    break;

  case 552:
#line 5864 ""
    {}
    break;

  case 553:
#line 5865 ""
    {}
    break;

  case 554:
#line 5870 ""
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 555:
#line 5872 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 556:
#line 5878 ""
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 557:
#line 5880 ""
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 558:
#line 5882 ""
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 559:
#line 5884 ""
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 560:
#line 5886 ""
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 561:
#line 5888 ""
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 562:
#line 5897 ""
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 563:
#line 5912 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 564:
#line 5916 ""
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 565:
#line 5926 ""
    {}
    break;

  case 566:
#line 5927 ""
    {}
    break;

  case 567:
#line 5931 ""
    {}
    break;

  case 568:
#line 5932 ""
    {}
    break;

  case 569:
#line 5936 ""
    {}
    break;

  case 570:
#line 5937 ""
    {}
    break;

  case 571:
#line 5941 ""
    {}
    break;

  case 572:
#line 5942 ""
    {}
    break;

  case 573:
#line 5946 ""
    { (yyval.num)= 0; }
    break;

  case 574:
#line 5947 ""
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 575:
#line 5951 ""
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 576:
#line 5952 ""
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 577:
#line 5956 ""
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 578:
#line 5960 ""
    { (yyval.num)= 0; }
    break;

  case 579:
#line 5961 ""
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 587:
#line 5982 ""
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 588:
#line 5987 ""
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 589:
#line 5992 ""
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 590:
#line 5997 ""
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 591:
#line 6002 ""
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 592:
#line 6007 ""
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 593:
#line 6012 ""
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 594:
#line 6017 ""
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 595:
#line 6032 ""
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 596:
#line 6038 ""
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 597:
#line 6053 ""
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 598:
#line 6058 ""
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 599:
#line 6073 ""
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 600:
#line 6079 ""
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 601:
#line 6097 ""
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 602:
#line 6102 ""
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 603:
#line 6107 ""
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 604:
#line 6112 ""
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 605:
#line 6117 ""
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 606:
#line 6122 ""
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 607:
#line 6126 ""
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 610:
#line 6150 ""
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 611:
#line 6155 ""
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 612:
#line 6160 ""
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 613:
#line 6165 ""
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 614:
#line 6167 ""
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 615:
#line 6169 ""
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 616:
#line 6171 ""
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 617:
#line 6177 ""
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 618:
#line 6185 ""
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 619:
#line 6203 ""
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 620:
#line 6220 ""
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 621:
#line 6246 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 622:
#line 6263 ""
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 623:
#line 6264 ""
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 624:
#line 6265 ""
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 625:
#line 6266 ""
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 626:
#line 6267 ""
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 627:
#line 6268 ""
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 628:
#line 6272 ""
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 629:
#line 6273 ""
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 630:
#line 6274 ""
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 631:
#line 6278 ""
    {}
    break;

  case 633:
#line 6283 ""
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 634:
#line 6284 ""
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 635:
#line 6285 ""
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 636:
#line 6286 ""
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 637:
#line 6292 ""
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 643:
#line 6310 ""
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 644:
#line 6317 ""
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 645:
#line 6323 ""
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 646:
#line 6329 ""
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 647:
#line 6335 ""
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 648:
#line 6340 ""
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 649:
#line 6359 ""
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 653:
#line 6374 ""
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 654:
#line 6375 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 655:
#line 6379 ""
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 656:
#line 6384 ""
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 657:
#line 6393 ""
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 658:
#line 6406 ""
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 659:
#line 6407 ""
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 660:
#line 6408 ""
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 661:
#line 6410 ""
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 662:
#line 6415 ""
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 663:
#line 6419 ""
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 664:
#line 6424 ""
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 665:
#line 6429 ""
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 666:
#line 6433 ""
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 667:
#line 6438 ""
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 668:
#line 6443 ""
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 669:
#line 6449 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 670:
#line 6454 ""
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 671:
#line 6460 ""
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 672:
#line 6464 ""
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 673:
#line 6469 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 674:
#line 6474 ""
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 675:
#line 6492 ""
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 676:
#line 6494 ""
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 677:
#line 6496 ""
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 678:
#line 6512 ""
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 679:
#line 6514 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 680:
#line 6519 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 681:
#line 6524 ""
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 682:
#line 6536 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 683:
#line 6541 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 684:
#line 6546 ""
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 685:
#line 6551 ""
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 686:
#line 6553 ""
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 687:
#line 6555 ""
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 688:
#line 6557 ""
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 689:
#line 6559 ""
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 690:
#line 6561 ""
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 691:
#line 6563 ""
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 692:
#line 6565 ""
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 693:
#line 6567 ""
    {Lex->interval_list.empty();}
    break;

  case 694:
#line 6569 ""
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 695:
#line 6571 ""
    { Lex->interval_list.empty();}
    break;

  case 696:
#line 6573 ""
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 697:
#line 6575 ""
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 698:
#line 6577 ""
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 699:
#line 6585 ""
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 700:
#line 6586 ""
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 701:
#line 6588 ""
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 702:
#line 6593 ""
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 703:
#line 6594 ""
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 704:
#line 6595 ""
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 705:
#line 6596 ""
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 706:
#line 6597 ""
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 707:
#line 6601 ""
    {}
    break;

  case 708:
#line 6605 ""
    {}
    break;

  case 709:
#line 6606 ""
    {}
    break;

  case 710:
#line 6610 ""
    {}
    break;

  case 711:
#line 6611 ""
    {}
    break;

  case 712:
#line 6615 ""
    {}
    break;

  case 713:
#line 6616 ""
    {}
    break;

  case 714:
#line 6617 ""
    {}
    break;

  case 715:
#line 6618 ""
    {}
    break;

  case 716:
#line 6619 ""
    {}
    break;

  case 717:
#line 6623 ""
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 718:
#line 6624 ""
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 719:
#line 6625 ""
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 720:
#line 6626 ""
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 721:
#line 6627 ""
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 722:
#line 6632 ""
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 723:
#line 6637 ""
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 724:
#line 6639 ""
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 725:
#line 6644 ""
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 726:
#line 6646 ""
    { Lex->dec= (char*)0; }
    break;

  case 727:
#line 6648 ""
    {}
    break;

  case 728:
#line 6653 ""
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 729:
#line 6662 ""
    { Lex->dec= (char *) 0; }
    break;

  case 730:
#line 6663 ""
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 731:
#line 6667 ""
    { (yyval.ulong_num)= 0; }
    break;

  case 732:
#line 6668 ""
    { (yyval.ulong_num)= 0; }
    break;

  case 733:
#line 6670 ""
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 734:
#line 6677 ""
    {}
    break;

  case 735:
#line 6678 ""
    {}
    break;

  case 736:
#line 6682 ""
    {}
    break;

  case 737:
#line 6683 ""
    {}
    break;

  case 738:
#line 6687 ""
    {}
    break;

  case 739:
#line 6688 ""
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 740:
#line 6689 ""
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 741:
#line 6693 ""
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 742:
#line 6694 ""
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 743:
#line 6695 ""
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 744:
#line 6696 ""
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 745:
#line 6699 ""
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 746:
#line 6700 ""
    { }
    break;

  case 747:
#line 6704 ""
    {}
    break;

  case 748:
#line 6705 ""
    {}
    break;

  case 749:
#line 6709 ""
    {}
    break;

  case 750:
#line 6710 ""
    {}
    break;

  case 751:
#line 6714 ""
    {}
    break;

  case 753:
#line 6719 ""
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 754:
#line 6720 ""
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 755:
#line 6721 ""
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 756:
#line 6722 ""
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 757:
#line 6723 ""
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 758:
#line 6725 ""
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 759:
#line 6731 ""
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 760:
#line 6737 ""
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 761:
#line 6743 ""
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 762:
#line 6748 ""
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 763:
#line 6750 ""
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 764:
#line 6763 ""
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 765:
#line 6769 ""
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 766:
#line 6775 ""
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 767:
#line 6781 ""
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 768:
#line 6786 ""
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 769:
#line 6791 ""
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 770:
#line 6800 ""
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 771:
#line 6821 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 773:
#line 6830 ""
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 774:
#line 6834 ""
    {}
    break;

  case 775:
#line 6835 ""
    {}
    break;

  case 776:
#line 6840 ""
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:
#line 6847 ""
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 778:
#line 6851 ""
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 779:
#line 6852 ""
    { (yyval.charset)=NULL; }
    break;

  case 780:
#line 6856 ""
    { (yyval.charset)= NULL; }
    break;

  case 781:
#line 6857 ""
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 782:
#line 6862 ""
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 783:
#line 6870 ""
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 784:
#line 6874 ""
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 785:
#line 6875 ""
    { (yyval.charset)=NULL; }
    break;

  case 786:
#line 6880 ""
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 787:
#line 6887 ""
    { (yyval.charset)=NULL; }
    break;

  case 788:
#line 6888 ""
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 789:
#line 6892 ""
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 790:
#line 6893 ""
    { (yyval.charset)=NULL; }
    break;

  case 791:
#line 6897 ""
    {}
    break;

  case 792:
#line 6898 ""
    {}
    break;

  case 793:
#line 6903 ""
    { Lex->charset= &my_charset_latin1; }
    break;

  case 794:
#line 6905 ""
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 795:
#line 6909 ""
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 796:
#line 6916 ""
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 797:
#line 6925 ""
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 798:
#line 6930 ""
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 799:
#line 6937 ""
    { Lex->charset=NULL; }
    break;

  case 802:
#line 6940 ""
    { Lex->charset=&my_charset_bin; }
    break;

  case 803:
#line 6941 ""
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 804:
#line 6943 ""
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 805:
#line 6948 ""
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 806:
#line 6955 ""
    { }
    break;

  case 807:
#line 6956 ""
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 808:
#line 6961 ""
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 809:
#line 6969 ""
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 810:
#line 6973 ""
    { (yyval.ulong_num)= 0; }
    break;

  case 811:
#line 6974 ""
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 812:
#line 6978 ""
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 813:
#line 6981 ""
    { (yyval.ulong_num)= 0; }
    break;

  case 814:
#line 6982 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 815:
#line 6983 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 816:
#line 6984 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 817:
#line 6989 ""
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 818:
#line 6997 ""
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 819:
#line 7003 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 820:
#line 7004 ""
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 821:
#line 7009 ""
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 822:
#line 7018 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 823:
#line 7019 ""
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 824:
#line 7023 ""
    { (yyval.ulong_num)= 0; }
    break;

  case 825:
#line 7024 ""
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 828:
#line 7038 ""
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 829:
#line 7045 ""
    { Lex->ref_list.empty(); }
    break;

  case 831:
#line 7051 ""
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 832:
#line 7058 ""
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 833:
#line 7070 ""
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 834:
#line 7072 ""
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 835:
#line 7074 ""
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 836:
#line 7076 ""
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 837:
#line 7081 ""
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 838:
#line 7087 ""
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 839:
#line 7093 ""
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 840:
#line 7100 ""
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 841:
#line 7107 ""
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 842:
#line 7115 ""
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 843:
#line 7116 ""
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 844:
#line 7117 ""
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 845:
#line 7118 ""
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 846:
#line 7119 ""
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 847:
#line 7123 ""
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 848:
#line 7127 ""
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 849:
#line 7128 ""
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 850:
#line 7132 ""
    {}
    break;

  case 851:
#line 7133 ""
    {}
    break;

  case 852:
#line 7137 ""
    {}
    break;

  case 854:
#line 7142 ""
    {}
    break;

  case 855:
#line 7143 ""
    {}
    break;

  case 856:
#line 7144 ""
    {}
    break;

  case 857:
#line 7148 ""
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 858:
#line 7149 ""
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 859:
#line 7153 ""
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 860:
#line 7158 ""
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 861:
#line 7170 ""
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 864:
#line 7187 ""
    {}
    break;

  case 866:
#line 7192 ""
    {}
    break;

  case 868:
#line 7197 ""
    {}
    break;

  case 876:
#line 7217 ""
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 877:
#line 7218 ""
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 878:
#line 7223 ""
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 879:
#line 7224 ""
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 884:
#line 7239 ""
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 885:
#line 7251 ""
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 886:
#line 7252 ""
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 887:
#line 7253 ""
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 888:
#line 7257 ""
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 889:
#line 7258 ""
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 890:
#line 7263 ""
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 891:
#line 7269 ""
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 892:
#line 7282 ""
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 893:
#line 7283 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 894:
#line 7287 ""
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 895:
#line 7288 ""
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 896:
#line 7292 ""
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 897:
#line 7293 ""
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 898:
#line 7301 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 899:
#line 7334 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 900:
#line 7346 ""
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 901:
#line 7351 ""
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 902:
#line 7360 ""
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 903:
#line 7371 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 904:
#line 7382 ""
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 905:
#line 7389 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 906:
#line 7400 ""
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 907:
#line 7407 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 908:
#line 7418 ""
    {}
    break;

  case 909:
#line 7425 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 910:
#line 7437 ""
    {}
    break;

  case 911:
#line 7439 ""
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 912:
#line 7459 ""
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 913:
#line 7472 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 914:
#line 7477 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 915:
#line 7482 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 916:
#line 7487 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 917:
#line 7492 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 918:
#line 7499 ""
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 919:
#line 7506 ""
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 920:
#line 7511 ""
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 921:
#line 7518 ""
    { (yyval.num)= 0;}
    break;

  case 922:
#line 7519 ""
    { (yyval.num)= 1; }
    break;

  case 923:
#line 7520 ""
    { (yyval.num)= 1; }
    break;

  case 924:
#line 7521 ""
    { (yyval.num)= 1; }
    break;

  case 925:
#line 7525 ""
    { (yyval.num)= 0;}
    break;

  case 926:
#line 7527 ""
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 927:
#line 7538 ""
    { (yyval.num)= 0;}
    break;

  case 928:
#line 7539 ""
    { (yyval.num)= 1; }
    break;

  case 929:
#line 7543 ""
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 930:
#line 7544 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 932:
#line 7550 ""
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 933:
#line 7558 ""
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 939:
#line 7580 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 940:
#line 7585 ""
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 941:
#line 7592 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 943:
#line 7606 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 944:
#line 7618 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 946:
#line 7631 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 948:
#line 7644 ""
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 949:
#line 7651 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:
#line 7664 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 952:
#line 7691 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 953:
#line 7698 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 955:
#line 7706 ""
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 956:
#line 7718 ""
    {}
    break;

  case 958:
#line 7724 ""
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 959:
#line 7729 ""
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 960:
#line 7736 ""
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 962:
#line 7751 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 963:
#line 7755 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 964:
#line 7759 ""
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 965:
#line 7766 ""
    {}
    break;

  case 966:
#line 7767 ""
    {}
    break;

  case 967:
#line 7772 ""
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 970:
#line 7792 ""
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 971:
#line 7801 ""
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 972:
#line 7805 ""
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 973:
#line 7810 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 974:
#line 7815 ""
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 975:
#line 7821 ""
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 976:
#line 7825 ""
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 977:
#line 7834 ""
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 978:
#line 7846 ""
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 979:
#line 7850 ""
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 980:
#line 7859 ""
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 981:
#line 7868 ""
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 982:
#line 7877 ""
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 983:
#line 7886 ""
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 984:
#line 7892 ""
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 985:
#line 7898 ""
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 986:
#line 7907 ""
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 987:
#line 7916 ""
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 988:
#line 7944 ""
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 989:
#line 7965 ""
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 990:
#line 7975 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 991:
#line 7979 ""
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 999:
#line 7996 ""
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1000:
#line 8001 ""
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1001:
#line 8012 ""
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1002:
#line 8017 ""
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1003:
#line 8027 ""
    {}
    break;

  case 1004:
#line 8028 ""
    {}
    break;

  case 1005:
#line 8032 ""
    { Lex->ignore= 0;}
    break;

  case 1006:
#line 8033 ""
    { Lex->ignore= 1;}
    break;

  case 1007:
#line 8037 ""
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1008:
#line 8038 ""
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1009:
#line 8039 ""
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1010:
#line 8043 ""
    {}
    break;

  case 1011:
#line 8045 ""
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1012:
#line 8050 ""
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1013:
#line 8057 ""
    {}
    break;

  case 1014:
#line 8058 ""
    {}
    break;

  case 1015:
#line 8059 ""
    {}
    break;

  case 1016:
#line 8060 ""
    {}
    break;

  case 1017:
#line 8065 ""
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1018:
#line 8077 ""
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1019:
#line 8094 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1020:
#line 8104 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1021:
#line 8120 ""
    {
            (yyval.num)= 0;
          }
    break;

  case 1022:
#line 8124 ""
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1023:
#line 8131 ""
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1024:
#line 8135 ""
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1025:
#line 8142 ""
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1026:
#line 8146 ""
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1027:
#line 8150 ""
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1029:
#line 8161 ""
    {
            /* empty */
          }
    break;

  case 1030:
#line 8165 ""
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1031:
#line 8171 ""
    {
            /* empty */
          }
    break;

  case 1032:
#line 8175 ""
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1033:
#line 8181 ""
    {
            /* empty */
          }
    break;

  case 1034:
#line 8185 ""
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1035:
#line 8191 ""
    {
            /* empty */
          }
    break;

  case 1036:
#line 8195 ""
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1037:
#line 8202 ""
    {
            (yyval.num)= 0;
          }
    break;

  case 1038:
#line 8206 ""
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1039:
#line 8213 ""
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1040:
#line 8217 ""
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1041:
#line 8224 ""
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1042:
#line 8228 ""
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1043:
#line 8234 ""
    {}
    break;

  case 1044:
#line 8236 ""
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1047:
#line 8263 ""
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1048:
#line 8268 ""
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1049:
#line 8273 ""
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1050:
#line 8280 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1051:
#line 8287 ""
    {}
    break;

  case 1052:
#line 8291 ""
    { Lex->check_opt.flags= 0; }
    break;

  case 1053:
#line 8292 ""
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1054:
#line 8293 ""
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1055:
#line 8298 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1056:
#line 8308 ""
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1057:
#line 8319 ""
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1058:
#line 8320 ""
    {}
    break;

  case 1059:
#line 8324 ""
    {}
    break;

  case 1060:
#line 8325 ""
    {}
    break;

  case 1061:
#line 8329 ""
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1062:
#line 8330 ""
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1063:
#line 8331 ""
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1064:
#line 8336 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1065:
#line 8346 ""
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:
#line 8358 ""
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1067:
#line 8366 ""
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1068:
#line 8381 ""
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:
#line 8392 ""
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1070:
#line 8393 ""
    {}
    break;

  case 1071:
#line 8397 ""
    {}
    break;

  case 1072:
#line 8398 ""
    {}
    break;

  case 1073:
#line 8402 ""
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1074:
#line 8403 ""
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1075:
#line 8404 ""
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1076:
#line 8405 ""
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1077:
#line 8406 ""
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1078:
#line 8407 ""
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1079:
#line 8412 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1080:
#line 8422 ""
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:
#line 8433 ""
    { (yyval.num)= 0; }
    break;

  case 1082:
#line 8434 ""
    { (yyval.num)= 1; }
    break;

  case 1083:
#line 8435 ""
    { (yyval.num)= 1; }
    break;

  case 1084:
#line 8440 ""
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1085:
#line 8444 ""
    {}
    break;

  case 1086:
#line 8446 ""
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1087:
#line 8453 ""
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1088:
#line 8458 ""
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1091:
#line 8471 ""
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1092:
#line 8484 ""
    {
            Lex->alter_info.reset();
          }
    break;

  case 1093:
#line 8488 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1098:
#line 8507 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1099:
#line 8517 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 8526 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1101:
#line 8527 ""
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1102:
#line 8532 ""
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1103:
#line 8538 ""
    {}
    break;

  case 1108:
#line 8553 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1109:
#line 8563 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1110:
#line 8573 ""
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1112:
#line 8580 ""
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1114:
#line 8591 ""
    { }
    break;

  case 1116:
#line 8597 ""
    { (yyval.num)= 0; }
    break;

  case 1117:
#line 8598 ""
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1118:
#line 8608 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1121:
#line 8622 ""
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1123:
#line 8632 ""
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1125:
#line 8641 ""
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1127:
#line 8660 ""
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1128:
#line 8668 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1130:
#line 8675 ""
    {}
    break;

  case 1135:
#line 8685 ""
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1138:
#line 8700 ""
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1142:
#line 8717 ""
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1143:
#line 8745 ""
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1145:
#line 8777 ""
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1146:
#line 8783 ""
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1149:
#line 8795 ""
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1150:
#line 8810 ""
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1151:
#line 8817 ""
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1152:
#line 8841 ""
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1153:
#line 8847 ""
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1154:
#line 8853 ""
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1155:
#line 8854 ""
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1156:
#line 8855 ""
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1157:
#line 8856 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1158:
#line 8857 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1159:
#line 8861 ""
    {}
    break;

  case 1160:
#line 8862 ""
    {}
    break;

  case 1161:
#line 8868 ""
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1162:
#line 8919 ""
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:
#line 8926 ""
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1164:
#line 8969 ""
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:
#line 8975 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:
#line 8981 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:
#line 8987 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:
#line 8993 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:
#line 8999 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:
#line 9005 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:
#line 9015 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:
#line 9021 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:
#line 9027 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:
#line 9033 ""
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:
#line 9039 ""
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:
#line 9049 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:
#line 9055 ""
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:
#line 9065 ""
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:
#line 9071 ""
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:
#line 9079 ""
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:
#line 9085 ""
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1184:
#line 9095 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:
#line 9101 ""
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1186:
#line 9110 ""
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:
#line 9120 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:
#line 9126 ""
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:
#line 9136 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:
#line 9142 ""
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:
#line 9155 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:
#line 9161 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:
#line 9167 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:
#line 9173 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:
#line 9179 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:
#line 9185 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:
#line 9191 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:
#line 9197 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:
#line 9203 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:
#line 9209 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:
#line 9215 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:
#line 9221 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:
#line 9227 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:
#line 9233 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:
#line 9262 ""
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1216:
#line 9263 ""
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1217:
#line 9264 ""
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1218:
#line 9265 ""
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1219:
#line 9266 ""
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1220:
#line 9267 ""
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1221:
#line 9271 ""
    { (yyval.num) = 1; }
    break;

  case 1222:
#line 9272 ""
    { (yyval.num) = 0; }
    break;

  case 1228:
#line 9282 ""
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:
#line 9298 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:
#line 9304 ""
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1235:
#line 9308 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:
#line 9314 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
#line 9320 ""
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:
#line 9326 ""
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:
#line 9332 ""
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1240:
#line 9334 ""
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:
#line 9341 ""
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:
#line 9348 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:
#line 9354 ""
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1244:
#line 9395 ""
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1245:
#line 9404 ""
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:
#line 9411 ""
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:
#line 9419 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:
#line 9425 ""
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:
#line 9432 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:
#line 9438 ""
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:
#line 9452 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:
#line 9460 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:
#line 9475 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:
#line 9481 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
#line 9487 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1256:
#line 9495 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:
#line 9501 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
#line 9507 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:
#line 9513 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:
#line 9519 ""
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:
#line 9534 ""
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:
#line 9546 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:
#line 9552 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:
#line 9558 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:
#line 9564 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:
#line 9570 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:
#line 9576 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:
#line 9582 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:
#line 9588 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:
#line 9594 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:
#line 9600 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:
#line 9606 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:
#line 9612 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:
#line 9618 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:
#line 9624 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:
#line 9630 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:
#line 9636 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:
#line 9642 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1279:
#line 9650 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:
#line 9671 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:
#line 9678 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:
#line 9684 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1283:
#line 9691 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1284:
#line 9699 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:
#line 9706 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:
#line 9712 ""
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:
#line 9718 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:
#line 9724 ""
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1289:
#line 9729 ""
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:
#line 9735 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:
#line 9742 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:
#line 9748 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:
#line 9754 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:
#line 9760 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:
#line 9766 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:
#line 9772 ""
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1297:
#line 9790 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:
#line 9796 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:
#line 9802 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1300:
#line 9809 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1301:
#line 9816 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1302:
#line 9831 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:
#line 9837 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:
#line 9843 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:
#line 9849 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:
#line 9855 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1307:
#line 9862 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:
#line 9868 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:
#line 9874 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:
#line 9880 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:
#line 9886 ""
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:
#line 9892 ""
    {
            WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:
#line 9900 ""
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1314:
#line 9913 ""
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:
#line 9919 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:
#line 9925 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:
#line 9931 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:
#line 9937 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1319:
#line 9945 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:
#line 9951 ""
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:
#line 9963 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:
#line 9969 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:
#line 9975 ""
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:
#line 9983 ""
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:
#line 9993 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:
#line 9999 ""
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1327:
#line 10015 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1328:
#line 10021 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1329:
#line 10028 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1330:
#line 10035 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1331:
#line 10042 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1332:
#line 10049 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1333:
#line 10056 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1334:
#line 10060 ""
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1335:
#line 10079 ""
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1336:
#line 10098 ""
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1337:
#line 10152 ""
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1338:
#line 10192 ""
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1339:
#line 10194 ""
    { (yyval.num)= FT_BOOL; }
    break;

  case 1340:
#line 10198 ""
    { (yyval.num)= FT_NL; }
    break;

  case 1341:
#line 10199 ""
    { (yyval.num)= FT_NL; }
    break;

  case 1342:
#line 10203 ""
    { (yyval.num)= 0;         }
    break;

  case 1343:
#line 10204 ""
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1344:
#line 10208 ""
    { (yyval.item_list)= NULL; }
    break;

  case 1345:
#line 10209 ""
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1346:
#line 10214 ""
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1347:
#line 10221 ""
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1348:
#line 10229 ""
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1349:
#line 10255 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:
#line 10261 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:
#line 10267 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:
#line 10273 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:
#line 10279 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:
#line 10285 ""
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:
#line 10294 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:
#line 10300 ""
    { Select->in_sum_expr++; }
    break;

  case 1357:
#line 10302 ""
    { Select->in_sum_expr--; }
    break;

  case 1358:
#line 10304 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:
#line 10310 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:
#line 10321 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:
#line 10327 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:
#line 10333 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:
#line 10339 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:
#line 10345 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:
#line 10351 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:
#line 10357 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:
#line 10363 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:
#line 10369 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:
#line 10375 ""
    { Select->in_sum_expr++; }
    break;

  case 1370:
#line 10379 ""
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1371:
#line 10394 ""
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1372:
#line 10402 ""
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1373:
#line 10409 ""
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1374:
#line 10420 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1375:
#line 10428 ""
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1376:
#line 10443 ""
    { (yyval.num) = 0; }
    break;

  case 1377:
#line 10444 ""
    { (yyval.num) = 1; }
    break;

  case 1378:
#line 10449 ""
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:
#line 10454 ""
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1381:
#line 10460 ""
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1383:
#line 10477 ""
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1384:
#line 10479 ""
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1385:
#line 10484 ""
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1386:
#line 10493 ""
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1387:
#line 10501 ""
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1388:
#line 10503 ""
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1389:
#line 10505 ""
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1390:
#line 10507 ""
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1391:
#line 10509 ""
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1392:
#line 10511 ""
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1393:
#line 10513 ""
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1394:
#line 10515 ""
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1395:
#line 10517 ""
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1396:
#line 10519 ""
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1397:
#line 10521 ""
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1398:
#line 10525 ""
    { (yyval.item_list)= NULL; }
    break;

  case 1399:
#line 10526 ""
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1400:
#line 10531 ""
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1401:
#line 10538 ""
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1402:
#line 10545 ""
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1403:
#line 10546 ""
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1404:
#line 10551 ""
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1405:
#line 10558 ""
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1406:
#line 10565 ""
    { (yyval.item)= NULL; }
    break;

  case 1407:
#line 10566 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1408:
#line 10570 ""
    { (yyval.item)= NULL; }
    break;

  case 1409:
#line 10571 ""
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1410:
#line 10576 ""
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1411:
#line 10584 ""
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1412:
#line 10594 ""
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1413:
#line 10596 ""
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1414:
#line 10604 ""
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1415:
#line 10615 ""
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1416:
#line 10616 ""
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1417:
#line 10622 ""
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1418:
#line 10624 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1419:
#line 10644 ""
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1420:
#line 10646 ""
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1421:
#line 10649 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1422:
#line 10657 ""
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1423:
#line 10664 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1424:
#line 10672 ""
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1425:
#line 10680 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1426:
#line 10684 ""
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1427:
#line 10686 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1428:
#line 10694 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1429:
#line 10702 ""
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1430:
#line 10710 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1431:
#line 10714 ""
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1432:
#line 10720 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1433:
#line 10730 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1434:
#line 10738 ""
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1435:
#line 10747 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1436:
#line 10751 ""
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1437:
#line 10758 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1438:
#line 10768 ""
    {}
    break;

  case 1439:
#line 10769 ""
    {}
    break;

  case 1440:
#line 10770 ""
    {}
    break;

  case 1441:
#line 10778 ""
    { (yyval.string_list)= 0;}
    break;

  case 1443:
#line 10784 ""
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1444:
#line 10798 ""
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1445:
#line 10803 ""
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1446:
#line 10814 ""
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1447:
#line 10854 ""
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1448:
#line 10927 ""
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1449:
#line 10937 ""
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1450:
#line 10942 ""
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1451:
#line 10950 ""
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1452:
#line 10962 ""
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1453:
#line 10981 ""
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1454:
#line 10989 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1456:
#line 10998 ""
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1457:
#line 11004 ""
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1458:
#line 11020 ""
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1459:
#line 11037 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1461:
#line 11044 ""
    { (yyval.select_lex)= Select; }
    break;

  case 1462:
#line 11049 ""
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1463:
#line 11074 ""
    {}
    break;

  case 1464:
#line 11075 ""
    {}
    break;

  case 1465:
#line 11080 ""
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1466:
#line 11083 ""
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1467:
#line 11084 ""
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1468:
#line 11085 ""
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1469:
#line 11089 ""
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1470:
#line 11090 ""
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1471:
#line 11095 ""
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1473:
#line 11100 ""
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1478:
#line 11113 ""
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1480:
#line 11117 ""
    {  Select->clear_index_hints(); }
    break;

  case 1482:
#line 11122 ""
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1483:
#line 11123 ""
    {}
    break;

  case 1484:
#line 11128 ""
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1485:
#line 11130 ""
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1488:
#line 11140 ""
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1489:
#line 11151 ""
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1490:
#line 11163 ""
    {}
    break;

  case 1491:
#line 11164 ""
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1492:
#line 11165 ""
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1493:
#line 11166 ""
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1494:
#line 11167 ""
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1495:
#line 11168 ""
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1496:
#line 11169 ""
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1497:
#line 11170 ""
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1498:
#line 11171 ""
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1499:
#line 11172 ""
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1500:
#line 11173 ""
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1501:
#line 11174 ""
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1502:
#line 11178 ""
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1503:
#line 11179 ""
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1504:
#line 11180 ""
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1505:
#line 11181 ""
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1506:
#line 11182 ""
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1507:
#line 11183 ""
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1508:
#line 11184 ""
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1509:
#line 11185 ""
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1510:
#line 11186 ""
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1511:
#line 11190 ""
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1512:
#line 11191 ""
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1513:
#line 11192 ""
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1514:
#line 11193 ""
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1518:
#line 11203 ""
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1519:
#line 11205 ""
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1522:
#line 11218 ""
    { Select->where= 0; }
    break;

  case 1523:
#line 11220 ""
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1524:
#line 11224 ""
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1526:
#line 11236 ""
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1527:
#line 11240 ""
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1528:
#line 11251 ""
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1529:
#line 11256 ""
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1532:
#line 11278 ""
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1533:
#line 11280 ""
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1534:
#line 11284 ""
    {}
    break;

  case 1535:
#line 11286 ""
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1536:
#line 11306 ""
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1540:
#line 11346 ""
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1543:
#line 11365 ""
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1545:
#line 11400 ""
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1546:
#line 11402 ""
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1547:
#line 11406 ""
    { (yyval.num) =  1; }
    break;

  case 1548:
#line 11407 ""
    { (yyval.num) =1; }
    break;

  case 1549:
#line 11408 ""
    { (yyval.num) =0; }
    break;

  case 1550:
#line 11413 ""
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1551:
#line 11419 ""
    {}
    break;

  case 1552:
#line 11423 ""
    {}
    break;

  case 1553:
#line 11424 ""
    {}
    break;

  case 1554:
#line 11429 ""
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1555:
#line 11436 ""
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1556:
#line 11443 ""
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1557:
#line 11450 ""
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1558:
#line 11460 ""
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1559:
#line 11487 ""
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1560:
#line 11491 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1561:
#line 11497 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1562:
#line 11503 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1563:
#line 11512 ""
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1564:
#line 11517 ""
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1565:
#line 11526 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1566:
#line 11527 ""
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1567:
#line 11528 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1568:
#line 11529 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1569:
#line 11530 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1570:
#line 11531 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1571:
#line 11535 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1572:
#line 11536 ""
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1573:
#line 11537 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1574:
#line 11538 ""
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1575:
#line 11539 ""
    { MYSQL_YYABORT; }
    break;

  case 1576:
#line 11543 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:
#line 11544 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:
#line 11545 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1579:
#line 11546 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:
#line 11547 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:
#line 11551 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1582:
#line 11552 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:
#line 11553 ""
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1584:
#line 11554 ""
    { MYSQL_YYABORT; }
    break;

  case 1585:
#line 11559 ""
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1589:
#line 11570 ""
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1591:
#line 11603 ""
    {}
    break;

  case 1592:
#line 11605 ""
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1593:
#line 11609 ""
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1594:
#line 11617 ""
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1595:
#line 11629 ""
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1596:
#line 11635 ""
    {}
    break;

  case 1598:
#line 11640 ""
    {}
    break;

  case 1599:
#line 11645 ""
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1600:
#line 11664 ""
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1601:
#line 11703 ""
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1603:
#line 11715 ""
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1604:
#line 11723 ""
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1606:
#line 11726 ""
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1607:
#line 11738 ""
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1608:
#line 11749 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1609:
#line 11755 ""
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1610:
#line 11766 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1611:
#line 11775 ""
    {}
    break;

  case 1612:
#line 11776 ""
    {}
    break;

  case 1613:
#line 11777 ""
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1614:
#line 11792 ""
    {}
    break;

  case 1615:
#line 11794 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1616:
#line 11801 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1617:
#line 11822 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1618:
#line 11843 ""
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1619:
#line 11855 ""
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1620:
#line 11859 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1621:
#line 11867 ""
    {}
    break;

  case 1622:
#line 11869 ""
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1623:
#line 11875 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1624:
#line 11882 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1625:
#line 11887 ""
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1626:
#line 11892 ""
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1629:
#line 11907 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1630:
#line 11918 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1633:
#line 11936 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1634:
#line 11946 ""
    { (yyval.num)= 0; }
    break;

  case 1635:
#line 11947 ""
    { (yyval.num)= 1; }
    break;

  case 1636:
#line 11951 ""
    { (yyval.num)= 0; }
    break;

  case 1637:
#line 11952 ""
    { (yyval.num)= 1; }
    break;

  case 1645:
#line 11975 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1646:
#line 11983 ""
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1647:
#line 11988 ""
    {}
    break;

  case 1648:
#line 11993 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1649:
#line 12000 ""
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1650:
#line 12005 ""
    {}
    break;

  case 1651:
#line 12010 ""
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1652:
#line 12022 ""
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1653:
#line 12024 ""
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1654:
#line 12036 ""
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1655:
#line 12040 ""
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1656:
#line 12042 ""
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1657:
#line 12057 ""
    {}
    break;

  case 1658:
#line 12058 ""
    {}
    break;

  case 1659:
#line 12063 ""
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1660:
#line 12071 ""
    {}
    break;

  case 1661:
#line 12072 ""
    {}
    break;

  case 1662:
#line 12073 ""
    {}
    break;

  case 1663:
#line 12075 ""
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1665:
#line 12085 ""
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1666:
#line 12086 ""
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1667:
#line 12090 ""
    {}
    break;

  case 1668:
#line 12091 ""
    {}
    break;

  case 1669:
#line 12093 ""
    { Select->set_braces(0);}
    break;

  case 1670:
#line 12094 ""
    {}
    break;

  case 1671:
#line 12096 ""
    { Select->set_braces(1);}
    break;

  case 1672:
#line 12097 ""
    {}
    break;

  case 1677:
#line 12112 ""
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1678:
#line 12121 ""
    {}
    break;

  case 1679:
#line 12122 ""
    {}
    break;

  case 1680:
#line 12126 ""
    {}
    break;

  case 1681:
#line 12127 ""
    {}
    break;

  case 1682:
#line 12132 ""
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1683:
#line 12137 ""
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1684:
#line 12145 ""
    {}
    break;

  case 1686:
#line 12151 ""
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1687:
#line 12156 ""
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1688:
#line 12163 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1689:
#line 12165 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1691:
#line 12174 ""
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1693:
#line 12182 ""
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1694:
#line 12190 ""
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1695:
#line 12208 ""
    {}
    break;

  case 1698:
#line 12218 ""
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1701:
#line 12231 ""
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1702:
#line 12240 ""
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1703:
#line 12241 ""
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1704:
#line 12248 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1706:
#line 12263 ""
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1707:
#line 12274 ""
    {}
    break;

  case 1708:
#line 12276 ""
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1709:
#line 12282 ""
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1710:
#line 12287 ""
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1711:
#line 12293 ""
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1714:
#line 12306 ""
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1715:
#line 12319 ""
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1716:
#line 12334 ""
    {}
    break;

  case 1717:
#line 12335 ""
    {}
    break;

  case 1718:
#line 12339 ""
    {}
    break;

  case 1719:
#line 12340 ""
    {}
    break;

  case 1720:
#line 12344 ""
    { Select->options|= OPTION_QUICK; }
    break;

  case 1721:
#line 12345 ""
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1722:
#line 12346 ""
    { Lex->ignore= 1; }
    break;

  case 1723:
#line 12351 ""
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1724:
#line 12362 ""
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1731:
#line 12387 ""
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1732:
#line 12391 ""
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1733:
#line 12395 ""
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1734:
#line 12399 ""
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1735:
#line 12403 ""
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1736:
#line 12407 ""
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1737:
#line 12411 ""
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1738:
#line 12415 ""
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1739:
#line 12419 ""
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1740:
#line 12426 ""
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1741:
#line 12430 ""
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1742:
#line 12439 ""
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1743:
#line 12447 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1744:
#line 12454 ""
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1745:
#line 12461 ""
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1746:
#line 12469 ""
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1747:
#line 12477 ""
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1748:
#line 12485 ""
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1749:
#line 12493 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1750:
#line 12501 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1751:
#line 12508 ""
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1752:
#line 12510 ""
    { Lex->create_info.db_type= NULL; }
    break;

  case 1753:
#line 12512 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1754:
#line 12521 ""
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1755:
#line 12525 ""
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1756:
#line 12529 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1758:
#line 12534 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1760:
#line 12539 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1761:
#line 12548 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1762:
#line 12555 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1763:
#line 12560 ""
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1764:
#line 12562 ""
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1765:
#line 12564 ""
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1766:
#line 12566 ""
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1767:
#line 12568 ""
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1768:
#line 12576 ""
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1769:
#line 12587 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1770:
#line 12595 ""
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1771:
#line 12597 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1772:
#line 12605 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1773:
#line 12612 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1774:
#line 12619 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1775:
#line 12629 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1776:
#line 12636 ""
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1777:
#line 12642 ""
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1778:
#line 12651 ""
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1779:
#line 12659 ""
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1780:
#line 12663 ""
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1781:
#line 12667 ""
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1782:
#line 12674 ""
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1783:
#line 12681 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1784:
#line 12687 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1785:
#line 12694 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1786:
#line 12701 ""
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1787:
#line 12706 ""
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1788:
#line 12711 ""
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1789:
#line 12719 ""
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1790:
#line 12721 ""
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1791:
#line 12723 ""
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1796:
#line 12737 ""
    { (yyval.simple_string)= 0; }
    break;

  case 1797:
#line 12738 ""
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1798:
#line 12742 ""
    { Lex->verbose=0; }
    break;

  case 1799:
#line 12743 ""
    { Lex->verbose=1; }
    break;

  case 1802:
#line 12752 ""
    { Lex->mi.log_file_name = 0; }
    break;

  case 1803:
#line 12753 ""
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1804:
#line 12757 ""
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1805:
#line 12758 ""
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1807:
#line 12764 ""
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1808:
#line 12771 ""
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1809:
#line 12781 ""
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1810:
#line 12792 ""
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1811:
#line 12796 ""
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1812:
#line 12798 ""
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1820:
#line 12816 ""
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1821:
#line 12821 ""
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1822:
#line 12827 ""
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1823:
#line 12833 ""
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1824:
#line 12854 ""
    {}
    break;

  case 1825:
#line 12855 ""
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1826:
#line 12857 ""
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1827:
#line 12871 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1828:
#line 12878 ""
    {}
    break;

  case 1829:
#line 12883 ""
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1830:
#line 12892 ""
    {}
    break;

  case 1831:
#line 12893 ""
    {}
    break;

  case 1833:
#line 12898 ""
    {}
    break;

  case 1834:
#line 12900 ""
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1835:
#line 12911 ""
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1836:
#line 12919 ""
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1838:
#line 12934 ""
    {}
    break;

  case 1839:
#line 12939 ""
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1840:
#line 12941 ""
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1841:
#line 12943 ""
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1842:
#line 12945 ""
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1843:
#line 12947 ""
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1844:
#line 12949 ""
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1845:
#line 12951 ""
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1846:
#line 12953 ""
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1847:
#line 12955 ""
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1848:
#line 12957 ""
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1849:
#line 12959 ""
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1850:
#line 12961 ""
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1851:
#line 12963 ""
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1852:
#line 12967 ""
    {}
    break;

  case 1853:
#line 12968 ""
    {}
    break;

  case 1854:
#line 12973 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1855:
#line 12978 ""
    {}
    break;

  case 1858:
#line 12987 ""
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1859:
#line 12988 ""
    { }
    break;

  case 1860:
#line 12989 ""
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1861:
#line 12990 ""
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1862:
#line 12994 ""
    { Lex->reset_slave_info.all= false; }
    break;

  case 1863:
#line 12995 ""
    { Lex->reset_slave_info.all= true; }
    break;

  case 1864:
#line 13000 ""
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1865:
#line 13006 ""
    {}
    break;

  case 1867:
#line 13015 ""
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1868:
#line 13019 ""
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1869:
#line 13031 ""
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1870:
#line 13040 ""
    { Lex->type= 0; }
    break;

  case 1871:
#line 13041 ""
    { Lex->type= 0; }
    break;

  case 1872:
#line 13042 ""
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1873:
#line 13049 ""
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1874:
#line 13060 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1875:
#line 13072 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1876:
#line 13082 ""
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1877:
#line 13092 ""
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1878:
#line 13096 ""
    {}
    break;

  case 1879:
#line 13100 ""
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1880:
#line 13101 ""
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1881:
#line 13105 ""
    { (yyval.num)=0;}
    break;

  case 1882:
#line 13106 ""
    { (yyval.num)=1;}
    break;

  case 1883:
#line 13110 ""
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1884:
#line 13112 ""
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1885:
#line 13123 ""
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1886:
#line 13127 ""
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1887:
#line 13128 ""
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1888:
#line 13129 ""
    { Lex->ignore= 1; }
    break;

  case 1893:
#line 13144 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1894:
#line 13149 ""
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1895:
#line 13156 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1896:
#line 13161 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1901:
#line 13179 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1902:
#line 13184 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1903:
#line 13191 ""
    { }
    break;

  case 1904:
#line 13193 ""
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1906:
#line 13198 ""
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1907:
#line 13205 ""
    { }
    break;

  case 1908:
#line 13207 ""
    { }
    break;

  case 1909:
#line 13211 ""
    {}
    break;

  case 1910:
#line 13212 ""
    {}
    break;

  case 1911:
#line 13213 ""
    {}
    break;

  case 1912:
#line 13218 ""
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1913:
#line 13220 ""
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1914:
#line 13224 ""
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1915:
#line 13226 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1916:
#line 13234 ""
    {}
    break;

  case 1917:
#line 13235 ""
    {}
    break;

  case 1920:
#line 13245 ""
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1921:
#line 13265 ""
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1922:
#line 13289 ""
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1923:
#line 13301 ""
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1924:
#line 13312 ""
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1925:
#line 13331 ""
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1926:
#line 13339 ""
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1927:
#line 13351 ""
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1928:
#line 13366 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1929:
#line 13386 ""
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1930:
#line 13387 ""
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1931:
#line 13389 ""
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1932:
#line 13397 ""
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1933:
#line 13398 ""
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1934:
#line 13399 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1935:
#line 13401 ""
    {
            Lex_input_stream *lip= YYLIP;
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            lip->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1936:
#line 13416 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1937:
#line 13422 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1938:
#line 13428 ""
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1939:
#line 13434 ""
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1940:
#line 13440 ""
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1941:
#line 13469 ""
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1942:
#line 13500 ""
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1943:
#line 13510 ""
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1944:
#line 13520 ""
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1945:
#line 13526 ""
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1946:
#line 13535 ""
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1947:
#line 13547 ""
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1948:
#line 13553 ""
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1949:
#line 13559 ""
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 1950:
#line 13574 ""
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1951:
#line 13575 ""
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1952:
#line 13580 ""
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1953:
#line 13589 ""
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1954:
#line 13604 ""
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1955:
#line 13609 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1956:
#line 13659 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1957:
#line 13664 ""
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:
#line 13681 ""
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1959:
#line 13686 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1960:
#line 13766 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1961:
#line 13791 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1962:
#line 13821 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1963:
#line 13823 ""
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1964:
#line 13839 ""
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1965:
#line 13848 ""
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1966:
#line 13853 ""
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1967:
#line 13859 ""
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1968:
#line 13865 ""
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1969:
#line 13875 ""
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1970:
#line 13881 ""
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1971:
#line 13890 ""
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1972:
#line 13899 ""
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1973:
#line 13901 ""
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1974:
#line 13931 ""
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1975:
#line 13944 ""
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1976:
#line 13960 ""
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1977:
#line 13976 ""
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1978:
#line 13992 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1979:
#line 13994 ""
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1980:
#line 14004 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1981:
#line 14006 ""
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1982:
#line 14016 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1983:
#line 14017 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1984:
#line 14018 ""
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1985:
#line 14023 ""
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1986:
#line 14050 ""
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 1987:
#line 14083 ""
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 1988:
#line 14097 ""
    {}
    break;

  case 1989:
#line 14098 ""
    {}
    break;

  case 1990:
#line 14099 ""
    {}
    break;

  case 1991:
#line 14100 ""
    {}
    break;

  case 1992:
#line 14101 ""
    {}
    break;

  case 1993:
#line 14102 ""
    {}
    break;

  case 1994:
#line 14103 ""
    {}
    break;

  case 1995:
#line 14104 ""
    {}
    break;

  case 1996:
#line 14105 ""
    {}
    break;

  case 1997:
#line 14106 ""
    {}
    break;

  case 1998:
#line 14107 ""
    {}
    break;

  case 1999:
#line 14108 ""
    {}
    break;

  case 2000:
#line 14109 ""
    {}
    break;

  case 2001:
#line 14110 ""
    {}
    break;

  case 2002:
#line 14111 ""
    {}
    break;

  case 2003:
#line 14112 ""
    {}
    break;

  case 2004:
#line 14113 ""
    {}
    break;

  case 2005:
#line 14114 ""
    {}
    break;

  case 2006:
#line 14115 ""
    {}
    break;

  case 2007:
#line 14116 ""
    {}
    break;

  case 2008:
#line 14117 ""
    {}
    break;

  case 2009:
#line 14118 ""
    {}
    break;

  case 2010:
#line 14119 ""
    {}
    break;

  case 2011:
#line 14120 ""
    {}
    break;

  case 2012:
#line 14121 ""
    {}
    break;

  case 2013:
#line 14122 ""
    {}
    break;

  case 2014:
#line 14123 ""
    {}
    break;

  case 2015:
#line 14124 ""
    {}
    break;

  case 2016:
#line 14125 ""
    {}
    break;

  case 2017:
#line 14126 ""
    {}
    break;

  case 2018:
#line 14127 ""
    {}
    break;

  case 2019:
#line 14128 ""
    {}
    break;

  case 2020:
#line 14129 ""
    {}
    break;

  case 2021:
#line 14130 ""
    {}
    break;

  case 2022:
#line 14131 ""
    {}
    break;

  case 2023:
#line 14132 ""
    {}
    break;

  case 2024:
#line 14133 ""
    {}
    break;

  case 2025:
#line 14134 ""
    {}
    break;

  case 2026:
#line 14135 ""
    {}
    break;

  case 2027:
#line 14136 ""
    {}
    break;

  case 2028:
#line 14137 ""
    {}
    break;

  case 2029:
#line 14138 ""
    {}
    break;

  case 2030:
#line 14139 ""
    {}
    break;

  case 2031:
#line 14140 ""
    {}
    break;

  case 2032:
#line 14141 ""
    {}
    break;

  case 2033:
#line 14142 ""
    {}
    break;

  case 2034:
#line 14143 ""
    {}
    break;

  case 2035:
#line 14144 ""
    {}
    break;

  case 2036:
#line 14145 ""
    {}
    break;

  case 2037:
#line 14146 ""
    {}
    break;

  case 2038:
#line 14156 ""
    {}
    break;

  case 2039:
#line 14157 ""
    {}
    break;

  case 2040:
#line 14158 ""
    {}
    break;

  case 2041:
#line 14159 ""
    {}
    break;

  case 2042:
#line 14160 ""
    {}
    break;

  case 2043:
#line 14161 ""
    {}
    break;

  case 2044:
#line 14162 ""
    {}
    break;

  case 2045:
#line 14163 ""
    {}
    break;

  case 2046:
#line 14164 ""
    {}
    break;

  case 2047:
#line 14165 ""
    {}
    break;

  case 2048:
#line 14166 ""
    {}
    break;

  case 2049:
#line 14167 ""
    {}
    break;

  case 2050:
#line 14168 ""
    {}
    break;

  case 2051:
#line 14169 ""
    {}
    break;

  case 2052:
#line 14170 ""
    {}
    break;

  case 2053:
#line 14171 ""
    {}
    break;

  case 2054:
#line 14172 ""
    {}
    break;

  case 2055:
#line 14173 ""
    {}
    break;

  case 2056:
#line 14174 ""
    {}
    break;

  case 2057:
#line 14175 ""
    {}
    break;

  case 2058:
#line 14176 ""
    {}
    break;

  case 2059:
#line 14177 ""
    {}
    break;

  case 2060:
#line 14178 ""
    {}
    break;

  case 2061:
#line 14179 ""
    {}
    break;

  case 2062:
#line 14180 ""
    {}
    break;

  case 2063:
#line 14181 ""
    {}
    break;

  case 2064:
#line 14182 ""
    {}
    break;

  case 2065:
#line 14183 ""
    {}
    break;

  case 2066:
#line 14184 ""
    {}
    break;

  case 2067:
#line 14185 ""
    {}
    break;

  case 2068:
#line 14186 ""
    {}
    break;

  case 2069:
#line 14187 ""
    {}
    break;

  case 2070:
#line 14188 ""
    {}
    break;

  case 2071:
#line 14189 ""
    {}
    break;

  case 2072:
#line 14190 ""
    {}
    break;

  case 2073:
#line 14191 ""
    {}
    break;

  case 2074:
#line 14192 ""
    {}
    break;

  case 2075:
#line 14193 ""
    {}
    break;

  case 2076:
#line 14194 ""
    {}
    break;

  case 2077:
#line 14195 ""
    {}
    break;

  case 2078:
#line 14196 ""
    {}
    break;

  case 2079:
#line 14197 ""
    {}
    break;

  case 2080:
#line 14198 ""
    {}
    break;

  case 2081:
#line 14199 ""
    {}
    break;

  case 2082:
#line 14200 ""
    {}
    break;

  case 2083:
#line 14205 ""
    {}
    break;

  case 2084:
#line 14206 ""
    {}
    break;

  case 2085:
#line 14207 ""
    {}
    break;

  case 2086:
#line 14208 ""
    {}
    break;

  case 2087:
#line 14209 ""
    {}
    break;

  case 2088:
#line 14210 ""
    {}
    break;

  case 2089:
#line 14211 ""
    {}
    break;

  case 2090:
#line 14212 ""
    {}
    break;

  case 2091:
#line 14213 ""
    {}
    break;

  case 2092:
#line 14214 ""
    {}
    break;

  case 2093:
#line 14215 ""
    {}
    break;

  case 2094:
#line 14216 ""
    {}
    break;

  case 2095:
#line 14217 ""
    {}
    break;

  case 2096:
#line 14218 ""
    {}
    break;

  case 2097:
#line 14219 ""
    {}
    break;

  case 2098:
#line 14220 ""
    {}
    break;

  case 2099:
#line 14221 ""
    {}
    break;

  case 2100:
#line 14222 ""
    {}
    break;

  case 2101:
#line 14223 ""
    {}
    break;

  case 2102:
#line 14224 ""
    {}
    break;

  case 2103:
#line 14225 ""
    {}
    break;

  case 2104:
#line 14226 ""
    {}
    break;

  case 2105:
#line 14227 ""
    {}
    break;

  case 2106:
#line 14228 ""
    {}
    break;

  case 2107:
#line 14229 ""
    {}
    break;

  case 2108:
#line 14230 ""
    {}
    break;

  case 2109:
#line 14231 ""
    {}
    break;

  case 2110:
#line 14232 ""
    {}
    break;

  case 2111:
#line 14233 ""
    {}
    break;

  case 2112:
#line 14234 ""
    {}
    break;

  case 2113:
#line 14235 ""
    {}
    break;

  case 2114:
#line 14236 ""
    {}
    break;

  case 2115:
#line 14237 ""
    {}
    break;

  case 2116:
#line 14238 ""
    {}
    break;

  case 2117:
#line 14239 ""
    {}
    break;

  case 2118:
#line 14240 ""
    {}
    break;

  case 2119:
#line 14241 ""
    {}
    break;

  case 2120:
#line 14242 ""
    {}
    break;

  case 2121:
#line 14243 ""
    {}
    break;

  case 2122:
#line 14244 ""
    {}
    break;

  case 2123:
#line 14245 ""
    {}
    break;

  case 2124:
#line 14246 ""
    {}
    break;

  case 2125:
#line 14247 ""
    {}
    break;

  case 2126:
#line 14248 ""
    {}
    break;

  case 2127:
#line 14249 ""
    {}
    break;

  case 2128:
#line 14250 ""
    {}
    break;

  case 2129:
#line 14251 ""
    {}
    break;

  case 2130:
#line 14252 ""
    {}
    break;

  case 2131:
#line 14253 ""
    {}
    break;

  case 2132:
#line 14254 ""
    {}
    break;

  case 2133:
#line 14255 ""
    {}
    break;

  case 2134:
#line 14256 ""
    {}
    break;

  case 2135:
#line 14257 ""
    {}
    break;

  case 2136:
#line 14258 ""
    {}
    break;

  case 2137:
#line 14259 ""
    {}
    break;

  case 2138:
#line 14260 ""
    {}
    break;

  case 2139:
#line 14261 ""
    {}
    break;

  case 2140:
#line 14262 ""
    {}
    break;

  case 2141:
#line 14263 ""
    {}
    break;

  case 2142:
#line 14264 ""
    {}
    break;

  case 2143:
#line 14265 ""
    {}
    break;

  case 2144:
#line 14266 ""
    {}
    break;

  case 2145:
#line 14267 ""
    {}
    break;

  case 2146:
#line 14268 ""
    {}
    break;

  case 2147:
#line 14269 ""
    {}
    break;

  case 2148:
#line 14270 ""
    {}
    break;

  case 2149:
#line 14271 ""
    {}
    break;

  case 2150:
#line 14272 ""
    {}
    break;

  case 2151:
#line 14273 ""
    {}
    break;

  case 2152:
#line 14274 ""
    {}
    break;

  case 2153:
#line 14275 ""
    {}
    break;

  case 2154:
#line 14276 ""
    {}
    break;

  case 2155:
#line 14277 ""
    {}
    break;

  case 2156:
#line 14278 ""
    {}
    break;

  case 2157:
#line 14279 ""
    {}
    break;

  case 2158:
#line 14280 ""
    {}
    break;

  case 2159:
#line 14281 ""
    {}
    break;

  case 2160:
#line 14282 ""
    {}
    break;

  case 2161:
#line 14283 ""
    {}
    break;

  case 2162:
#line 14284 ""
    {}
    break;

  case 2163:
#line 14285 ""
    {}
    break;

  case 2164:
#line 14286 ""
    {}
    break;

  case 2165:
#line 14287 ""
    {}
    break;

  case 2166:
#line 14288 ""
    {}
    break;

  case 2167:
#line 14289 ""
    {}
    break;

  case 2168:
#line 14290 ""
    {}
    break;

  case 2169:
#line 14291 ""
    {}
    break;

  case 2170:
#line 14292 ""
    {}
    break;

  case 2171:
#line 14293 ""
    {}
    break;

  case 2172:
#line 14294 ""
    {}
    break;

  case 2173:
#line 14295 ""
    {}
    break;

  case 2174:
#line 14296 ""
    {}
    break;

  case 2175:
#line 14297 ""
    {}
    break;

  case 2176:
#line 14298 ""
    {}
    break;

  case 2177:
#line 14299 ""
    {}
    break;

  case 2178:
#line 14300 ""
    {}
    break;

  case 2179:
#line 14301 ""
    {}
    break;

  case 2180:
#line 14302 ""
    {}
    break;

  case 2181:
#line 14303 ""
    {}
    break;

  case 2182:
#line 14304 ""
    {}
    break;

  case 2183:
#line 14305 ""
    {}
    break;

  case 2184:
#line 14306 ""
    {}
    break;

  case 2185:
#line 14307 ""
    {}
    break;

  case 2186:
#line 14308 ""
    {}
    break;

  case 2187:
#line 14309 ""
    {}
    break;

  case 2188:
#line 14310 ""
    {}
    break;

  case 2189:
#line 14311 ""
    {}
    break;

  case 2190:
#line 14312 ""
    {}
    break;

  case 2191:
#line 14313 ""
    {}
    break;

  case 2192:
#line 14314 ""
    {}
    break;

  case 2193:
#line 14315 ""
    {}
    break;

  case 2194:
#line 14316 ""
    {}
    break;

  case 2195:
#line 14317 ""
    {}
    break;

  case 2196:
#line 14318 ""
    {}
    break;

  case 2197:
#line 14319 ""
    {}
    break;

  case 2198:
#line 14320 ""
    {}
    break;

  case 2199:
#line 14321 ""
    {}
    break;

  case 2200:
#line 14322 ""
    {}
    break;

  case 2201:
#line 14323 ""
    {}
    break;

  case 2202:
#line 14324 ""
    {}
    break;

  case 2203:
#line 14325 ""
    {}
    break;

  case 2204:
#line 14326 ""
    {}
    break;

  case 2205:
#line 14327 ""
    {}
    break;

  case 2206:
#line 14328 ""
    {}
    break;

  case 2207:
#line 14329 ""
    {}
    break;

  case 2208:
#line 14330 ""
    {}
    break;

  case 2209:
#line 14331 ""
    {}
    break;

  case 2210:
#line 14332 ""
    {}
    break;

  case 2211:
#line 14333 ""
    {}
    break;

  case 2212:
#line 14334 ""
    {}
    break;

  case 2213:
#line 14335 ""
    {}
    break;

  case 2214:
#line 14336 ""
    {}
    break;

  case 2215:
#line 14337 ""
    {}
    break;

  case 2216:
#line 14338 ""
    {}
    break;

  case 2217:
#line 14339 ""
    {}
    break;

  case 2218:
#line 14340 ""
    {}
    break;

  case 2219:
#line 14341 ""
    {}
    break;

  case 2220:
#line 14342 ""
    {}
    break;

  case 2221:
#line 14343 ""
    {}
    break;

  case 2222:
#line 14344 ""
    {}
    break;

  case 2223:
#line 14345 ""
    {}
    break;

  case 2224:
#line 14346 ""
    {}
    break;

  case 2225:
#line 14347 ""
    {}
    break;

  case 2226:
#line 14348 ""
    {}
    break;

  case 2227:
#line 14349 ""
    {}
    break;

  case 2228:
#line 14350 ""
    {}
    break;

  case 2229:
#line 14351 ""
    {}
    break;

  case 2230:
#line 14352 ""
    {}
    break;

  case 2231:
#line 14353 ""
    {}
    break;

  case 2232:
#line 14354 ""
    {}
    break;

  case 2233:
#line 14355 ""
    {}
    break;

  case 2234:
#line 14356 ""
    {}
    break;

  case 2235:
#line 14357 ""
    {}
    break;

  case 2236:
#line 14358 ""
    {}
    break;

  case 2237:
#line 14359 ""
    {}
    break;

  case 2238:
#line 14360 ""
    {}
    break;

  case 2239:
#line 14361 ""
    {}
    break;

  case 2240:
#line 14362 ""
    {}
    break;

  case 2241:
#line 14363 ""
    {}
    break;

  case 2242:
#line 14364 ""
    {}
    break;

  case 2243:
#line 14365 ""
    {}
    break;

  case 2244:
#line 14366 ""
    {}
    break;

  case 2245:
#line 14367 ""
    {}
    break;

  case 2246:
#line 14368 ""
    {}
    break;

  case 2247:
#line 14369 ""
    {}
    break;

  case 2248:
#line 14370 ""
    {}
    break;

  case 2249:
#line 14371 ""
    {}
    break;

  case 2250:
#line 14372 ""
    {}
    break;

  case 2251:
#line 14373 ""
    {}
    break;

  case 2252:
#line 14374 ""
    {}
    break;

  case 2253:
#line 14375 ""
    {}
    break;

  case 2254:
#line 14376 ""
    {}
    break;

  case 2255:
#line 14377 ""
    {}
    break;

  case 2256:
#line 14378 ""
    {}
    break;

  case 2257:
#line 14379 ""
    {}
    break;

  case 2258:
#line 14380 ""
    {}
    break;

  case 2259:
#line 14381 ""
    {}
    break;

  case 2260:
#line 14382 ""
    {}
    break;

  case 2261:
#line 14383 ""
    {}
    break;

  case 2262:
#line 14384 ""
    {}
    break;

  case 2263:
#line 14385 ""
    {}
    break;

  case 2264:
#line 14386 ""
    {}
    break;

  case 2265:
#line 14387 ""
    {}
    break;

  case 2266:
#line 14388 ""
    {}
    break;

  case 2267:
#line 14389 ""
    {}
    break;

  case 2268:
#line 14390 ""
    {}
    break;

  case 2269:
#line 14391 ""
    {}
    break;

  case 2270:
#line 14392 ""
    {}
    break;

  case 2271:
#line 14393 ""
    {}
    break;

  case 2272:
#line 14394 ""
    {}
    break;

  case 2273:
#line 14395 ""
    {}
    break;

  case 2274:
#line 14396 ""
    {}
    break;

  case 2275:
#line 14397 ""
    {}
    break;

  case 2276:
#line 14398 ""
    {}
    break;

  case 2277:
#line 14399 ""
    {}
    break;

  case 2278:
#line 14400 ""
    {}
    break;

  case 2279:
#line 14401 ""
    {}
    break;

  case 2280:
#line 14402 ""
    {}
    break;

  case 2281:
#line 14403 ""
    {}
    break;

  case 2282:
#line 14404 ""
    {}
    break;

  case 2283:
#line 14405 ""
    {}
    break;

  case 2284:
#line 14406 ""
    {}
    break;

  case 2285:
#line 14407 ""
    {}
    break;

  case 2286:
#line 14408 ""
    {}
    break;

  case 2287:
#line 14409 ""
    {}
    break;

  case 2288:
#line 14410 ""
    {}
    break;

  case 2289:
#line 14411 ""
    {}
    break;

  case 2290:
#line 14412 ""
    {}
    break;

  case 2291:
#line 14413 ""
    {}
    break;

  case 2292:
#line 14414 ""
    {}
    break;

  case 2293:
#line 14415 ""
    {}
    break;

  case 2294:
#line 14416 ""
    {}
    break;

  case 2295:
#line 14417 ""
    {}
    break;

  case 2296:
#line 14418 ""
    {}
    break;

  case 2297:
#line 14419 ""
    {}
    break;

  case 2298:
#line 14420 ""
    {}
    break;

  case 2299:
#line 14421 ""
    {}
    break;

  case 2300:
#line 14422 ""
    {}
    break;

  case 2301:
#line 14423 ""
    {}
    break;

  case 2302:
#line 14424 ""
    {}
    break;

  case 2303:
#line 14425 ""
    {}
    break;

  case 2304:
#line 14426 ""
    {}
    break;

  case 2305:
#line 14427 ""
    {}
    break;

  case 2306:
#line 14428 ""
    {}
    break;

  case 2307:
#line 14429 ""
    {}
    break;

  case 2308:
#line 14430 ""
    {}
    break;

  case 2309:
#line 14431 ""
    {}
    break;

  case 2310:
#line 14432 ""
    {}
    break;

  case 2311:
#line 14433 ""
    {}
    break;

  case 2312:
#line 14434 ""
    {}
    break;

  case 2313:
#line 14435 ""
    {}
    break;

  case 2314:
#line 14436 ""
    {}
    break;

  case 2315:
#line 14437 ""
    {}
    break;

  case 2316:
#line 14438 ""
    {}
    break;

  case 2317:
#line 14439 ""
    {}
    break;

  case 2318:
#line 14440 ""
    {}
    break;

  case 2319:
#line 14441 ""
    {}
    break;

  case 2320:
#line 14442 ""
    {}
    break;

  case 2321:
#line 14443 ""
    {}
    break;

  case 2322:
#line 14444 ""
    {}
    break;

  case 2323:
#line 14445 ""
    {}
    break;

  case 2324:
#line 14446 ""
    {}
    break;

  case 2325:
#line 14447 ""
    {}
    break;

  case 2326:
#line 14448 ""
    {}
    break;

  case 2327:
#line 14449 ""
    {}
    break;

  case 2328:
#line 14450 ""
    {}
    break;

  case 2329:
#line 14451 ""
    {}
    break;

  case 2330:
#line 14452 ""
    {}
    break;

  case 2331:
#line 14453 ""
    {}
    break;

  case 2332:
#line 14454 ""
    {}
    break;

  case 2333:
#line 14455 ""
    {}
    break;

  case 2334:
#line 14456 ""
    {}
    break;

  case 2335:
#line 14457 ""
    {}
    break;

  case 2336:
#line 14458 ""
    {}
    break;

  case 2337:
#line 14459 ""
    {}
    break;

  case 2338:
#line 14460 ""
    {}
    break;

  case 2339:
#line 14472 ""
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2340:
#line 14484 ""
    {}
    break;

  case 2341:
#line 14491 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2343:
#line 14497 ""
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2344:
#line 14501 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2345:
#line 14506 ""
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2347:
#line 14516 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2349:
#line 14522 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2352:
#line 14536 ""
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2353:
#line 14540 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2354:
#line 14545 ""
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2355:
#line 14549 ""
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2356:
#line 14558 ""
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2359:
#line 14566 ""
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2360:
#line 14567 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2361:
#line 14568 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2362:
#line 14572 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2363:
#line 14573 ""
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2364:
#line 14574 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2365:
#line 14575 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2366:
#line 14579 ""
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2367:
#line 14580 ""
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2368:
#line 14581 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2369:
#line 14582 ""
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2370:
#line 14588 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2371:
#line 14613 ""
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2372:
#line 14620 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2373:
#line 14713 ""
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2374:
#line 14724 ""
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2375:
#line 14737 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2376:
#line 14753 ""
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2377:
#line 14766 ""
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2378:
#line 14788 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2379:
#line 14823 ""
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2380:
#line 14865 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2381:
#line 14893 ""
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2382:
#line 14939 ""
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2387:
#line 14960 ""
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2388:
#line 14978 ""
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2389:
#line 14995 ""
    { (yyval.num)= true; }
    break;

  case 2390:
#line 14996 ""
    { (yyval.num)= false; }
    break;

  case 2391:
#line 15000 ""
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2392:
#line 15001 ""
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2393:
#line 15002 ""
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2394:
#line 15003 ""
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2395:
#line 15007 ""
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2396:
#line 15009 ""
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2397:
#line 15027 ""
    {
		    WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2398:
#line 15040 ""
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2399:
#line 15041 ""
    { (yyval.item)=0; }
    break;

  case 2400:
#line 15043 ""
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2401:
#line 15049 ""
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2402:
#line 15055 ""
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2403:
#line 15066 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2404:
#line 15077 ""
    {}
    break;

  case 2409:
#line 15092 ""
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2410:
#line 15104 ""
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2411:
#line 15105 ""
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2412:
#line 15107 ""
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2413:
#line 15111 ""
    { (yyval.num)= TL_READ; }
    break;

  case 2414:
#line 15116 ""
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2415:
#line 15127 ""
    {}
    break;

  case 2416:
#line 15136 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2417:
#line 15152 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2418:
#line 15168 ""
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2419:
#line 15186 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2420:
#line 15206 ""
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2421:
#line 15207 ""
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2422:
#line 15211 ""
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2423:
#line 15212 ""
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2424:
#line 15216 ""
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2425:
#line 15217 ""
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2426:
#line 15218 ""
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2427:
#line 15219 ""
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2428:
#line 15221 ""
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2429:
#line 15228 ""
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2430:
#line 15234 ""
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2431:
#line 15235 ""
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2432:
#line 15236 ""
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2433:
#line 15237 ""
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2434:
#line 15238 ""
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2435:
#line 15244 ""
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2436:
#line 15245 ""
    {}
    break;

  case 2437:
#line 15250 ""
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2438:
#line 15255 ""
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2439:
#line 15265 ""
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2440:
#line 15275 ""
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2441:
#line 15279 ""
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2442:
#line 15287 ""
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2443:
#line 15288 ""
    {}
    break;

  case 2444:
#line 15294 ""
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2445:
#line 15300 ""
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2446:
#line 15311 ""
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2447:
#line 15321 ""
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2450:
#line 15335 ""
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2451:
#line 15342 ""
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2456:
#line 15360 ""
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2457:
#line 15361 ""
    {}
    break;

  case 2458:
#line 15363 ""
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2459:
#line 15364 ""
    {}
    break;

  case 2460:
#line 15366 ""
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2461:
#line 15367 ""
    {}
    break;

  case 2462:
#line 15369 ""
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2463:
#line 15370 ""
    {}
    break;

  case 2464:
#line 15371 ""
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2465:
#line 15372 ""
    {}
    break;

  case 2466:
#line 15373 ""
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2467:
#line 15374 ""
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2468:
#line 15375 ""
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2469:
#line 15376 ""
    { Lex->grant |= DROP_ACL;}
    break;

  case 2470:
#line 15377 ""
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2471:
#line 15378 ""
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2472:
#line 15379 ""
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2473:
#line 15380 ""
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2474:
#line 15381 ""
    { Lex->grant |= FILE_ACL;}
    break;

  case 2475:
#line 15382 ""
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2476:
#line 15383 ""
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2477:
#line 15384 ""
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2478:
#line 15385 ""
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2479:
#line 15386 ""
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2480:
#line 15387 ""
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2481:
#line 15388 ""
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2482:
#line 15389 ""
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2483:
#line 15390 ""
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2484:
#line 15391 ""
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2485:
#line 15392 ""
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2486:
#line 15393 ""
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2487:
#line 15394 ""
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2488:
#line 15395 ""
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2489:
#line 15396 ""
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2490:
#line 15400 ""
    {}
    break;

  case 2491:
#line 15401 ""
    {}
    break;

  case 2494:
#line 15411 ""
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2495:
#line 15421 ""
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2496:
#line 15431 ""
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2497:
#line 15444 ""
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2498:
#line 15459 ""
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2499:
#line 15472 ""
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2500:
#line 15485 ""
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2501:
#line 15497 ""
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2502:
#line 15502 ""
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2503:
#line 15510 ""
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2504:
#line 15515 ""
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2505:
#line 15523 ""
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2506:
#line 15541 ""
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2507:
#line 15561 ""
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2508:
#line 15573 ""
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2509:
#line 15586 ""
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2510:
#line 15594 ""
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2514:
#line 15608 ""
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2516:
#line 15637 ""
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2517:
#line 15641 ""
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2518:
#line 15645 ""
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2519:
#line 15649 ""
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2520:
#line 15655 ""
    {}
    break;

  case 2522:
#line 15660 ""
    {}
    break;

  case 2523:
#line 15661 ""
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2524:
#line 15665 ""
    {}
    break;

  case 2525:
#line 15666 ""
    {}
    break;

  case 2526:
#line 15670 ""
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2527:
#line 15672 ""
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2528:
#line 15678 ""
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2529:
#line 15684 ""
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2530:
#line 15690 ""
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2531:
#line 15699 ""
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2532:
#line 15704 ""
    {}
    break;

  case 2533:
#line 15708 ""
    {}
    break;

  case 2534:
#line 15709 ""
    {}
    break;

  case 2535:
#line 15714 ""
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2536:
#line 15715 ""
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2537:
#line 15716 ""
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2538:
#line 15721 ""
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2539:
#line 15722 ""
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2540:
#line 15723 ""
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2541:
#line 15727 ""
    {}
    break;

  case 2542:
#line 15728 ""
    {}
    break;

  case 2543:
#line 15733 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2544:
#line 15745 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2545:
#line 15755 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2546:
#line 15764 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2547:
#line 15773 ""
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2548:
#line 15786 ""
    {}
    break;

  case 2550:
#line 15792 ""
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2551:
#line 15797 ""
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2552:
#line 15807 ""
    { (yyval.num)= 0; }
    break;

  case 2553:
#line 15808 ""
    { (yyval.num)= 1; }
    break;

  case 2554:
#line 15809 ""
    { (yyval.num)= 1; }
    break;

  case 2555:
#line 15813 ""
    { (yyval.is_not_empty)= false; }
    break;

  case 2556:
#line 15814 ""
    { (yyval.is_not_empty)= true; }
    break;

  case 2557:
#line 15818 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2558:
#line 15834 ""
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2561:
#line 15847 ""
    { (yyval.num)=1; }
    break;

  case 2562:
#line 15848 ""
    { (yyval.num)=1; }
    break;

  case 2563:
#line 15849 ""
    { (yyval.num)=0; }
    break;

  case 2564:
#line 15854 ""
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2565:
#line 15858 ""
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2567:
#line 15867 ""
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2568:
#line 15873 ""
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2569:
#line 15882 ""
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2570:
#line 15888 ""
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2571:
#line 15909 ""
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2576:
#line 15944 ""
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2577:
#line 15946 ""
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2578:
#line 15953 ""
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2579:
#line 15954 ""
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2580:
#line 15955 ""
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2581:
#line 15956 ""
    { Select->options|= SELECT_ROUGHLY; }
    break;

  case 2582:
#line 15958 ""
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2583:
#line 15964 ""
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2584:
#line 15969 ""
    { Select->options|= SELECT_ALL; }
    break;

  case 2585:
#line 15980 ""
    {}
    break;

  case 2586:
#line 15982 ""
    {}
    break;

  case 2587:
#line 15984 ""
    {}
    break;

  case 2601:
#line 16017 ""
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2602:
#line 16031 ""
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2603:
#line 16044 ""
    {}
    break;

  case 2604:
#line 16046 ""
    {}
    break;

  case 2605:
#line 16048 ""
    {}
    break;

  case 2606:
#line 16053 ""
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2607:
#line 16058 ""
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2608:
#line 16060 ""
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2609:
#line 16062 ""
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2610:
#line 16067 ""
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2611:
#line 16069 ""
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2612:
#line 16071 ""
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2613:
#line 16076 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2615:
#line 16093 ""
    {}
    break;

  case 2617:
#line 16099 ""
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2618:
#line 16104 ""
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2619:
#line 16111 ""
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2620:
#line 16120 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2621:
#line 16137 ""
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2624:
#line 16158 ""
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2626:
#line 16167 ""
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2627:
#line 16171 ""
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2628:
#line 16178 ""
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2629:
#line 16180 ""
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2630:
#line 16182 ""
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2631:
#line 16184 ""
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2632:
#line 16201 ""
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2633:
#line 16207 ""
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2634:
#line 16212 ""
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2635:
#line 16242 ""
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2636:
#line 16277 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2637:
#line 16295 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2638:
#line 16318 ""
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2639:
#line 16350 ""
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2640:
#line 16355 ""
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2641:
#line 16363 ""
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2642:
#line 16386 ""
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2643:
#line 16394 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2644:
#line 16452 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2645:
#line 16472 ""
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2646:
#line 16485 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2647:
#line 16495 ""
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2648:
#line 16503 ""
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2649:
#line 16517 ""
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2650:
#line 16521 ""
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2651:
#line 16525 ""
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2652:
#line 16529 ""
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2653:
#line 16533 ""
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2654:
#line 16537 ""
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2655:
#line 16544 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2656:
#line 16551 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2657:
#line 16558 ""
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2658:
#line 16567 ""
    {}
    break;

  case 2659:
#line 16568 ""
    {}
    break;

  case 2660:
#line 16572 ""
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2661:
#line 16573 ""
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2662:
#line 16574 ""
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2663:
#line 16578 ""
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2664:
#line 16579 ""
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2665:
#line 16584 ""
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2666:
#line 16586 ""
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2668:
#line 16591 ""
    {}
    break;

  case 2669:
#line 16592 ""
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2670:
#line 16597 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2671:
#line 16607 ""
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 37693
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (YYTHD, yymsg);
	  }
	else
	  {
	    yyerror (YYTHD, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, YYTHD);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



